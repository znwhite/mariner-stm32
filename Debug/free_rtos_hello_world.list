
free_rtos_hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005db0  08005db0  00006db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e6c  08005e6c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e6c  08005e6c  00006e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e74  08005e74  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e78  08005e78  00006e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c2c  20000060  08005edc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c8c  08005edc  00007c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015512  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003010  00000000  00000000  0001c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e17  00000000  00000000  00020800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f30  00000000  00000000  00021617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b9a  00000000  00000000  00024547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a96  00000000  00000000  000380e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110b77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa0  00000000  00000000  00110bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00115b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d98 	.word	0x08005d98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005d98 	.word	0x08005d98

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fc34 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f836 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f974 	bl	8000834 <MX_GPIO_Init>
  MX_TIM3_Init();
 800054c:	f000 f8fa 	bl	8000744 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000550:	f000 f89e 	bl	8000690 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f002 fd80 	bl	8003058 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <main+0x54>)
 800055a:	2100      	movs	r1, #0
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <main+0x58>)
 800055e:	f002 fdc5 	bl	80030ec <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <main+0x5c>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of motorTest01 */
  motorTest01Handle = osThreadNew(StartMotorTest01, NULL, &motorTest01_attributes);
 8000568:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <main+0x60>)
 800056a:	2100      	movs	r1, #0
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <main+0x64>)
 800056e:	f002 fdbd 	bl	80030ec <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0b      	ldr	r2, [pc, #44]	@ (80005a4 <main+0x68>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of servoTest01 */
  servoTest01Handle = osThreadNew(StartServoTest01, NULL, &servoTest01_attributes);
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <main+0x6c>)
 800057a:	2100      	movs	r1, #0
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <main+0x70>)
 800057e:	f002 fdb5 	bl	80030ec <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <main+0x74>)
 8000586:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f002 fd8a 	bl	80030a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <main+0x50>
 8000590:	08005de8 	.word	0x08005de8
 8000594:	08000931 	.word	0x08000931
 8000598:	2000010c 	.word	0x2000010c
 800059c:	08005e0c 	.word	0x08005e0c
 80005a0:	08000951 	.word	0x08000951
 80005a4:	20000110 	.word	0x20000110
 80005a8:	08005e30 	.word	0x08005e30
 80005ac:	080009b1 	.word	0x080009b1
 80005b0:	20000114 	.word	0x20000114

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	@ 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 faf8 	bl	8005bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a29      	ldr	r2, [pc, #164]	@ (8000688 <SystemClock_Config+0xd4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <SystemClock_Config+0xd4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000600:	4a22      	ldr	r2, [pc, #136]	@ (800068c <SystemClock_Config+0xd8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b20      	ldr	r3, [pc, #128]	@ (800068c <SystemClock_Config+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800062c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000630:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fa06 	bl	8001a54 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800064e:	f000 f9fb 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe88 	bl	8001384 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067a:	f000 f9e5 	bl	8000a48 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006bc:	f240 628f 	movw	r2, #1679	@ 0x68f
 80006c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006dc:	4818      	ldr	r0, [pc, #96]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006de:	f001 fd17 	bl	8002110 <HAL_TIM_PWM_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80006e8:	f000 f9ae 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4619      	mov	r1, r3
 80006fa:	4811      	ldr	r0, [pc, #68]	@ (8000740 <MX_TIM2_Init+0xb0>)
 80006fc:	f002 fbd8 	bl	8002eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000706:	f000 f99f 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800070a:	2360      	movs	r3, #96	@ 0x60
 800070c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 800070e:	2396      	movs	r3, #150	@ 0x96
 8000710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2204      	movs	r2, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4807      	ldr	r0, [pc, #28]	@ (8000740 <MX_TIM2_Init+0xb0>)
 8000722:	f001 fefd 	bl	8002520 <HAL_TIM_PWM_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800072c:	f000 f98c 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <MX_TIM2_Init+0xb0>)
 8000732:	f000 f9fd 	bl	8000b30 <HAL_TIM_MspPostInit>

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	@ 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000007c 	.word	0x2000007c

08000744 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	@ 0x38
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000774:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_TIM3_Init+0xe8>)
 8000776:	4a2e      	ldr	r2, [pc, #184]	@ (8000830 <MX_TIM3_Init+0xec>)
 8000778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <MX_TIM3_Init+0xe8>)
 800077c:	2253      	movs	r2, #83	@ 0x53
 800077e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_TIM3_Init+0xe8>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <MX_TIM3_Init+0xe8>)
 8000788:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800078c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <MX_TIM3_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <MX_TIM3_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800079a:	4824      	ldr	r0, [pc, #144]	@ (800082c <MX_TIM3_Init+0xe8>)
 800079c:	f001 fbf8 	bl	8001f90 <HAL_TIM_Base_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007a6:	f000 f94f 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b4:	4619      	mov	r1, r3
 80007b6:	481d      	ldr	r0, [pc, #116]	@ (800082c <MX_TIM3_Init+0xe8>)
 80007b8:	f001 ff74 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007c2:	f000 f941 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c6:	4819      	ldr	r0, [pc, #100]	@ (800082c <MX_TIM3_Init+0xe8>)
 80007c8:	f001 fca2 	bl	8002110 <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007d2:	f000 f939 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4811      	ldr	r0, [pc, #68]	@ (800082c <MX_TIM3_Init+0xe8>)
 80007e6:	f002 fb63 	bl	8002eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007f0:	f000 f92a 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2360      	movs	r3, #96	@ 0x60
 80007f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80007f8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2208      	movs	r2, #8
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	@ (800082c <MX_TIM3_Init+0xe8>)
 800080e:	f001 fe87 	bl	8002520 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000818:	f000 f916 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <MX_TIM3_Init+0xe8>)
 800081e:	f000 f987 	bl	8000b30 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	@ 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000c4 	.word	0x200000c4
 8000830:	40000400 	.word	0x40000400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b35      	ldr	r3, [pc, #212]	@ (8000924 <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a34      	ldr	r2, [pc, #208]	@ (8000924 <MX_GPIO_Init+0xf0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_GPIO_Init+0xf0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_GPIO_Init+0xf0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a2d      	ldr	r2, [pc, #180]	@ (8000924 <MX_GPIO_Init+0xf0>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_GPIO_Init+0xf0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_GPIO_Init+0xf0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a26      	ldr	r2, [pc, #152]	@ (8000924 <MX_GPIO_Init+0xf0>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <MX_GPIO_Init+0xf0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_GPIO_Init+0xf0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <MX_GPIO_Init+0xf0>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_GPIO_Init+0xf0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <MX_GPIO_Init+0xf4>)
 80008c0:	f000 fd2c 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	@ (800092c <MX_GPIO_Init+0xf8>)
 80008dc:	f000 fb8a 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e0:	230c      	movs	r3, #12
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f0:	2307      	movs	r3, #7
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480b      	ldr	r0, [pc, #44]	@ (8000928 <MX_GPIO_Init+0xf4>)
 80008fc:	f000 fb7a 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_GPIO_Init+0xf4>)
 8000918:	f000 fb6c 	bl	8000ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	40020800 	.word	0x40020800

08000930 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000938:	2120      	movs	r1, #32
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <StartBlink01+0x1c>)
 800093c:	f000 fd07 	bl	800134e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000940:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000944:	f002 fc64 	bl	8003210 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000948:	bf00      	nop
 800094a:	e7f5      	b.n	8000938 <StartBlink01+0x8>
 800094c:	40020000 	.word	0x40020000

08000950 <StartMotorTest01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTest01 */
void StartMotorTest01(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTest01 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000958:	2108      	movs	r1, #8
 800095a:	4814      	ldr	r0, [pc, #80]	@ (80009ac <StartMotorTest01+0x5c>)
 800095c:	f001 fc28 	bl	80021b0 <HAL_TIM_PWM_Start>

  // Thruster-specific arming - hold minimum throttle longer
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Neutral position
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <StartMotorTest01+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000968:	63da      	str	r2, [r3, #60]	@ 0x3c
  osDelay(3000);
 800096a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800096e:	f002 fc4f 	bl	8003210 <osDelay>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000); // Minimum
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <StartMotorTest01+0x5c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
  osDelay(5000); // Hold minimum longer for thruster ESCs
 800097c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000980:	f002 fc46 	bl	8003210 <osDelay>

  for(;;)
  {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1100); // Very slow forward
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <StartMotorTest01+0x5c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f240 424c 	movw	r2, #1100	@ 0x44c
 800098c:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(3000);
 800098e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000992:	f002 fc3d 	bl	8003210 <osDelay>

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Stop (neutral)
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <StartMotorTest01+0x5c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800099e:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(10000);
 80009a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80009a4:	f002 fc34 	bl	8003210 <osDelay>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1100); // Very slow forward
 80009a8:	bf00      	nop
 80009aa:	e7eb      	b.n	8000984 <StartMotorTest01+0x34>
 80009ac:	200000c4 	.word	0x200000c4

080009b0 <StartServoTest01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoTest01 */
void StartServoTest01(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartServoTest01 */

    // Start the PWM for servo
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <StartServoTest01+0x70>)
 80009bc:	f001 fbf8 	bl	80021b0 <HAL_TIM_PWM_Start>

    // Position values
    uint32_t center = 75;
 80009c0:	234b      	movs	r3, #75	@ 0x4b
 80009c2:	617b      	str	r3, [r7, #20]
    uint32_t right = 125;
 80009c4:	237d      	movs	r3, #125	@ 0x7d
 80009c6:	613b      	str	r3, [r7, #16]
    uint32_t left = 25;
 80009c8:	2319      	movs	r3, #25
 80009ca:	60fb      	str	r3, [r7, #12]

    // Start at center
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <StartServoTest01+0x70>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	639a      	str	r2, [r3, #56]	@ 0x38
    osDelay(2000); // Initial center hold
 80009d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009d8:	f002 fc1a 	bl	8003210 <osDelay>

    /* Infinite loop: Center → Right → Center → Left */
    for(;;)
    {
        // Go to center
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <StartServoTest01+0x70>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 80009e4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80009e8:	f002 fc12 	bl	8003210 <osDelay>

        // Go to right
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, right);
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <StartServoTest01+0x70>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 80009f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80009f8:	f002 fc0a 	bl	8003210 <osDelay>

        // Return to center
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <StartServoTest01+0x70>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 8000a04:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a08:	f002 fc02 	bl	8003210 <osDelay>

        // Go to left
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, left);
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <StartServoTest01+0x70>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 8000a14:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a18:	f002 fbfa 	bl	8003210 <osDelay>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 8000a1c:	bf00      	nop
 8000a1e:	e7dd      	b.n	80009dc <StartServoTest01+0x2c>
 8000a20:	2000007c 	.word	0x2000007c

08000a24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a36:	f000 f9db 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40001000 	.word	0x40001000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x54>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	210f      	movs	r1, #15
 8000a96:	f06f 0001 	mvn.w	r0, #1
 8000a9a:	f000 fa81 	bl	8000fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000abc:	d10d      	bne.n	8000ada <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <HAL_TIM_Base_MspInit+0x3c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10d      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_TIM_Base_MspInit+0x40>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a09      	ldr	r2, [pc, #36]	@ (8000b2c <HAL_TIM_Base_MspInit+0x40>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <HAL_TIM_Base_MspInit+0x40>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40000400 	.word	0x40000400
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b50:	d11e      	bne.n	8000b90 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <HAL_TIM_MspPostInit+0xb0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <HAL_TIM_MspPostInit+0xb0>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <HAL_TIM_MspPostInit+0xb0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4816      	ldr	r0, [pc, #88]	@ (8000be4 <HAL_TIM_MspPostInit+0xb4>)
 8000b8a:	f000 fa33 	bl	8000ff4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b8e:	e022      	b.n	8000bd6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <HAL_TIM_MspPostInit+0xb8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d11d      	bne.n	8000bd6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_TIM_MspPostInit+0xb0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <HAL_TIM_MspPostInit+0xb0>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <HAL_TIM_MspPostInit+0xb0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4806      	ldr	r0, [pc, #24]	@ (8000bec <HAL_TIM_MspPostInit+0xbc>)
 8000bd2:	f000 fa0f 	bl	8000ff4 <HAL_GPIO_Init>
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40000400 	.word	0x40000400
 8000bec:	40020400 	.word	0x40020400

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	@ 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <HAL_InitTick+0xe4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	4a32      	ldr	r2, [pc, #200]	@ (8000cd4 <HAL_InitTick+0xe4>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <HAL_InitTick+0xe4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1c:	f107 0210 	add.w	r2, r7, #16
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fcb2 	bl	8001590 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c36:	f000 fc97 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c3c:	e004      	b.n	8000c48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3e:	f000 fc93 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8000c42:	4603      	mov	r3, r0
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c4a:	4a23      	ldr	r2, [pc, #140]	@ (8000cd8 <HAL_InitTick+0xe8>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	0c9b      	lsrs	r3, r3, #18
 8000c52:	3b01      	subs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <HAL_InitTick+0xf0>)
 8000c5a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c64:	4a1d      	ldr	r2, [pc, #116]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c7c:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c7e:	f001 f987 	bl	8001f90 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11b      	bne.n	8000cc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c90:	4812      	ldr	r0, [pc, #72]	@ (8000cdc <HAL_InitTick+0xec>)
 8000c92:	f001 f9cd 	bl	8002030 <HAL_TIM_Base_Start_IT>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d111      	bne.n	8000cc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca4:	2036      	movs	r0, #54	@ 0x36
 8000ca6:	f000 f997 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d808      	bhi.n	8000cc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	2036      	movs	r0, #54	@ 0x36
 8000cb6:	f000 f973 	bl	8000fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_InitTick+0xf4>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e002      	b.n	8000cc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3738      	adds	r7, #56	@ 0x38
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	20000118 	.word	0x20000118
 8000ce0:	40001000 	.word	0x40001000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM6_DAC_IRQHandler+0x10>)
 8000d26:	f001 fb0b 	bl	8002340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000118 	.word	0x20000118

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d5c:	f7ff ffea 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f004 ff1f 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fbd7 	bl	800053c <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d9c:	08005e7c 	.word	0x08005e7c
  ldr r2, =_sbss
 8000da0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000da4:	20004c8c 	.word	0x20004c8c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8d8 	bl	8000f8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff ff08 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fe38 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000160 	.word	0x20000160

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000160 	.word	0x20000160

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff4c 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff61 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb1 	bl	8000f24 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff80 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff54 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e165      	b.n	80012dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8154 	bne.w	80012d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80ae 	beq.w	80012d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a5c      	ldr	r2, [pc, #368]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b5a      	ldr	r3, [pc, #360]	@ (80012f4 <HAL_GPIO_Init+0x300>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a58      	ldr	r2, [pc, #352]	@ (80012f8 <HAL_GPIO_Init+0x304>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	@ (80012fc <HAL_GPIO_Init+0x308>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001300 <HAL_GPIO_Init+0x30c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001304 <HAL_GPIO_Init+0x310>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001308 <HAL_GPIO_Init+0x314>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x20e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	@ (800130c <HAL_GPIO_Init+0x318>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x20a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001310 <HAL_GPIO_Init+0x31c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x206>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a49      	ldr	r2, [pc, #292]	@ (8001314 <HAL_GPIO_Init+0x320>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x202>
 80011f2:	2306      	movs	r3, #6
 80011f4:	e00c      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e00a      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 80011fe:	2304      	movs	r3, #4
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x21c>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	@ (80012f8 <HAL_GPIO_Init+0x304>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <HAL_GPIO_Init+0x324>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a31      	ldr	r2, [pc, #196]	@ (8001318 <HAL_GPIO_Init+0x324>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <HAL_GPIO_Init+0x324>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_GPIO_Init+0x324>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001282:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_GPIO_Init+0x324>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <HAL_GPIO_Init+0x324>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <HAL_GPIO_Init+0x324>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d0:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <HAL_GPIO_Init+0x324>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f ae96 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40013c00 	.word	0x40013c00

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001360:	887a      	ldrh	r2, [r7, #2]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	041a      	lsls	r2, r3, #16
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43d9      	mvns	r1, r3
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	400b      	ands	r3, r1
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0cc      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b68      	ldr	r3, [pc, #416]	@ (800153c <HAL_RCC_ClockConfig+0x1b8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d90c      	bls.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b65      	ldr	r3, [pc, #404]	@ (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b63      	ldr	r3, [pc, #396]	@ (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b8      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4b59      	ldr	r3, [pc, #356]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a58      	ldr	r2, [pc, #352]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4b53      	ldr	r3, [pc, #332]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a52      	ldr	r2, [pc, #328]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b50      	ldr	r3, [pc, #320]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	494d      	ldr	r1, [pc, #308]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	4313      	orrs	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d044      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d119      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d003      	beq.n	8001442 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143e:	2b03      	cmp	r3, #3
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b3f      	ldr	r3, [pc, #252]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e067      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	4b37      	ldr	r3, [pc, #220]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 0203 	bic.w	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4934      	ldr	r1, [pc, #208]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff fcd0 	bl	8000e18 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	e00a      	b.n	8001492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147c:	f7ff fccc 	bl	8000e18 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e04f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 020c 	and.w	r2, r3, #12
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1eb      	bne.n	800147c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b25      	ldr	r3, [pc, #148]	@ (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d20c      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e032      	b.n	8001532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4916      	ldr	r1, [pc, #88]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	490e      	ldr	r1, [pc, #56]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f873 	bl	80015f4 <HAL_RCC_GetSysClockFreq>
 800150e:	4602      	mov	r2, r0
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	490a      	ldr	r1, [pc, #40]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fb60 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00
 8001540:	40023800 	.word	0x40023800
 8001544:	08005e54 	.word	0x08005e54
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_RCC_GetHCLKFreq+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800156c:	f7ff fff0 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	0a9b      	lsrs	r3, r3, #10
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	4903      	ldr	r1, [pc, #12]	@ (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	08005e64 	.word	0x08005e64

08001590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	220f      	movs	r2, #15
 800159e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_RCC_GetClockConfig+0x5c>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_RCC_GetClockConfig+0x5c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_RCC_GetClockConfig+0x5c>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_RCC_GetClockConfig+0x5c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_RCC_GetClockConfig+0x60>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 020f 	and.w	r2, r3, #15
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	b0ae      	sub	sp, #184	@ 0xb8
 80015fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161a:	4bcb      	ldr	r3, [pc, #812]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b0c      	cmp	r3, #12
 8001624:	f200 8206 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x440>
 8001628:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <HAL_RCC_GetSysClockFreq+0x3c>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001665 	.word	0x08001665
 8001634:	08001a35 	.word	0x08001a35
 8001638:	08001a35 	.word	0x08001a35
 800163c:	08001a35 	.word	0x08001a35
 8001640:	0800166d 	.word	0x0800166d
 8001644:	08001a35 	.word	0x08001a35
 8001648:	08001a35 	.word	0x08001a35
 800164c:	08001a35 	.word	0x08001a35
 8001650:	08001675 	.word	0x08001675
 8001654:	08001a35 	.word	0x08001a35
 8001658:	08001a35 	.word	0x08001a35
 800165c:	08001a35 	.word	0x08001a35
 8001660:	08001865 	.word	0x08001865
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4bb9      	ldr	r3, [pc, #740]	@ (800194c <HAL_RCC_GetSysClockFreq+0x358>)
 8001666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800166a:	e1e7      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4bb8      	ldr	r3, [pc, #736]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x35c>)
 800166e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001672:	e1e3      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001674:	4bb4      	ldr	r3, [pc, #720]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800167c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001680:	4bb1      	ldr	r3, [pc, #708]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d071      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168c:	4bae      	ldr	r3, [pc, #696]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	2200      	movs	r2, #0
 8001694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001698:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800169c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016b2:	4622      	mov	r2, r4
 80016b4:	462b      	mov	r3, r5
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	0159      	lsls	r1, r3, #5
 80016c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c4:	0150      	lsls	r0, r2, #5
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4621      	mov	r1, r4
 80016cc:	1a51      	subs	r1, r2, r1
 80016ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80016d0:	4629      	mov	r1, r5
 80016d2:	eb63 0301 	sbc.w	r3, r3, r1
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016e4:	4649      	mov	r1, r9
 80016e6:	018b      	lsls	r3, r1, #6
 80016e8:	4641      	mov	r1, r8
 80016ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ee:	4641      	mov	r1, r8
 80016f0:	018a      	lsls	r2, r1, #6
 80016f2:	4641      	mov	r1, r8
 80016f4:	1a51      	subs	r1, r2, r1
 80016f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016f8:	4649      	mov	r1, r9
 80016fa:	eb63 0301 	sbc.w	r3, r3, r1
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800170c:	4649      	mov	r1, r9
 800170e:	00cb      	lsls	r3, r1, #3
 8001710:	4641      	mov	r1, r8
 8001712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001716:	4641      	mov	r1, r8
 8001718:	00ca      	lsls	r2, r1, #3
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	4603      	mov	r3, r0
 8001720:	4622      	mov	r2, r4
 8001722:	189b      	adds	r3, r3, r2
 8001724:	633b      	str	r3, [r7, #48]	@ 0x30
 8001726:	462b      	mov	r3, r5
 8001728:	460a      	mov	r2, r1
 800172a:	eb42 0303 	adc.w	r3, r2, r3
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800173c:	4629      	mov	r1, r5
 800173e:	024b      	lsls	r3, r1, #9
 8001740:	4621      	mov	r1, r4
 8001742:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001746:	4621      	mov	r1, r4
 8001748:	024a      	lsls	r2, r1, #9
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001752:	2200      	movs	r2, #0
 8001754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001758:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800175c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001760:	f7fe fd56 	bl	8000210 <__aeabi_uldivmod>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4613      	mov	r3, r2
 800176a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800176e:	e067      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001770:	4b75      	ldr	r3, [pc, #468]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	099b      	lsrs	r3, r3, #6
 8001776:	2200      	movs	r2, #0
 8001778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800177c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001780:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001788:	67bb      	str	r3, [r7, #120]	@ 0x78
 800178a:	2300      	movs	r3, #0
 800178c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800178e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001792:	4622      	mov	r2, r4
 8001794:	462b      	mov	r3, r5
 8001796:	f04f 0000 	mov.w	r0, #0
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	0159      	lsls	r1, r3, #5
 80017a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a4:	0150      	lsls	r0, r2, #5
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4621      	mov	r1, r4
 80017ac:	1a51      	subs	r1, r2, r1
 80017ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017b0:	4629      	mov	r1, r5
 80017b2:	eb63 0301 	sbc.w	r3, r3, r1
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80017c4:	4649      	mov	r1, r9
 80017c6:	018b      	lsls	r3, r1, #6
 80017c8:	4641      	mov	r1, r8
 80017ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ce:	4641      	mov	r1, r8
 80017d0:	018a      	lsls	r2, r1, #6
 80017d2:	4641      	mov	r1, r8
 80017d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017d8:	4649      	mov	r1, r9
 80017da:	eb63 0b01 	sbc.w	fp, r3, r1
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017f2:	4692      	mov	sl, r2
 80017f4:	469b      	mov	fp, r3
 80017f6:	4623      	mov	r3, r4
 80017f8:	eb1a 0303 	adds.w	r3, sl, r3
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	462b      	mov	r3, r5
 8001800:	eb4b 0303 	adc.w	r3, fp, r3
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001812:	4629      	mov	r1, r5
 8001814:	028b      	lsls	r3, r1, #10
 8001816:	4621      	mov	r1, r4
 8001818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800181c:	4621      	mov	r1, r4
 800181e:	028a      	lsls	r2, r1, #10
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001828:	2200      	movs	r2, #0
 800182a:	673b      	str	r3, [r7, #112]	@ 0x70
 800182c:	677a      	str	r2, [r7, #116]	@ 0x74
 800182e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001832:	f7fe fced 	bl	8000210 <__aeabi_uldivmod>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4613      	mov	r3, r2
 800183c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001840:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	3301      	adds	r3, #1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001862:	e0eb      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001870:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d06b      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187c:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x354>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	2200      	movs	r2, #0
 8001884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800188a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001890:	2300      	movs	r3, #0
 8001892:	667b      	str	r3, [r7, #100]	@ 0x64
 8001894:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001898:	4622      	mov	r2, r4
 800189a:	462b      	mov	r3, r5
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0159      	lsls	r1, r3, #5
 80018a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018aa:	0150      	lsls	r0, r2, #5
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4621      	mov	r1, r4
 80018b2:	1a51      	subs	r1, r2, r1
 80018b4:	61b9      	str	r1, [r7, #24]
 80018b6:	4629      	mov	r1, r5
 80018b8:	eb63 0301 	sbc.w	r3, r3, r1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018ca:	4659      	mov	r1, fp
 80018cc:	018b      	lsls	r3, r1, #6
 80018ce:	4651      	mov	r1, sl
 80018d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d4:	4651      	mov	r1, sl
 80018d6:	018a      	lsls	r2, r1, #6
 80018d8:	4651      	mov	r1, sl
 80018da:	ebb2 0801 	subs.w	r8, r2, r1
 80018de:	4659      	mov	r1, fp
 80018e0:	eb63 0901 	sbc.w	r9, r3, r1
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018f8:	4690      	mov	r8, r2
 80018fa:	4699      	mov	r9, r3
 80018fc:	4623      	mov	r3, r4
 80018fe:	eb18 0303 	adds.w	r3, r8, r3
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	462b      	mov	r3, r5
 8001906:	eb49 0303 	adc.w	r3, r9, r3
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001918:	4629      	mov	r1, r5
 800191a:	024b      	lsls	r3, r1, #9
 800191c:	4621      	mov	r1, r4
 800191e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001922:	4621      	mov	r1, r4
 8001924:	024a      	lsls	r2, r1, #9
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800192e:	2200      	movs	r2, #0
 8001930:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001932:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001934:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001938:	f7fe fc6a 	bl	8000210 <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001946:	e065      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x420>
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	2200      	movs	r2, #0
 800195c:	4618      	mov	r0, r3
 800195e:	4611      	mov	r1, r2
 8001960:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001964:	653b      	str	r3, [r7, #80]	@ 0x50
 8001966:	2300      	movs	r3, #0
 8001968:	657b      	str	r3, [r7, #84]	@ 0x54
 800196a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800196e:	4642      	mov	r2, r8
 8001970:	464b      	mov	r3, r9
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4641      	mov	r1, r8
 8001988:	1a51      	subs	r1, r2, r1
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	4649      	mov	r1, r9
 800198e:	eb63 0301 	sbc.w	r3, r3, r1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019a0:	4659      	mov	r1, fp
 80019a2:	018b      	lsls	r3, r1, #6
 80019a4:	4651      	mov	r1, sl
 80019a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019aa:	4651      	mov	r1, sl
 80019ac:	018a      	lsls	r2, r1, #6
 80019ae:	4651      	mov	r1, sl
 80019b0:	1a54      	subs	r4, r2, r1
 80019b2:	4659      	mov	r1, fp
 80019b4:	eb63 0501 	sbc.w	r5, r3, r1
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	00eb      	lsls	r3, r5, #3
 80019c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c6:	00e2      	lsls	r2, r4, #3
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	18e3      	adds	r3, r4, r3
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	464b      	mov	r3, r9
 80019d4:	eb45 0303 	adc.w	r3, r5, r3
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e6:	4629      	mov	r1, r5
 80019e8:	028b      	lsls	r3, r1, #10
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f0:	4621      	mov	r1, r4
 80019f2:	028a      	lsls	r2, r1, #10
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019fc:	2200      	movs	r2, #0
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a06:	f7fe fc03 	bl	8000210 <__aeabi_uldivmod>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4613      	mov	r3, r2
 8001a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	0f1b      	lsrs	r3, r3, #28
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a32:	e003      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	37b8      	adds	r7, #184	@ 0xb8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400

08001a54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e28d      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8083 	beq.w	8001b7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a74:	4b94      	ldr	r3, [pc, #592]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d019      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a80:	4b91      	ldr	r3, [pc, #580]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a8c:	4b8e      	ldr	r3, [pc, #568]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a98:	d00c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d112      	bne.n	8001acc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4b88      	ldr	r3, [pc, #544]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ab2:	d10b      	bne.n	8001acc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	4b84      	ldr	r3, [pc, #528]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d05b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x124>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d157      	bne.n	8001b78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e25a      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x90>
 8001ad6:	4b7c      	ldr	r3, [pc, #496]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7b      	ldr	r2, [pc, #492]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0xcc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0xb4>
 8001aee:	4b76      	ldr	r3, [pc, #472]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a75      	ldr	r2, [pc, #468]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b73      	ldr	r3, [pc, #460]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a72      	ldr	r2, [pc, #456]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0xcc>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6b      	ldr	r2, [pc, #428]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f976 	bl	8000e18 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff f972 	bl	8000e18 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	@ 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e21f      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b61      	ldr	r3, [pc, #388]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0xdc>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f962 	bl	8000e18 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f95e 	bl	8000e18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	@ 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e20b      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	4b57      	ldr	r3, [pc, #348]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x104>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d06f      	beq.n	8001c66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b86:	4b50      	ldr	r3, [pc, #320]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d017      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b92:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb6:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b41      	ldr	r3, [pc, #260]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x186>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1d3      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4937      	ldr	r1, [pc, #220]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_RCC_OscConfig+0x278>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f90b 	bl	8000e18 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff f907 	bl	8000e18 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1b4      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4925      	ldr	r1, [pc, #148]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_RCC_OscConfig+0x278>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f8ea 	bl	8000e18 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f8e6 	bl	8000e18 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e193      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d036      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d016      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff f8ca 	bl	8000e18 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff f8c6 	bl	8000e18 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e173      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x234>
 8001ca6:	e01b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff f8b3 	bl	8000e18 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	e00e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb6:	f7ff f8af 	bl	8000e18 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d907      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e15c      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	42470000 	.word	0x42470000
 8001cd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	4b8a      	ldr	r3, [pc, #552]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ea      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8097 	beq.w	8001e1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b83      	ldr	r3, [pc, #524]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b7f      	ldr	r3, [pc, #508]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	4a7e      	ldr	r2, [pc, #504]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b79      	ldr	r3, [pc, #484]	@ (8001f04 <HAL_RCC_OscConfig+0x4b0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b76      	ldr	r3, [pc, #472]	@ (8001f04 <HAL_RCC_OscConfig+0x4b0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a75      	ldr	r2, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0x4b0>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff f86f 	bl	8000e18 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7ff f86b 	bl	8000e18 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e118      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b6c      	ldr	r3, [pc, #432]	@ (8001f04 <HAL_RCC_OscConfig+0x4b0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x31e>
 8001d64:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d68:	4a65      	ldr	r2, [pc, #404]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d70:	e01c      	b.n	8001dac <HAL_RCC_OscConfig+0x358>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x340>
 8001d7a:	4b61      	ldr	r3, [pc, #388]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a60      	ldr	r2, [pc, #384]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d86:	4b5e      	ldr	r3, [pc, #376]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0x358>
 8001d94:	4b5a      	ldr	r3, [pc, #360]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	4a59      	ldr	r2, [pc, #356]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da0:	4b57      	ldr	r3, [pc, #348]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da4:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d015      	beq.n	8001de0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f830 	bl	8000e18 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f82c 	bl	8000e18 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0d7      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0ee      	beq.n	8001dbc <HAL_RCC_OscConfig+0x368>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7ff f81a 	bl	8000e18 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff f816 	bl	8000e18 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e0c1      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ee      	bne.n	8001de8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e10:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	4a3a      	ldr	r2, [pc, #232]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80ad 	beq.w	8001f80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e26:	4b36      	ldr	r3, [pc, #216]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d060      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d145      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_RCC_OscConfig+0x4b4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe ffea 	bl	8000e18 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe ffe6 	bl	8000e18 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e093      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	071b      	lsls	r3, r3, #28
 8001e92:	491b      	ldr	r1, [pc, #108]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x4b4>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7fe ffbb 	bl	8000e18 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7fe ffb7 	bl	8000e18 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e064      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x452>
 8001ec4:	e05c      	b.n	8001f80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_RCC_OscConfig+0x4b4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ffa4 	bl	8000e18 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe ffa0 	bl	8000e18 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e04d      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_RCC_OscConfig+0x4ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x480>
 8001ef2:	e045      	b.n	8001f80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e040      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_RCC_OscConfig+0x538>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d030      	beq.n	8001f7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d129      	bne.n	8001f7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d122      	bne.n	8001f7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d119      	bne.n	8001f7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	3b01      	subs	r3, #1
 8001f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10f      	bne.n	8001f7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e041      	b.n	8002026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fd98 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f000 fc58 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d001      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e04e      	b.n	80020e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a23      	ldr	r2, [pc, #140]	@ (80020f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d022      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002072:	d01d      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1f      	ldr	r2, [pc, #124]	@ (80020f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d018      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1e      	ldr	r2, [pc, #120]	@ (80020fc <HAL_TIM_Base_Start_IT+0xcc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <HAL_TIM_Base_Start_IT+0xd0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00e      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <HAL_TIM_Base_Start_IT+0xd4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_TIM_Base_Start_IT+0xd8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x80>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a18      	ldr	r2, [pc, #96]	@ (800210c <HAL_TIM_Base_Start_IT+0xdc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d111      	bne.n	80020d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d010      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d2:	e007      	b.n	80020e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800
 8002100:	40000c00 	.word	0x40000c00
 8002104:	40010400 	.word	0x40010400
 8002108:	40014000 	.word	0x40014000
 800210c:	40001800 	.word	0x40001800

08002110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e041      	b.n	80021a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fcb8 	bl	8000aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f000 fb98 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_TIM_PWM_Start+0x24>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e022      	b.n	800221a <HAL_TIM_PWM_Start+0x6a>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d109      	bne.n	80021ee <HAL_TIM_PWM_Start+0x3e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	bf14      	ite	ne
 80021e6:	2301      	movne	r3, #1
 80021e8:	2300      	moveq	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e015      	b.n	800221a <HAL_TIM_PWM_Start+0x6a>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d109      	bne.n	8002208 <HAL_TIM_PWM_Start+0x58>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e008      	b.n	800221a <HAL_TIM_PWM_Start+0x6a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07c      	b.n	800231c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_TIM_PWM_Start+0x82>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002230:	e013      	b.n	800225a <HAL_TIM_PWM_Start+0xaa>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d104      	bne.n	8002242 <HAL_TIM_PWM_Start+0x92>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002240:	e00b      	b.n	800225a <HAL_TIM_PWM_Start+0xaa>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d104      	bne.n	8002252 <HAL_TIM_PWM_Start+0xa2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002250:	e003      	b.n	800225a <HAL_TIM_PWM_Start+0xaa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fdfe 	bl	8002e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a2d      	ldr	r2, [pc, #180]	@ (8002324 <HAL_TIM_PWM_Start+0x174>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_TIM_PWM_Start+0xcc>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2c      	ldr	r2, [pc, #176]	@ (8002328 <HAL_TIM_PWM_Start+0x178>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_TIM_PWM_Start+0xd0>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_TIM_PWM_Start+0xd2>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002294:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_TIM_PWM_Start+0x174>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d022      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a8:	d01d      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <HAL_TIM_PWM_Start+0x17c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d018      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002330 <HAL_TIM_PWM_Start+0x180>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002334 <HAL_TIM_PWM_Start+0x184>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00e      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a16      	ldr	r2, [pc, #88]	@ (8002328 <HAL_TIM_PWM_Start+0x178>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d009      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <HAL_TIM_PWM_Start+0x188>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_TIM_PWM_Start+0x136>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a16      	ldr	r2, [pc, #88]	@ (800233c <HAL_TIM_PWM_Start+0x18c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d111      	bne.n	800230a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d010      	beq.n	800231a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002308:	e007      	b.n	800231a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40010000 	.word	0x40010000
 8002328:	40010400 	.word	0x40010400
 800232c:	40000400 	.word	0x40000400
 8002330:	40000800 	.word	0x40000800
 8002334:	40000c00 	.word	0x40000c00
 8002338:	40014000 	.word	0x40014000
 800233c:	40001800 	.word	0x40001800

08002340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01b      	beq.n	80023a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa5b 	bl	8002846 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa4d 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa5e 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0204 	mvn.w	r2, #4
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa35 	bl	8002846 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa27 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa38 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0208 	mvn.w	r2, #8
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa0f 	bl	8002846 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa01 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fa12 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0210 	mvn.w	r2, #16
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2208      	movs	r2, #8
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9e9 	bl	8002846 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9db 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f9ec 	bl	800285a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0201 	mvn.w	r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fabc 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fd76 	bl	8002fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9bd 	bl	800286e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0220 	mvn.w	r2, #32
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fd48 	bl	8002fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800253a:	2302      	movs	r3, #2
 800253c:	e0ae      	b.n	800269c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	f200 809f 	bhi.w	800268c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800254e:	a201      	add	r2, pc, #4	@ (adr r2, 8002554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002589 	.word	0x08002589
 8002558:	0800268d 	.word	0x0800268d
 800255c:	0800268d 	.word	0x0800268d
 8002560:	0800268d 	.word	0x0800268d
 8002564:	080025c9 	.word	0x080025c9
 8002568:	0800268d 	.word	0x0800268d
 800256c:	0800268d 	.word	0x0800268d
 8002570:	0800268d 	.word	0x0800268d
 8002574:	0800260b 	.word	0x0800260b
 8002578:	0800268d 	.word	0x0800268d
 800257c:	0800268d 	.word	0x0800268d
 8002580:	0800268d 	.word	0x0800268d
 8002584:	0800264b 	.word	0x0800264b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fa1e 	bl	80029d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6999      	ldr	r1, [r3, #24]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	619a      	str	r2, [r3, #24]
      break;
 80025c6:	e064      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fa6e 	bl	8002ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	021a      	lsls	r2, r3, #8
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	619a      	str	r2, [r3, #24]
      break;
 8002608:	e043      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fac3 	bl	8002b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0208 	orr.w	r2, r2, #8
 8002624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0204 	bic.w	r2, r2, #4
 8002634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69d9      	ldr	r1, [r3, #28]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	61da      	str	r2, [r3, #28]
      break;
 8002648:	e023      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fb17 	bl	8002c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	61da      	str	r2, [r3, #28]
      break;
 800268a:	e002      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	75fb      	strb	r3, [r7, #23]
      break;
 8002690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_ConfigClockSource+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0b4      	b.n	800282a <HAL_TIM_ConfigClockSource+0x186>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f8:	d03e      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0xd4>
 80026fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fe:	f200 8087 	bhi.w	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002706:	f000 8086 	beq.w	8002816 <HAL_TIM_ConfigClockSource+0x172>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270e:	d87f      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b70      	cmp	r3, #112	@ 0x70
 8002712:	d01a      	beq.n	800274a <HAL_TIM_ConfigClockSource+0xa6>
 8002714:	2b70      	cmp	r3, #112	@ 0x70
 8002716:	d87b      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b60      	cmp	r3, #96	@ 0x60
 800271a:	d050      	beq.n	80027be <HAL_TIM_ConfigClockSource+0x11a>
 800271c:	2b60      	cmp	r3, #96	@ 0x60
 800271e:	d877      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b50      	cmp	r3, #80	@ 0x50
 8002722:	d03c      	beq.n	800279e <HAL_TIM_ConfigClockSource+0xfa>
 8002724:	2b50      	cmp	r3, #80	@ 0x50
 8002726:	d873      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b40      	cmp	r3, #64	@ 0x40
 800272a:	d058      	beq.n	80027de <HAL_TIM_ConfigClockSource+0x13a>
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d86f      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b30      	cmp	r3, #48	@ 0x30
 8002732:	d064      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002734:	2b30      	cmp	r3, #48	@ 0x30
 8002736:	d86b      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b20      	cmp	r3, #32
 800273a:	d060      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d867      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05c      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b10      	cmp	r3, #16
 8002746:	d05a      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	e062      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	f000 fb63 	bl	8002e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800276c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	609a      	str	r2, [r3, #8]
      break;
 8002776:	e04f      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	f000 fb4c 	bl	8002e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800279a:	609a      	str	r2, [r3, #8]
      break;
 800279c:	e03c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027aa:	461a      	mov	r2, r3
 80027ac:	f000 fac0 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2150      	movs	r1, #80	@ 0x50
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fb19 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 80027bc:	e02c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 fadf 	bl	8002d8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2160      	movs	r1, #96	@ 0x60
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fb09 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 80027dc:	e01c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 faa0 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2140      	movs	r1, #64	@ 0x40
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 faf9 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 80027fc:	e00c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 faf0 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 800280e:	e003      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e000      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a43      	ldr	r2, [pc, #268]	@ (80029a4 <TIM_Base_SetConfig+0x120>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <TIM_Base_SetConfig+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a2:	d00f      	beq.n	80028c4 <TIM_Base_SetConfig+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a40      	ldr	r2, [pc, #256]	@ (80029a8 <TIM_Base_SetConfig+0x124>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00b      	beq.n	80028c4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3f      	ldr	r2, [pc, #252]	@ (80029ac <TIM_Base_SetConfig+0x128>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3e      	ldr	r2, [pc, #248]	@ (80029b0 <TIM_Base_SetConfig+0x12c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3d      	ldr	r2, [pc, #244]	@ (80029b4 <TIM_Base_SetConfig+0x130>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d108      	bne.n	80028d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a32      	ldr	r2, [pc, #200]	@ (80029a4 <TIM_Base_SetConfig+0x120>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02b      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d027      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2f      	ldr	r2, [pc, #188]	@ (80029a8 <TIM_Base_SetConfig+0x124>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d023      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2e      	ldr	r2, [pc, #184]	@ (80029ac <TIM_Base_SetConfig+0x128>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2d      	ldr	r2, [pc, #180]	@ (80029b0 <TIM_Base_SetConfig+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01b      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2c      	ldr	r2, [pc, #176]	@ (80029b4 <TIM_Base_SetConfig+0x130>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d017      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <TIM_Base_SetConfig+0x134>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2a      	ldr	r2, [pc, #168]	@ (80029bc <TIM_Base_SetConfig+0x138>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00f      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a29      	ldr	r2, [pc, #164]	@ (80029c0 <TIM_Base_SetConfig+0x13c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00b      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <TIM_Base_SetConfig+0x140>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	@ (80029c8 <TIM_Base_SetConfig+0x144>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	@ (80029cc <TIM_Base_SetConfig+0x148>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a0e      	ldr	r2, [pc, #56]	@ (80029a4 <TIM_Base_SetConfig+0x120>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d003      	beq.n	8002976 <TIM_Base_SetConfig+0xf2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <TIM_Base_SetConfig+0x130>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d103      	bne.n	800297e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f043 0204 	orr.w	r2, r3, #4
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40010400 	.word	0x40010400
 80029b8:	40014000 	.word	0x40014000
 80029bc:	40014400 	.word	0x40014400
 80029c0:	40014800 	.word	0x40014800
 80029c4:	40001800 	.word	0x40001800
 80029c8:	40001c00 	.word	0x40001c00
 80029cc:	40002000 	.word	0x40002000

080029d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f023 0201 	bic.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a20      	ldr	r2, [pc, #128]	@ (8002aa8 <TIM_OC1_SetConfig+0xd8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC1_SetConfig+0x64>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aac <TIM_OC1_SetConfig+0xdc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10c      	bne.n	8002a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0308 	bic.w	r3, r3, #8
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a15      	ldr	r2, [pc, #84]	@ (8002aa8 <TIM_OC1_SetConfig+0xd8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_OC1_SetConfig+0x8e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <TIM_OC1_SetConfig+0xdc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	621a      	str	r2, [r3, #32]
}
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40010400 	.word	0x40010400

08002ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 0210 	bic.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <TIM_OC2_SetConfig+0xe4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_OC2_SetConfig+0x68>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <TIM_OC2_SetConfig+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10d      	bne.n	8002b34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <TIM_OC2_SetConfig+0xe4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <TIM_OC2_SetConfig+0x94>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a16      	ldr	r2, [pc, #88]	@ (8002b98 <TIM_OC2_SetConfig+0xe8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d113      	bne.n	8002b6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40010400 	.word	0x40010400

08002b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a21      	ldr	r2, [pc, #132]	@ (8002c7c <TIM_OC3_SetConfig+0xe0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_OC3_SetConfig+0x66>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a20      	ldr	r2, [pc, #128]	@ (8002c80 <TIM_OC3_SetConfig+0xe4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10d      	bne.n	8002c1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <TIM_OC3_SetConfig+0xe0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_OC3_SetConfig+0x92>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <TIM_OC3_SetConfig+0xe4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010400 	.word	0x40010400

08002c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <TIM_OC4_SetConfig+0xa4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_OC4_SetConfig+0x68>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a11      	ldr	r2, [pc, #68]	@ (8002d2c <TIM_OC4_SetConfig+0xa8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d109      	bne.n	8002d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	40010400 	.word	0x40010400

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f023 030a 	bic.w	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f023 0210 	bic.w	r2, r3, #16
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 0307 	orr.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	021a      	lsls	r2, r3, #8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e05a      	b.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a21      	ldr	r2, [pc, #132]	@ (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d01d      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10c      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40001800 	.word	0x40001800

08002fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <__NVIC_SetPriority>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	@ (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	@ (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <SysTick_Handler+0x1c>)
 800302a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800302c:	f001 fd46 	bl	8004abc <xTaskGetSchedulerState>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003036:	f002 fb3f 	bl	80056b8 <xPortSysTickHandler>
  }
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003048:	2100      	movs	r1, #0
 800304a:	f06f 0004 	mvn.w	r0, #4
 800304e:	f7ff ffbf 	bl	8002fd0 <__NVIC_SetPriority>
#endif
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800305e:	f3ef 8305 	mrs	r3, IPSR
 8003062:	603b      	str	r3, [r7, #0]
  return(result);
 8003064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800306a:	f06f 0305 	mvn.w	r3, #5
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	e00c      	b.n	800308c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <osKernelInitialize+0x44>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800307a:	4b08      	ldr	r3, [pc, #32]	@ (800309c <osKernelInitialize+0x44>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	e002      	b.n	800308c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800308a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000164 	.word	0x20000164

080030a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a6:	f3ef 8305 	mrs	r3, IPSR
 80030aa:	603b      	str	r3, [r7, #0]
  return(result);
 80030ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80030b2:	f06f 0305 	mvn.w	r3, #5
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e010      	b.n	80030dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <osKernelStart+0x48>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d109      	bne.n	80030d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030c2:	f7ff ffbf 	bl	8003044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <osKernelStart+0x48>)
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030cc:	f001 f892 	bl	80041f4 <vTaskStartScheduler>
      stat = osOK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	e002      	b.n	80030dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030dc:	687b      	ldr	r3, [r7, #4]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000164 	.word	0x20000164

080030ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	@ 0x38
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030fc:	f3ef 8305 	mrs	r3, IPSR
 8003100:	617b      	str	r3, [r7, #20]
  return(result);
 8003102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003104:	2b00      	cmp	r3, #0
 8003106:	d17e      	bne.n	8003206 <osThreadNew+0x11a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d07b      	beq.n	8003206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003112:	2318      	movs	r3, #24
 8003114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800311e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d045      	beq.n	80031b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <osThreadNew+0x48>
        name = attr->name;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <osThreadNew+0x6e>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b38      	cmp	r3, #56	@ 0x38
 800314c:	d805      	bhi.n	800315a <osThreadNew+0x6e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <osThreadNew+0x72>
        return (NULL);
 800315a:	2300      	movs	r3, #0
 800315c:	e054      	b.n	8003208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <osThreadNew+0xa8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2ba7      	cmp	r3, #167	@ 0xa7
 800317c:	d90a      	bls.n	8003194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <osThreadNew+0xa8>
        mem = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e010      	b.n	80031b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10c      	bne.n	80031b6 <osThreadNew+0xca>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d108      	bne.n	80031b6 <osThreadNew+0xca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <osThreadNew+0xca>
          mem = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e001      	b.n	80031b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d110      	bne.n	80031de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031c4:	9202      	str	r2, [sp, #8]
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fe1a 	bl	8003e0c <xTaskCreateStatic>
 80031d8:	4603      	mov	r3, r0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e013      	b.n	8003206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fe68 	bl	8003ecc <xTaskCreate>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <osThreadNew+0x11a>
            hTask = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003206:	693b      	ldr	r3, [r7, #16]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	@ 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003218:	f3ef 8305 	mrs	r3, IPSR
 800321c:	60bb      	str	r3, [r7, #8]
  return(result);
 800321e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <osDelay+0x1c>
    stat = osErrorISR;
 8003224:	f06f 0305 	mvn.w	r3, #5
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e007      	b.n	800323c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 ffa6 	bl	8004188 <vTaskDelay>
    }
  }

  return (stat);
 800323c:	68fb      	ldr	r3, [r7, #12]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a07      	ldr	r2, [pc, #28]	@ (8003274 <vApplicationGetIdleTaskMemory+0x2c>)
 8003258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4a06      	ldr	r2, [pc, #24]	@ (8003278 <vApplicationGetIdleTaskMemory+0x30>)
 800325e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2280      	movs	r2, #128	@ 0x80
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000168 	.word	0x20000168
 8003278:	20000210 	.word	0x20000210

0800327c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a07      	ldr	r2, [pc, #28]	@ (80032a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800328c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a06      	ldr	r2, [pc, #24]	@ (80032ac <vApplicationGetTimerTaskMemory+0x30>)
 8003292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	20000410 	.word	0x20000410
 80032ac:	200004b8 	.word	0x200004b8

080032b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 0208 	add.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f103 0208 	add.w	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0208 	add.w	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003368:	d103      	bne.n	8003372 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00c      	b.n	800338c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3308      	adds	r3, #8
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e002      	b.n	8003380 <vListInsert+0x2e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d2f6      	bcs.n	800337a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d103      	bne.n	80033f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003444:	f002 f8a8 	bl	8005598 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	441a      	add	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003474:	3b01      	subs	r3, #1
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	441a      	add	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	22ff      	movs	r2, #255	@ 0xff
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	22ff      	movs	r2, #255	@ 0xff
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d114      	bne.n	80034c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01a      	beq.n	80034d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3310      	adds	r3, #16
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 f942 	bl	8004730 <xTaskRemoveFromEventList>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d012      	beq.n	80034d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <xQueueGenericReset+0xd0>)
 80034b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	e009      	b.n	80034d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3310      	adds	r3, #16
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fef1 	bl	80032b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3324      	adds	r3, #36	@ 0x24
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff feec 	bl	80032b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034d8:	f002 f890 	bl	80055fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034dc:	2301      	movs	r3, #1
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	@ 0x38
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	e7fd      	b.n	8003532 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <xQueueGenericCreateStatic+0x56>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <xQueueGenericCreateStatic+0x5a>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <xQueueGenericCreateStatic+0x5c>
 8003546:	2300      	movs	r3, #0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	623b      	str	r3, [r7, #32]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <xQueueGenericCreateStatic+0x84>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <xQueueGenericCreateStatic+0x88>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <xQueueGenericCreateStatic+0x8a>
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	61fb      	str	r3, [r7, #28]
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	e7fd      	b.n	800358e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003592:	2350      	movs	r3, #80	@ 0x50
 8003594:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b50      	cmp	r3, #80	@ 0x50
 800359a:	d00b      	beq.n	80035b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	61bb      	str	r3, [r7, #24]
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80035cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f805 	bl	80035e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80035de:	4618      	mov	r0, r3
 80035e0:	3730      	adds	r7, #48	@ 0x30
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e002      	b.n	8003608 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003614:	2101      	movs	r1, #1
 8003616:	69b8      	ldr	r0, [r7, #24]
 8003618:	f7ff fefe 	bl	8003418 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	@ 0x38
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <xQueueGenericSend+0x34>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <xQueueGenericSend+0x42>
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <xQueueGenericSend+0x46>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <xQueueGenericSend+0x48>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <xQueueGenericSend+0x64>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d103      	bne.n	800369e <xQueueGenericSend+0x72>
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <xQueueGenericSend+0x76>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <xQueueGenericSend+0x78>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <xQueueGenericSend+0x94>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	623b      	str	r3, [r7, #32]
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c0:	f001 f9fc 	bl	8004abc <xTaskGetSchedulerState>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <xQueueGenericSend+0xa4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <xQueueGenericSend+0xa8>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <xQueueGenericSend+0xaa>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61fb      	str	r3, [r7, #28]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f2:	f001 ff51 	bl	8005598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <xQueueGenericSend+0xdc>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d129      	bne.n	800375c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800370e:	f000 fa0f 	bl	8003b30 <prvCopyDataToQueue>
 8003712:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	3324      	adds	r3, #36	@ 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f805 	bl	8004730 <xTaskRemoveFromEventList>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800372c:	4b3f      	ldr	r3, [pc, #252]	@ (800382c <xQueueGenericSend+0x200>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	e00a      	b.n	8003754 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800373e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003744:	4b39      	ldr	r3, [pc, #228]	@ (800382c <xQueueGenericSend+0x200>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003754:	f001 ff52 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	e063      	b.n	8003824 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003762:	f001 ff4b 	bl	80055fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003766:	2300      	movs	r3, #0
 8003768:	e05c      	b.n	8003824 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800376a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4618      	mov	r0, r3
 8003776:	f001 f83f 	bl	80047f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800377e:	f001 ff3d 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003782:	f000 fda7 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003786:	f001 ff07 	bl	8005598 <vPortEnterCritical>
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003796:	d103      	bne.n	80037a0 <xQueueGenericSend+0x174>
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037ac:	d103      	bne.n	80037b6 <xQueueGenericSend+0x18a>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037b6:	f001 ff21 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ba:	1d3a      	adds	r2, r7, #4
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f82e 	bl	8004824 <xTaskCheckForTimeOut>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d124      	bne.n	8003818 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037d0:	f000 faa6 	bl	8003d20 <prvIsQueueFull>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	3310      	adds	r3, #16
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 ff52 	bl	800468c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037ea:	f000 fa31 	bl	8003c50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037ee:	f000 fd7f 	bl	80042f0 <xTaskResumeAll>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f af7c 	bne.w	80036f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80037fa:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <xQueueGenericSend+0x200>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e772      	b.n	80036f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800380c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800380e:	f000 fa1f 	bl	8003c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003812:	f000 fd6d 	bl	80042f0 <xTaskResumeAll>
 8003816:	e76c      	b.n	80036f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800381a:	f000 fa19 	bl	8003c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800381e:	f000 fd67 	bl	80042f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003822:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003824:	4618      	mov	r0, r3
 8003826:	3738      	adds	r7, #56	@ 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b090      	sub	sp, #64	@ 0x40
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	e7fd      	b.n	800385c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <xQueueGenericSendFromISR+0x3e>
 8003866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <xQueueGenericSendFromISR+0x42>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <xQueueGenericSendFromISR+0x44>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d103      	bne.n	800389e <xQueueGenericSendFromISR+0x6e>
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <xQueueGenericSendFromISR+0x72>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <xQueueGenericSendFromISR+0x74>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	623b      	str	r3, [r7, #32]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038c0:	f001 ff4a 	bl	8005758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038c4:	f3ef 8211 	mrs	r2, BASEPRI
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <xQueueGenericSendFromISR+0xc2>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d12f      	bne.n	8003952 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003908:	f000 f912 	bl	8003b30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800390c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003914:	d112      	bne.n	800393c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800391e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003920:	3324      	adds	r3, #36	@ 0x24
 8003922:	4618      	mov	r0, r3
 8003924:	f000 ff04 	bl	8004730 <xTaskRemoveFromEventList>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00e      	beq.n	800394c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e007      	b.n	800394c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800393c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003940:	3301      	adds	r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	b25a      	sxtb	r2, r3
 8003946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800394c:	2301      	movs	r3, #1
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003950:	e001      	b.n	8003956 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003952:	2300      	movs	r3, #0
 8003954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003960:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003964:	4618      	mov	r0, r3
 8003966:	3740      	adds	r7, #64	@ 0x40
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	@ 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003978:	2300      	movs	r3, #0
 800397a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <xQueueReceive+0x32>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	623b      	str	r3, [r7, #32]
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <xQueueReceive+0x40>
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <xQueueReceive+0x44>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <xQueueReceive+0x46>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <xQueueReceive+0x62>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61fb      	str	r3, [r7, #28]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ce:	f001 f875 	bl	8004abc <xTaskGetSchedulerState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xQueueReceive+0x72>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <xQueueReceive+0x76>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueReceive+0x78>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <xQueueReceive+0x94>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	61bb      	str	r3, [r7, #24]
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a00:	f001 fdca 	bl	8005598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01f      	beq.n	8003a50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a14:	f000 f8f6 	bl	8003c04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00f      	beq.n	8003a48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fe7f 	bl	8004730 <xTaskRemoveFromEventList>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a38:	4b3c      	ldr	r3, [pc, #240]	@ (8003b2c <xQueueReceive+0x1c0>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a48:	f001 fdd8 	bl	80055fc <vPortExitCritical>
				return pdPASS;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e069      	b.n	8003b24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a56:	f001 fdd1 	bl	80055fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e062      	b.n	8003b24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a64:	f107 0310 	add.w	r3, r7, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fec5 	bl	80047f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a72:	f001 fdc3 	bl	80055fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a76:	f000 fc2d 	bl	80042d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a7a:	f001 fd8d 	bl	8005598 <vPortEnterCritical>
 8003a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a8a:	d103      	bne.n	8003a94 <xQueueReceive+0x128>
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a9a:	b25b      	sxtb	r3, r3
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aa0:	d103      	bne.n	8003aaa <xQueueReceive+0x13e>
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aaa:	f001 fda7 	bl	80055fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aae:	1d3a      	adds	r2, r7, #4
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 feb4 	bl	8004824 <xTaskCheckForTimeOut>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d123      	bne.n	8003b0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ac4:	f000 f916 	bl	8003cf4 <prvIsQueueEmpty>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d017      	beq.n	8003afe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad0:	3324      	adds	r3, #36	@ 0x24
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fdd8 	bl	800468c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ade:	f000 f8b7 	bl	8003c50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ae2:	f000 fc05 	bl	80042f0 <xTaskResumeAll>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d189      	bne.n	8003a00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <xQueueReceive+0x1c0>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	e780      	b.n	8003a00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b00:	f000 f8a6 	bl	8003c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b04:	f000 fbf4 	bl	80042f0 <xTaskResumeAll>
 8003b08:	e77a      	b.n	8003a00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b0c:	f000 f8a0 	bl	8003c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b10:	f000 fbee 	bl	80042f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b16:	f000 f8ed 	bl	8003cf4 <prvIsQueueEmpty>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f43f af6f 	beq.w	8003a00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3730      	adds	r7, #48	@ 0x30
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d14d      	bne.n	8003bf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 ffcc 	bl	8004af8 <xTaskPriorityDisinherit>
 8003b60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	e043      	b.n	8003bf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d119      	bne.n	8003ba4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6858      	ldr	r0, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	f002 f8a8 	bl	8005cd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	441a      	add	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d32b      	bcc.n	8003bf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	e026      	b.n	8003bf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68d8      	ldr	r0, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	461a      	mov	r2, r3
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	f002 f88e 	bl	8005cd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	425b      	negs	r3, r3
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d207      	bcs.n	8003be0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	425b      	negs	r3, r3
 8003bda:	441a      	add	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d105      	bne.n	8003bf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003bfa:	697b      	ldr	r3, [r7, #20]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d303      	bcc.n	8003c38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	461a      	mov	r2, r3
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f002 f844 	bl	8005cd0 <memcpy>
	}
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c58:	f001 fc9e 	bl	8005598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c64:	e011      	b.n	8003c8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3324      	adds	r3, #36	@ 0x24
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fd5c 	bl	8004730 <xTaskRemoveFromEventList>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c7e:	f000 fe35 	bl	80048ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	dce9      	bgt.n	8003c66 <prvUnlockQueue+0x16>
 8003c92:	e000      	b.n	8003c96 <prvUnlockQueue+0x46>
					break;
 8003c94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	22ff      	movs	r2, #255	@ 0xff
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 fcad 	bl	80055fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ca2:	f001 fc79 	bl	8005598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cae:	e011      	b.n	8003cd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d012      	beq.n	8003cde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3310      	adds	r3, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fd37 	bl	8004730 <xTaskRemoveFromEventList>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cc8:	f000 fe10 	bl	80048ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ccc:	7bbb      	ldrb	r3, [r7, #14]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	dce9      	bgt.n	8003cb0 <prvUnlockQueue+0x60>
 8003cdc:	e000      	b.n	8003ce0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	22ff      	movs	r2, #255	@ 0xff
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ce8:	f001 fc88 	bl	80055fc <vPortExitCritical>
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cfc:	f001 fc4c 	bl	8005598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e001      	b.n	8003d12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d12:	f001 fc73 	bl	80055fc <vPortExitCritical>

	return xReturn;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d28:	f001 fc36 	bl	8005598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d102      	bne.n	8003d3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e001      	b.n	8003d42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d42:	f001 fc5b 	bl	80055fc <vPortExitCritical>

	return xReturn;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e014      	b.n	8003d8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d60:	4a0f      	ldr	r2, [pc, #60]	@ (8003da0 <vQueueAddToRegistry+0x50>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d6c:	490c      	ldr	r1, [pc, #48]	@ (8003da0 <vQueueAddToRegistry+0x50>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d76:	4a0a      	ldr	r2, [pc, #40]	@ (8003da0 <vQueueAddToRegistry+0x50>)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d82:	e006      	b.n	8003d92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b07      	cmp	r3, #7
 8003d8e:	d9e7      	bls.n	8003d60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	200008b8 	.word	0x200008b8

08003da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003db4:	f001 fbf0 	bl	8005598 <vPortEnterCritical>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dc4:	d103      	bne.n	8003dce <vQueueWaitForMessageRestricted+0x2a>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dda:	d103      	bne.n	8003de4 <vQueueWaitForMessageRestricted+0x40>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003de4:	f001 fc0a 	bl	80055fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3324      	adds	r3, #36	@ 0x24
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fc6d 	bl	80046d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff26 	bl	8003c50 <prvUnlockQueue>
	}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08e      	sub	sp, #56	@ 0x38
 8003e10:	af04      	add	r7, sp, #16
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	623b      	str	r3, [r7, #32]
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	61fb      	str	r3, [r7, #28]
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	e7fd      	b.n	8003e52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e56:	23a8      	movs	r3, #168	@ 0xa8
 8003e58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003e5e:	d00b      	beq.n	8003e78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61bb      	str	r3, [r7, #24]
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01e      	beq.n	8003ebe <xTaskCreateStatic+0xb2>
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01b      	beq.n	8003ebe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9303      	str	r3, [sp, #12]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	9302      	str	r3, [sp, #8]
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f851 	bl	8003f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003eb8:	f000 f8f6 	bl	80040a8 <prvAddNewTaskToReadyList>
 8003ebc:	e001      	b.n	8003ec2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ec2:	697b      	ldr	r3, [r7, #20]
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	@ 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	@ 0x30
 8003ed0:	af04      	add	r7, sp, #16
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fc7b 	bl	80057dc <pvPortMalloc>
 8003ee6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003eee:	20a8      	movs	r0, #168	@ 0xa8
 8003ef0:	f001 fc74 	bl	80057dc <pvPortMalloc>
 8003ef4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f02:	e005      	b.n	8003f10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f04:	6978      	ldr	r0, [r7, #20]
 8003f06:	f001 fd37 	bl	8005978 <vPortFree>
 8003f0a:	e001      	b.n	8003f10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	2300      	movs	r3, #0
 8003f22:	9303      	str	r3, [sp, #12]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	9302      	str	r3, [sp, #8]
 8003f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f80f 	bl	8003f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f3a:	69f8      	ldr	r0, [r7, #28]
 8003f3c:	f000 f8b4 	bl	80040a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f40:	2301      	movs	r3, #1
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e002      	b.n	8003f4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f4c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	461a      	mov	r2, r3
 8003f70:	21a5      	movs	r1, #165	@ 0xa5
 8003f72:	f001 fe21 	bl	8005bb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f80:	3b01      	subs	r3, #1
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f023 0307 	bic.w	r3, r3, #7
 8003f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	617b      	str	r3, [r7, #20]
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01f      	beq.n	8003ff8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e012      	b.n	8003fe4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	7819      	ldrb	r1, [r3, #0]
 8003fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3334      	adds	r3, #52	@ 0x34
 8003fce:	460a      	mov	r2, r1
 8003fd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d9e9      	bls.n	8003fbe <prvInitialiseNewTask+0x66>
 8003fea:	e000      	b.n	8003fee <prvInitialiseNewTask+0x96>
			{
				break;
 8003fec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ff6:	e003      	b.n	8004000 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004002:	2b37      	cmp	r3, #55	@ 0x37
 8004004:	d901      	bls.n	800400a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004006:	2337      	movs	r3, #55	@ 0x37
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004014:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	2200      	movs	r2, #0
 800401a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	3304      	adds	r3, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff f965 	bl	80032f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	3318      	adds	r3, #24
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff f960 	bl	80032f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004034:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800403c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004044:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	2200      	movs	r2, #0
 800404a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	2200      	movs	r2, #0
 8004052:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	3354      	adds	r3, #84	@ 0x54
 800405a:	224c      	movs	r2, #76	@ 0x4c
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fdaa 	bl	8005bb8 <memset>
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	4a0d      	ldr	r2, [pc, #52]	@ (800409c <prvInitialiseNewTask+0x144>)
 8004068:	659a      	str	r2, [r3, #88]	@ 0x58
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	4a0c      	ldr	r2, [pc, #48]	@ (80040a0 <prvInitialiseNewTask+0x148>)
 800406e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	4a0c      	ldr	r2, [pc, #48]	@ (80040a4 <prvInitialiseNewTask+0x14c>)
 8004074:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	69b8      	ldr	r0, [r7, #24]
 800407c:	f001 f95a 	bl	8005334 <pxPortInitialiseStack>
 8004080:	4602      	mov	r2, r0
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004092:	bf00      	nop
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20004b4c 	.word	0x20004b4c
 80040a0:	20004bb4 	.word	0x20004bb4
 80040a4:	20004c1c 	.word	0x20004c1c

080040a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040b0:	f001 fa72 	bl	8005598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040b4:	4b2d      	ldr	r3, [pc, #180]	@ (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040be:	4b2c      	ldr	r3, [pc, #176]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d110      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040d4:	f000 fc2e 	bl	8004934 <prvInitialiseTaskLists>
 80040d8:	e00d      	b.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <prvAddNewTaskToReadyList+0xcc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040e2:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d802      	bhi.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040f6:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <prvAddNewTaskToReadyList+0xd0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <prvAddNewTaskToReadyList+0xd0>)
 80040fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004100:	4b1d      	ldr	r3, [pc, #116]	@ (8004178 <prvAddNewTaskToReadyList+0xd0>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410c:	4b1b      	ldr	r3, [pc, #108]	@ (800417c <prvAddNewTaskToReadyList+0xd4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d903      	bls.n	800411c <prvAddNewTaskToReadyList+0x74>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	4a18      	ldr	r2, [pc, #96]	@ (800417c <prvAddNewTaskToReadyList+0xd4>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <prvAddNewTaskToReadyList+0xd8>)
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7ff f8e9 	bl	800330a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004138:	f001 fa60 	bl	80055fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800413c:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <prvAddNewTaskToReadyList+0xcc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d207      	bcs.n	8004162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <prvAddNewTaskToReadyList+0xdc>)
 8004154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000dcc 	.word	0x20000dcc
 8004170:	200008f8 	.word	0x200008f8
 8004174:	20000dd8 	.word	0x20000dd8
 8004178:	20000de8 	.word	0x20000de8
 800417c:	20000dd4 	.word	0x20000dd4
 8004180:	200008fc 	.word	0x200008fc
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d018      	beq.n	80041cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800419a:	4b14      	ldr	r3, [pc, #80]	@ (80041ec <vTaskDelay+0x64>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <vTaskDelay+0x32>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	60bb      	str	r3, [r7, #8]
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	e7fd      	b.n	80041b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041ba:	f000 f88b 	bl	80042d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fd09 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041c6:	f000 f893 	bl	80042f0 <xTaskResumeAll>
 80041ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <vTaskDelay+0x68>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000df4 	.word	0x20000df4
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	@ 0x28
 80041f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004202:	463a      	mov	r2, r7
 8004204:	1d39      	adds	r1, r7, #4
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f81c 	bl	8003248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	9202      	str	r2, [sp, #8]
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2300      	movs	r3, #0
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	460a      	mov	r2, r1
 8004222:	4924      	ldr	r1, [pc, #144]	@ (80042b4 <vTaskStartScheduler+0xc0>)
 8004224:	4824      	ldr	r0, [pc, #144]	@ (80042b8 <vTaskStartScheduler+0xc4>)
 8004226:	f7ff fdf1 	bl	8003e0c <xTaskCreateStatic>
 800422a:	4603      	mov	r3, r0
 800422c:	4a23      	ldr	r2, [pc, #140]	@ (80042bc <vTaskStartScheduler+0xc8>)
 800422e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004230:	4b22      	ldr	r3, [pc, #136]	@ (80042bc <vTaskStartScheduler+0xc8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e001      	b.n	8004242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d102      	bne.n	800424e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004248:	f000 fd1a 	bl	8004c80 <xTimerCreateTimerTask>
 800424c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d11b      	bne.n	800428c <vTaskStartScheduler+0x98>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	613b      	str	r3, [r7, #16]
}
 8004266:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004268:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <vTaskStartScheduler+0xcc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3354      	adds	r3, #84	@ 0x54
 800426e:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <vTaskStartScheduler+0xd0>)
 8004270:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <vTaskStartScheduler+0xd4>)
 8004274:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800427a:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <vTaskStartScheduler+0xd8>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004280:	4b13      	ldr	r3, [pc, #76]	@ (80042d0 <vTaskStartScheduler+0xdc>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004286:	f001 f8e3 	bl	8005450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800428a:	e00f      	b.n	80042ac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004292:	d10b      	bne.n	80042ac <vTaskStartScheduler+0xb8>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <vTaskStartScheduler+0xb4>
}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	08005dd0 	.word	0x08005dd0
 80042b8:	08004905 	.word	0x08004905
 80042bc:	20000df0 	.word	0x20000df0
 80042c0:	200008f8 	.word	0x200008f8
 80042c4:	20000010 	.word	0x20000010
 80042c8:	20000dec 	.word	0x20000dec
 80042cc:	20000dd8 	.word	0x20000dd8
 80042d0:	20000dd0 	.word	0x20000dd0

080042d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042d8:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <vTaskSuspendAll+0x18>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a03      	ldr	r2, [pc, #12]	@ (80042ec <vTaskSuspendAll+0x18>)
 80042e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20000df4 	.word	0x20000df4

080042f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042fe:	4b42      	ldr	r3, [pc, #264]	@ (8004408 <xTaskResumeAll+0x118>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <xTaskResumeAll+0x2e>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	603b      	str	r3, [r7, #0]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800431e:	f001 f93b 	bl	8005598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004322:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <xTaskResumeAll+0x118>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	4a37      	ldr	r2, [pc, #220]	@ (8004408 <xTaskResumeAll+0x118>)
 800432a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800432c:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <xTaskResumeAll+0x118>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d162      	bne.n	80043fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004334:	4b35      	ldr	r3, [pc, #212]	@ (800440c <xTaskResumeAll+0x11c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d05e      	beq.n	80043fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433c:	e02f      	b.n	800439e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433e:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <xTaskResumeAll+0x120>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3318      	adds	r3, #24
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f83a 	bl	80033c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff f835 	bl	80033c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435e:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <xTaskResumeAll+0x124>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d903      	bls.n	800436e <xTaskResumeAll+0x7e>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <xTaskResumeAll+0x124>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <xTaskResumeAll+0x128>)
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7fe ffc0 	bl	800330a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	4b23      	ldr	r3, [pc, #140]	@ (800441c <xTaskResumeAll+0x12c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <xTaskResumeAll+0x130>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800439e:	4b1c      	ldr	r3, [pc, #112]	@ (8004410 <xTaskResumeAll+0x120>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1cb      	bne.n	800433e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043ac:	f000 fb66 	bl	8004a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <xTaskResumeAll+0x134>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043bc:	f000 f846 	bl	800444c <xTaskIncrementTick>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80043c6:	4b16      	ldr	r3, [pc, #88]	@ (8004420 <xTaskResumeAll+0x130>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f1      	bne.n	80043bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <xTaskResumeAll+0x134>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <xTaskResumeAll+0x130>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <xTaskResumeAll+0x138>)
 80043ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043fa:	f001 f8ff 	bl	80055fc <vPortExitCritical>

	return xAlreadyYielded;
 80043fe:	68bb      	ldr	r3, [r7, #8]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000df4 	.word	0x20000df4
 800440c:	20000dcc 	.word	0x20000dcc
 8004410:	20000d8c 	.word	0x20000d8c
 8004414:	20000dd4 	.word	0x20000dd4
 8004418:	200008fc 	.word	0x200008fc
 800441c:	200008f8 	.word	0x200008f8
 8004420:	20000de0 	.word	0x20000de0
 8004424:	20000ddc 	.word	0x20000ddc
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004432:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <xTaskGetTickCount+0x1c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004438:	687b      	ldr	r3, [r7, #4]
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000dd0 	.word	0x20000dd0

0800444c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b4f      	ldr	r3, [pc, #316]	@ (8004594 <xTaskIncrementTick+0x148>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 8090 	bne.w	8004580 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004460:	4b4d      	ldr	r3, [pc, #308]	@ (8004598 <xTaskIncrementTick+0x14c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004468:	4a4b      	ldr	r2, [pc, #300]	@ (8004598 <xTaskIncrementTick+0x14c>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d121      	bne.n	80044b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004474:	4b49      	ldr	r3, [pc, #292]	@ (800459c <xTaskIncrementTick+0x150>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <xTaskIncrementTick+0x4a>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	603b      	str	r3, [r7, #0]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <xTaskIncrementTick+0x46>
 8004496:	4b41      	ldr	r3, [pc, #260]	@ (800459c <xTaskIncrementTick+0x150>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	4b40      	ldr	r3, [pc, #256]	@ (80045a0 <xTaskIncrementTick+0x154>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3e      	ldr	r2, [pc, #248]	@ (800459c <xTaskIncrementTick+0x150>)
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4a3e      	ldr	r2, [pc, #248]	@ (80045a0 <xTaskIncrementTick+0x154>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b3e      	ldr	r3, [pc, #248]	@ (80045a4 <xTaskIncrementTick+0x158>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	4a3c      	ldr	r2, [pc, #240]	@ (80045a4 <xTaskIncrementTick+0x158>)
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	f000 fae2 	bl	8004a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044b8:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <xTaskIncrementTick+0x15c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d349      	bcc.n	8004556 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044c2:	4b36      	ldr	r3, [pc, #216]	@ (800459c <xTaskIncrementTick+0x150>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044cc:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <xTaskIncrementTick+0x15c>)
 80044ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044d2:	601a      	str	r2, [r3, #0]
					break;
 80044d4:	e03f      	b.n	8004556 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d6:	4b31      	ldr	r3, [pc, #196]	@ (800459c <xTaskIncrementTick+0x150>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d203      	bcs.n	80044f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044ee:	4a2e      	ldr	r2, [pc, #184]	@ (80045a8 <xTaskIncrementTick+0x15c>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044f4:	e02f      	b.n	8004556 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe ff62 	bl	80033c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3318      	adds	r3, #24
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe ff59 	bl	80033c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004516:	4b25      	ldr	r3, [pc, #148]	@ (80045ac <xTaskIncrementTick+0x160>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d903      	bls.n	8004526 <xTaskIncrementTick+0xda>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <xTaskIncrementTick+0x160>)
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4a1f      	ldr	r2, [pc, #124]	@ (80045b0 <xTaskIncrementTick+0x164>)
 8004534:	441a      	add	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fe fee4 	bl	800330a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004546:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <xTaskIncrementTick+0x168>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	429a      	cmp	r2, r3
 800454e:	d3b8      	bcc.n	80044c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004550:	2301      	movs	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004554:	e7b5      	b.n	80044c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004556:	4b17      	ldr	r3, [pc, #92]	@ (80045b4 <xTaskIncrementTick+0x168>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455c:	4914      	ldr	r1, [pc, #80]	@ (80045b0 <xTaskIncrementTick+0x164>)
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d901      	bls.n	8004572 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004572:	4b11      	ldr	r3, [pc, #68]	@ (80045b8 <xTaskIncrementTick+0x16c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800457a:	2301      	movs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e004      	b.n	800458a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004580:	4b0e      	ldr	r3, [pc, #56]	@ (80045bc <xTaskIncrementTick+0x170>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <xTaskIncrementTick+0x170>)
 8004588:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800458a:	697b      	ldr	r3, [r7, #20]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000df4 	.word	0x20000df4
 8004598:	20000dd0 	.word	0x20000dd0
 800459c:	20000d84 	.word	0x20000d84
 80045a0:	20000d88 	.word	0x20000d88
 80045a4:	20000de4 	.word	0x20000de4
 80045a8:	20000dec 	.word	0x20000dec
 80045ac:	20000dd4 	.word	0x20000dd4
 80045b0:	200008fc 	.word	0x200008fc
 80045b4:	200008f8 	.word	0x200008f8
 80045b8:	20000de0 	.word	0x20000de0
 80045bc:	20000ddc 	.word	0x20000ddc

080045c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004674 <vTaskSwitchContext+0xb4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <vTaskSwitchContext+0xb8>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045d4:	e047      	b.n	8004666 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80045d6:	4b28      	ldr	r3, [pc, #160]	@ (8004678 <vTaskSwitchContext+0xb8>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045dc:	4b27      	ldr	r3, [pc, #156]	@ (800467c <vTaskSwitchContext+0xbc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e011      	b.n	8004608 <vTaskSwitchContext+0x48>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <vTaskSwitchContext+0x42>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	607b      	str	r3, [r7, #4]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <vTaskSwitchContext+0x3e>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b01      	subs	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	491d      	ldr	r1, [pc, #116]	@ (8004680 <vTaskSwitchContext+0xc0>)
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0e3      	beq.n	80045e4 <vTaskSwitchContext+0x24>
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <vTaskSwitchContext+0xc0>)
 8004628:	4413      	add	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3308      	adds	r3, #8
 800463e:	429a      	cmp	r2, r3
 8004640:	d104      	bne.n	800464c <vTaskSwitchContext+0x8c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <vTaskSwitchContext+0xc4>)
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4a09      	ldr	r2, [pc, #36]	@ (800467c <vTaskSwitchContext+0xbc>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800465c:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <vTaskSwitchContext+0xc4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3354      	adds	r3, #84	@ 0x54
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <vTaskSwitchContext+0xc8>)
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000df4 	.word	0x20000df4
 8004678:	20000de0 	.word	0x20000de0
 800467c:	20000dd4 	.word	0x20000dd4
 8004680:	200008fc 	.word	0x200008fc
 8004684:	200008f8 	.word	0x200008f8
 8004688:	20000010 	.word	0x20000010

0800468c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046b4:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <vTaskPlaceOnEventList+0x48>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3318      	adds	r3, #24
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fe fe48 	bl	8003352 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046c2:	2101      	movs	r1, #1
 80046c4:	6838      	ldr	r0, [r7, #0]
 80046c6:	f000 fa87 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200008f8 	.word	0x200008f8

080046d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	617b      	str	r3, [r7, #20]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004702:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <vTaskPlaceOnEventListRestricted+0x54>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3318      	adds	r3, #24
 8004708:	4619      	mov	r1, r3
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7fe fdfd 	bl	800330a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800471a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	68b8      	ldr	r0, [r7, #8]
 8004720:	f000 fa5a 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
	}
 8004724:	bf00      	nop
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200008f8 	.word	0x200008f8

08004730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60fb      	str	r3, [r7, #12]
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	e7fd      	b.n	800475a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3318      	adds	r3, #24
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fe2e 	bl	80033c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <xTaskRemoveFromEventList+0xb0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d11d      	bne.n	80047ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fe25 	bl	80033c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4b19      	ldr	r3, [pc, #100]	@ (80047e4 <xTaskRemoveFromEventList+0xb4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d903      	bls.n	800478e <xTaskRemoveFromEventList+0x5e>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	4a16      	ldr	r2, [pc, #88]	@ (80047e4 <xTaskRemoveFromEventList+0xb4>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a13      	ldr	r2, [pc, #76]	@ (80047e8 <xTaskRemoveFromEventList+0xb8>)
 800479c:	441a      	add	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe fdb0 	bl	800330a <vListInsertEnd>
 80047aa:	e005      	b.n	80047b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	3318      	adds	r3, #24
 80047b0:	4619      	mov	r1, r3
 80047b2:	480e      	ldr	r0, [pc, #56]	@ (80047ec <xTaskRemoveFromEventList+0xbc>)
 80047b4:	f7fe fda9 	bl	800330a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047bc:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <xTaskRemoveFromEventList+0xc0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d905      	bls.n	80047d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <xTaskRemoveFromEventList+0xc4>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e001      	b.n	80047d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047d6:	697b      	ldr	r3, [r7, #20]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000df4 	.word	0x20000df4
 80047e4:	20000dd4 	.word	0x20000dd4
 80047e8:	200008fc 	.word	0x200008fc
 80047ec:	20000d8c 	.word	0x20000d8c
 80047f0:	200008f8 	.word	0x200008f8
 80047f4:	20000de0 	.word	0x20000de0

080047f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <vTaskInternalSetTimeOutState+0x24>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004808:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <vTaskInternalSetTimeOutState+0x28>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	20000de4 	.word	0x20000de4
 8004820:	20000dd0 	.word	0x20000dd0

08004824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	613b      	str	r3, [r7, #16]
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60fb      	str	r3, [r7, #12]
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800486a:	f000 fe95 	bl	8005598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <xTaskCheckForTimeOut+0xc0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004886:	d102      	bne.n	800488e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e023      	b.n	80048d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <xTaskCheckForTimeOut+0xc4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d007      	beq.n	80048aa <xTaskCheckForTimeOut+0x86>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e015      	b.n	80048d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d20b      	bcs.n	80048cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff99 	bl	80047f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e004      	b.n	80048d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f000 fe91 	bl	80055fc <vPortExitCritical>

	return xReturn;
 80048da:	69fb      	ldr	r3, [r7, #28]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000dd0 	.word	0x20000dd0
 80048e8:	20000de4 	.word	0x20000de4

080048ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048f0:	4b03      	ldr	r3, [pc, #12]	@ (8004900 <vTaskMissedYield+0x14>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000de0 	.word	0x20000de0

08004904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800490c:	f000 f852 	bl	80049b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <prvIdleTask+0x28>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d9f9      	bls.n	800490c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <prvIdleTask+0x2c>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004928:	e7f0      	b.n	800490c <prvIdleTask+0x8>
 800492a:	bf00      	nop
 800492c:	200008fc 	.word	0x200008fc
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e00c      	b.n	800495a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a12      	ldr	r2, [pc, #72]	@ (8004994 <prvInitialiseTaskLists+0x60>)
 800494c:	4413      	add	r3, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fcae 	bl	80032b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b37      	cmp	r3, #55	@ 0x37
 800495e:	d9ef      	bls.n	8004940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004960:	480d      	ldr	r0, [pc, #52]	@ (8004998 <prvInitialiseTaskLists+0x64>)
 8004962:	f7fe fca5 	bl	80032b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004966:	480d      	ldr	r0, [pc, #52]	@ (800499c <prvInitialiseTaskLists+0x68>)
 8004968:	f7fe fca2 	bl	80032b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800496c:	480c      	ldr	r0, [pc, #48]	@ (80049a0 <prvInitialiseTaskLists+0x6c>)
 800496e:	f7fe fc9f 	bl	80032b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004972:	480c      	ldr	r0, [pc, #48]	@ (80049a4 <prvInitialiseTaskLists+0x70>)
 8004974:	f7fe fc9c 	bl	80032b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004978:	480b      	ldr	r0, [pc, #44]	@ (80049a8 <prvInitialiseTaskLists+0x74>)
 800497a:	f7fe fc99 	bl	80032b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800497e:	4b0b      	ldr	r3, [pc, #44]	@ (80049ac <prvInitialiseTaskLists+0x78>)
 8004980:	4a05      	ldr	r2, [pc, #20]	@ (8004998 <prvInitialiseTaskLists+0x64>)
 8004982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004984:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <prvInitialiseTaskLists+0x7c>)
 8004986:	4a05      	ldr	r2, [pc, #20]	@ (800499c <prvInitialiseTaskLists+0x68>)
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	200008fc 	.word	0x200008fc
 8004998:	20000d5c 	.word	0x20000d5c
 800499c:	20000d70 	.word	0x20000d70
 80049a0:	20000d8c 	.word	0x20000d8c
 80049a4:	20000da0 	.word	0x20000da0
 80049a8:	20000db8 	.word	0x20000db8
 80049ac:	20000d84 	.word	0x20000d84
 80049b0:	20000d88 	.word	0x20000d88

080049b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ba:	e019      	b.n	80049f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049bc:	f000 fdec 	bl	8005598 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <prvCheckTasksWaitingTermination+0x50>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fcf9 	bl	80033c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004a08 <prvCheckTasksWaitingTermination+0x54>)
 80049da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <prvCheckTasksWaitingTermination+0x58>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	4a0a      	ldr	r2, [pc, #40]	@ (8004a0c <prvCheckTasksWaitingTermination+0x58>)
 80049e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049e6:	f000 fe09 	bl	80055fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f810 	bl	8004a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <prvCheckTasksWaitingTermination+0x58>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e1      	bne.n	80049bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000da0 	.word	0x20000da0
 8004a08:	20000dcc 	.word	0x20000dcc
 8004a0c:	20000db4 	.word	0x20000db4

08004a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3354      	adds	r3, #84	@ 0x54
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 f8f9 	bl	8005c14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d108      	bne.n	8004a3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ffa1 	bl	8005978 <vPortFree>
				vPortFree( pxTCB );
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 ff9e 	bl	8005978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a3c:	e019      	b.n	8004a72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d103      	bne.n	8004a50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 ff95 	bl	8005978 <vPortFree>
	}
 8004a4e:	e010      	b.n	8004a72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d00b      	beq.n	8004a72 <prvDeleteTCB+0x62>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60fb      	str	r3, [r7, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <prvDeleteTCB+0x5e>
	}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a82:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <prvResetNextTaskUnblockTime+0x38>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a94:	e008      	b.n	8004aa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a96:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <prvResetNextTaskUnblockTime+0x38>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <prvResetNextTaskUnblockTime+0x3c>)
 8004aa6:	6013      	str	r3, [r2, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20000d84 	.word	0x20000d84
 8004ab8:	20000dec 	.word	0x20000dec

08004abc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <xTaskGetSchedulerState+0x34>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aca:	2301      	movs	r3, #1
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	e008      	b.n	8004ae2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad0:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <xTaskGetSchedulerState+0x38>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e001      	b.n	8004ae2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ae2:	687b      	ldr	r3, [r7, #4]
	}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20000dd8 	.word	0x20000dd8
 8004af4:	20000df4 	.word	0x20000df4

08004af8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d058      	beq.n	8004bc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bcc <xTaskPriorityDisinherit+0xd4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d00b      	beq.n	8004b30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
}
 8004b2a:	bf00      	nop
 8004b2c:	bf00      	nop
 8004b2e:	e7fd      	b.n	8004b2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60bb      	str	r3, [r7, #8]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d02c      	beq.n	8004bc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d128      	bne.n	8004bc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fc26 	bl	80033c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <xTaskPriorityDisinherit+0xd8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d903      	bls.n	8004ba0 <xTaskPriorityDisinherit+0xa8>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd0 <xTaskPriorityDisinherit+0xd8>)
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4a09      	ldr	r2, [pc, #36]	@ (8004bd4 <xTaskPriorityDisinherit+0xdc>)
 8004bae:	441a      	add	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe fba7 	bl	800330a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bc0:	697b      	ldr	r3, [r7, #20]
	}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200008f8 	.word	0x200008f8
 8004bd0:	20000dd4 	.word	0x20000dd4
 8004bd4:	200008fc 	.word	0x200008fc

08004bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004be2:	4b21      	ldr	r3, [pc, #132]	@ (8004c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be8:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fbe8 	bl	80033c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bfa:	d10a      	bne.n	8004c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c02:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4819      	ldr	r0, [pc, #100]	@ (8004c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c0c:	f7fe fb7d 	bl	800330a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c10:	e026      	b.n	8004c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c1a:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d209      	bcs.n	8004c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c2a:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fe fb8b 	bl	8003352 <vListInsert>
}
 8004c3c:	e010      	b.n	8004c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fe fb81 	bl	8003352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c50:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d202      	bcs.n	8004c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c5a:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000dd0 	.word	0x20000dd0
 8004c6c:	200008f8 	.word	0x200008f8
 8004c70:	20000db8 	.word	0x20000db8
 8004c74:	20000d88 	.word	0x20000d88
 8004c78:	20000d84 	.word	0x20000d84
 8004c7c:	20000dec 	.word	0x20000dec

08004c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c8a:	f000 fb13 	bl	80052b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <xTimerCreateTimerTask+0x84>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d021      	beq.n	8004cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c9e:	1d3a      	adds	r2, r7, #4
 8004ca0:	f107 0108 	add.w	r1, r7, #8
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fae7 	bl	800327c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	9202      	str	r2, [sp, #8]
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	460a      	mov	r2, r1
 8004cc0:	4911      	ldr	r1, [pc, #68]	@ (8004d08 <xTimerCreateTimerTask+0x88>)
 8004cc2:	4812      	ldr	r0, [pc, #72]	@ (8004d0c <xTimerCreateTimerTask+0x8c>)
 8004cc4:	f7ff f8a2 	bl	8003e0c <xTaskCreateStatic>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a11      	ldr	r2, [pc, #68]	@ (8004d10 <xTimerCreateTimerTask+0x90>)
 8004ccc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cce:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <xTimerCreateTimerTask+0x90>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10b      	bne.n	8004cf8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cf8:	697b      	ldr	r3, [r7, #20]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000e28 	.word	0x20000e28
 8004d08:	08005dd8 	.word	0x08005dd8
 8004d0c:	08004e4d 	.word	0x08004e4d
 8004d10:	20000e2c 	.word	0x20000e2c

08004d14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	@ 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <xTimerGenericCommand+0x30>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	623b      	str	r3, [r7, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	e7fd      	b.n	8004d40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d44:	4b19      	ldr	r3, [pc, #100]	@ (8004dac <xTimerGenericCommand+0x98>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d02a      	beq.n	8004da2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b05      	cmp	r3, #5
 8004d5c:	dc18      	bgt.n	8004d90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d5e:	f7ff fead 	bl	8004abc <xTaskGetSchedulerState>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d109      	bne.n	8004d7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d68:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <xTimerGenericCommand+0x98>)
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	f107 0110 	add.w	r1, r7, #16
 8004d70:	2300      	movs	r3, #0
 8004d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d74:	f7fe fc5a 	bl	800362c <xQueueGenericSend>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d7a:	e012      	b.n	8004da2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <xTimerGenericCommand+0x98>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	f107 0110 	add.w	r1, r7, #16
 8004d84:	2300      	movs	r3, #0
 8004d86:	2200      	movs	r2, #0
 8004d88:	f7fe fc50 	bl	800362c <xQueueGenericSend>
 8004d8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d8e:	e008      	b.n	8004da2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <xTimerGenericCommand+0x98>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	f107 0110 	add.w	r1, r7, #16
 8004d98:	2300      	movs	r3, #0
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	f7fe fd48 	bl	8003830 <xQueueGenericSendFromISR>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3728      	adds	r7, #40	@ 0x28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000e28 	.word	0x20000e28

08004db0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dba:	4b23      	ldr	r3, [pc, #140]	@ (8004e48 <prvProcessExpiredTimer+0x98>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fafb 	bl	80033c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	18d1      	adds	r1, r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f000 f8d5 	bl	8004f98 <prvInsertTimerInActiveList>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004df4:	2300      	movs	r3, #0
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	6978      	ldr	r0, [r7, #20]
 8004e00:	f7ff ff88 	bl	8004d14 <xTimerGenericCommand>
 8004e04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d114      	bne.n	8004e36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	60fb      	str	r3, [r7, #12]
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	6978      	ldr	r0, [r7, #20]
 8004e3c:	4798      	blx	r3
}
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000e20 	.word	0x20000e20

08004e4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e54:	f107 0308 	add.w	r3, r7, #8
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f859 	bl	8004f10 <prvGetNextExpireTime>
 8004e5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4619      	mov	r1, r3
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f805 	bl	8004e74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e6a:	f000 f8d7 	bl	800501c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e6e:	bf00      	nop
 8004e70:	e7f0      	b.n	8004e54 <prvTimerTask+0x8>
	...

08004e74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e7e:	f7ff fa29 	bl	80042d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e82:	f107 0308 	add.w	r3, r7, #8
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f866 	bl	8004f58 <prvSampleTimeNow>
 8004e8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d130      	bne.n	8004ef6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <prvProcessTimerOrBlockTask+0x3c>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d806      	bhi.n	8004eb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ea2:	f7ff fa25 	bl	80042f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff81 	bl	8004db0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004eae:	e024      	b.n	8004efa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004eb6:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <prvProcessTimerOrBlockTask+0x90>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <prvProcessTimerOrBlockTask+0x50>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <prvProcessTimerOrBlockTask+0x52>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f08 <prvProcessTimerOrBlockTask+0x94>)
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f7fe ff65 	bl	8003da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004eda:	f7ff fa09 	bl	80042f0 <xTaskResumeAll>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <prvProcessTimerOrBlockTask+0x98>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
}
 8004ef4:	e001      	b.n	8004efa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ef6:	f7ff f9fb 	bl	80042f0 <xTaskResumeAll>
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000e24 	.word	0x20000e24
 8004f08:	20000e28 	.word	0x20000e28
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f18:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <prvGetNextExpireTime+0x44>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <prvGetNextExpireTime+0x16>
 8004f22:	2201      	movs	r2, #1
 8004f24:	e000      	b.n	8004f28 <prvGetNextExpireTime+0x18>
 8004f26:	2200      	movs	r2, #0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f34:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <prvGetNextExpireTime+0x44>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e001      	b.n	8004f44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f44:	68fb      	ldr	r3, [r7, #12]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000e20 	.word	0x20000e20

08004f58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f60:	f7ff fa64 	bl	800442c <xTaskGetTickCount>
 8004f64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f66:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <prvSampleTimeNow+0x3c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d205      	bcs.n	8004f7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f70:	f000 f93a 	bl	80051e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f82:	4a04      	ldr	r2, [pc, #16]	@ (8004f94 <prvSampleTimeNow+0x3c>)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000e30 	.word	0x20000e30

08004f98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d812      	bhi.n	8004fe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e01b      	b.n	800500a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fd2:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <prvInsertTimerInActiveList+0x7c>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7fe f9b8 	bl	8003352 <vListInsert>
 8004fe2:	e012      	b.n	800500a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d206      	bcs.n	8004ffa <prvInsertTimerInActiveList+0x62>
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d302      	bcc.n	8004ffa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e007      	b.n	800500a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ffa:	4b07      	ldr	r3, [pc, #28]	@ (8005018 <prvInsertTimerInActiveList+0x80>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe f9a4 	bl	8003352 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800500a:	697b      	ldr	r3, [r7, #20]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000e24 	.word	0x20000e24
 8005018:	20000e20 	.word	0x20000e20

0800501c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08e      	sub	sp, #56	@ 0x38
 8005020:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005022:	e0ce      	b.n	80051c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da19      	bge.n	800505e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	3304      	adds	r3, #4
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61fb      	str	r3, [r7, #28]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005054:	6850      	ldr	r0, [r2, #4]
 8005056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	4611      	mov	r1, r2
 800505c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f2c0 80ae 	blt.w	80051c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f9a4 	bl	80033c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800507c:	463b      	mov	r3, r7
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff6a 	bl	8004f58 <prvSampleTimeNow>
 8005084:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b09      	cmp	r3, #9
 800508a:	f200 8097 	bhi.w	80051bc <prvProcessReceivedCommands+0x1a0>
 800508e:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <prvProcessReceivedCommands+0x78>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050bd 	.word	0x080050bd
 80050a0:	08005133 	.word	0x08005133
 80050a4:	08005147 	.word	0x08005147
 80050a8:	08005193 	.word	0x08005193
 80050ac:	080050bd 	.word	0x080050bd
 80050b0:	080050bd 	.word	0x080050bd
 80050b4:	08005133 	.word	0x08005133
 80050b8:	08005147 	.word	0x08005147
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	18d1      	adds	r1, r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050dc:	f7ff ff5c 	bl	8004f98 <prvInsertTimerInActiveList>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d06c      	beq.n	80051c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d061      	beq.n	80051c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	441a      	add	r2, r3
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	2100      	movs	r1, #0
 800510c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800510e:	f7ff fe01 	bl	8004d14 <xTimerGenericCommand>
 8005112:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d152      	bne.n	80051c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	61bb      	str	r3, [r7, #24]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005144:	e03d      	b.n	80051c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	617b      	str	r3, [r7, #20]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	18d1      	adds	r1, r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800518c:	f7ff ff04 	bl	8004f98 <prvInsertTimerInActiveList>
					break;
 8005190:	e017      	b.n	80051c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80051a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a2:	f000 fbe9 	bl	8005978 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051a6:	e00c      	b.n	80051c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80051ba:	e002      	b.n	80051c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80051c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <prvProcessReceivedCommands+0x1c8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1d39      	adds	r1, r7, #4
 80051c8:	2200      	movs	r2, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fbce 	bl	800396c <xQueueReceive>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f47f af26 	bne.w	8005024 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3730      	adds	r7, #48	@ 0x30
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000e28 	.word	0x20000e28

080051e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ee:	e049      	b.n	8005284 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f0:	4b2e      	ldr	r3, [pc, #184]	@ (80052ac <prvSwitchTimerLists+0xc4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fa:	4b2c      	ldr	r3, [pc, #176]	@ (80052ac <prvSwitchTimerLists+0xc4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe f8db 	bl	80033c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02f      	beq.n	8005284 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	429a      	cmp	r2, r3
 8005234:	d90e      	bls.n	8005254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005242:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <prvSwitchTimerLists+0xc4>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3304      	adds	r3, #4
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7fe f880 	bl	8003352 <vListInsert>
 8005252:	e017      	b.n	8005284 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2300      	movs	r3, #0
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	2100      	movs	r1, #0
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff fd58 	bl	8004d14 <xTimerGenericCommand>
 8005264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	603b      	str	r3, [r7, #0]
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <prvSwitchTimerLists+0xc4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1b0      	bne.n	80051f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800528e:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <prvSwitchTimerLists+0xc4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <prvSwitchTimerLists+0xc8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <prvSwitchTimerLists+0xc4>)
 800529a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800529c:	4a04      	ldr	r2, [pc, #16]	@ (80052b0 <prvSwitchTimerLists+0xc8>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	6013      	str	r3, [r2, #0]
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000e20 	.word	0x20000e20
 80052b0:	20000e24 	.word	0x20000e24

080052b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052ba:	f000 f96d 	bl	8005598 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d120      	bne.n	8005308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052c6:	4814      	ldr	r0, [pc, #80]	@ (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052c8:	f7fd fff2 	bl	80032b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052cc:	4813      	ldr	r0, [pc, #76]	@ (800531c <prvCheckForValidListAndQueue+0x68>)
 80052ce:	f7fd ffef 	bl	80032b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052d2:	4b13      	ldr	r3, [pc, #76]	@ (8005320 <prvCheckForValidListAndQueue+0x6c>)
 80052d4:	4a10      	ldr	r2, [pc, #64]	@ (8005318 <prvCheckForValidListAndQueue+0x64>)
 80052d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <prvCheckForValidListAndQueue+0x70>)
 80052da:	4a10      	ldr	r2, [pc, #64]	@ (800531c <prvCheckForValidListAndQueue+0x68>)
 80052dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052de:	2300      	movs	r3, #0
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <prvCheckForValidListAndQueue+0x74>)
 80052e4:	4a11      	ldr	r2, [pc, #68]	@ (800532c <prvCheckForValidListAndQueue+0x78>)
 80052e6:	2110      	movs	r1, #16
 80052e8:	200a      	movs	r0, #10
 80052ea:	f7fe f8ff 	bl	80034ec <xQueueGenericCreateStatic>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a08      	ldr	r2, [pc, #32]	@ (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052f4:	4b07      	ldr	r3, [pc, #28]	@ (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052fc:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <prvCheckForValidListAndQueue+0x60>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	490b      	ldr	r1, [pc, #44]	@ (8005330 <prvCheckForValidListAndQueue+0x7c>)
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fd24 	bl	8003d50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005308:	f000 f978 	bl	80055fc <vPortExitCritical>
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000e28 	.word	0x20000e28
 8005318:	20000df8 	.word	0x20000df8
 800531c:	20000e0c 	.word	0x20000e0c
 8005320:	20000e20 	.word	0x20000e20
 8005324:	20000e24 	.word	0x20000e24
 8005328:	20000ed4 	.word	0x20000ed4
 800532c:	20000e34 	.word	0x20000e34
 8005330:	08005de0 	.word	0x08005de0

08005334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b04      	subs	r3, #4
 8005344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800534c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3b04      	subs	r3, #4
 8005352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b04      	subs	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005364:	4a0c      	ldr	r2, [pc, #48]	@ (8005398 <pxPortInitialiseStack+0x64>)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b14      	subs	r3, #20
 800536e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3b04      	subs	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f06f 0202 	mvn.w	r2, #2
 8005382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b20      	subs	r3, #32
 8005388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800538a:	68fb      	ldr	r3, [r7, #12]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	0800539d 	.word	0x0800539d

0800539c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053a6:	4b13      	ldr	r3, [pc, #76]	@ (80053f4 <prvTaskExitError+0x58>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ae:	d00b      	beq.n	80053c8 <prvTaskExitError+0x2c>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <prvTaskExitError+0x28>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60bb      	str	r3, [r7, #8]
}
 80053da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053dc:	bf00      	nop
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0fc      	beq.n	80053de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	2000000c 	.word	0x2000000c
	...

08005400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005400:	4b07      	ldr	r3, [pc, #28]	@ (8005420 <pxCurrentTCBConst2>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	f380 8809 	msr	PSP, r0
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	4770      	bx	lr
 800541c:	f3af 8000 	nop.w

08005420 <pxCurrentTCBConst2>:
 8005420:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop

08005428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005428:	4808      	ldr	r0, [pc, #32]	@ (800544c <prvPortStartFirstTask+0x24>)
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	f380 8808 	msr	MSP, r0
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8814 	msr	CONTROL, r0
 800543a:	b662      	cpsie	i
 800543c:	b661      	cpsie	f
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	df00      	svc	0
 8005448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800544a:	bf00      	nop
 800544c:	e000ed08 	.word	0xe000ed08

08005450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005456:	4b47      	ldr	r3, [pc, #284]	@ (8005574 <xPortStartScheduler+0x124>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a47      	ldr	r2, [pc, #284]	@ (8005578 <xPortStartScheduler+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10b      	bne.n	8005478 <xPortStartScheduler+0x28>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005478:	4b3e      	ldr	r3, [pc, #248]	@ (8005574 <xPortStartScheduler+0x124>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3f      	ldr	r2, [pc, #252]	@ (800557c <xPortStartScheduler+0x12c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d10b      	bne.n	800549a <xPortStartScheduler+0x4a>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	613b      	str	r3, [r7, #16]
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	e7fd      	b.n	8005496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800549a:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <xPortStartScheduler+0x130>)
 800549c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	22ff      	movs	r2, #255	@ 0xff
 80054aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <xPortStartScheduler+0x134>)
 80054c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054c2:	4b31      	ldr	r3, [pc, #196]	@ (8005588 <xPortStartScheduler+0x138>)
 80054c4:	2207      	movs	r2, #7
 80054c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054c8:	e009      	b.n	80054de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80054ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005588 <xPortStartScheduler+0x138>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005588 <xPortStartScheduler+0x138>)
 80054d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b80      	cmp	r3, #128	@ 0x80
 80054e8:	d0ef      	beq.n	80054ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054ea:	4b27      	ldr	r3, [pc, #156]	@ (8005588 <xPortStartScheduler+0x138>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1c3 0307 	rsb	r3, r3, #7
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d00b      	beq.n	800550e <xPortStartScheduler+0xbe>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60bb      	str	r3, [r7, #8]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800550e:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <xPortStartScheduler+0x138>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <xPortStartScheduler+0x138>)
 8005516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005518:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <xPortStartScheduler+0x138>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005520:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <xPortStartScheduler+0x138>)
 8005522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800552c:	4b17      	ldr	r3, [pc, #92]	@ (800558c <xPortStartScheduler+0x13c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a16      	ldr	r2, [pc, #88]	@ (800558c <xPortStartScheduler+0x13c>)
 8005532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005538:	4b14      	ldr	r3, [pc, #80]	@ (800558c <xPortStartScheduler+0x13c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a13      	ldr	r2, [pc, #76]	@ (800558c <xPortStartScheduler+0x13c>)
 800553e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005544:	f000 f8da 	bl	80056fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005548:	4b11      	ldr	r3, [pc, #68]	@ (8005590 <xPortStartScheduler+0x140>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800554e:	f000 f8f9 	bl	8005744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005552:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <xPortStartScheduler+0x144>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a0f      	ldr	r2, [pc, #60]	@ (8005594 <xPortStartScheduler+0x144>)
 8005558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800555c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800555e:	f7ff ff63 	bl	8005428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005562:	f7ff f82d 	bl	80045c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005566:	f7ff ff19 	bl	800539c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	e000ed00 	.word	0xe000ed00
 8005578:	410fc271 	.word	0x410fc271
 800557c:	410fc270 	.word	0x410fc270
 8005580:	e000e400 	.word	0xe000e400
 8005584:	20000f24 	.word	0x20000f24
 8005588:	20000f28 	.word	0x20000f28
 800558c:	e000ed20 	.word	0xe000ed20
 8005590:	2000000c 	.word	0x2000000c
 8005594:	e000ef34 	.word	0xe000ef34

08005598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055b2:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <vPortEnterCritical+0x5c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	4a0e      	ldr	r2, [pc, #56]	@ (80055f4 <vPortEnterCritical+0x5c>)
 80055ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055bc:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <vPortEnterCritical+0x5c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d110      	bne.n	80055e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055c4:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <vPortEnterCritical+0x60>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	603b      	str	r3, [r7, #0]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <vPortEnterCritical+0x4a>
	}
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000000c 	.word	0x2000000c
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005602:	4b12      	ldr	r3, [pc, #72]	@ (800564c <vPortExitCritical+0x50>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <vPortExitCritical+0x26>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	607b      	str	r3, [r7, #4]
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	e7fd      	b.n	800561e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005622:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <vPortExitCritical+0x50>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3b01      	subs	r3, #1
 8005628:	4a08      	ldr	r2, [pc, #32]	@ (800564c <vPortExitCritical+0x50>)
 800562a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800562c:	4b07      	ldr	r3, [pc, #28]	@ (800564c <vPortExitCritical+0x50>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <vPortExitCritical+0x44>
 8005634:	2300      	movs	r3, #0
 8005636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f383 8811 	msr	BASEPRI, r3
}
 800563e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	2000000c 	.word	0x2000000c

08005650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005650:	f3ef 8009 	mrs	r0, PSP
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4b15      	ldr	r3, [pc, #84]	@ (80056b0 <pxCurrentTCBConst>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f01e 0f10 	tst.w	lr, #16
 8005660:	bf08      	it	eq
 8005662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	6010      	str	r0, [r2, #0]
 800566c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005674:	f380 8811 	msr	BASEPRI, r0
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f7fe ff9e 	bl	80045c0 <vTaskSwitchContext>
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	f380 8811 	msr	BASEPRI, r0
 800568c:	bc09      	pop	{r0, r3}
 800568e:	6819      	ldr	r1, [r3, #0]
 8005690:	6808      	ldr	r0, [r1, #0]
 8005692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005696:	f01e 0f10 	tst.w	lr, #16
 800569a:	bf08      	it	eq
 800569c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056a0:	f380 8809 	msr	PSP, r0
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst>:
 80056b0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056d2:	f7fe febb 	bl	800444c <xTaskIncrementTick>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056dc:	4b06      	ldr	r3, [pc, #24]	@ (80056f8 <xPortSysTickHandler+0x40>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	2300      	movs	r3, #0
 80056e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f383 8811 	msr	BASEPRI, r3
}
 80056ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <vPortSetupTimerInterrupt+0x34>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005706:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <vPortSetupTimerInterrupt+0x38>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800570c:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <vPortSetupTimerInterrupt+0x3c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0a      	ldr	r2, [pc, #40]	@ (800573c <vPortSetupTimerInterrupt+0x40>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	4a09      	ldr	r2, [pc, #36]	@ (8005740 <vPortSetupTimerInterrupt+0x44>)
 800571a:	3b01      	subs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800571e:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <vPortSetupTimerInterrupt+0x34>)
 8005720:	2207      	movs	r2, #7
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000e010 	.word	0xe000e010
 8005734:	e000e018 	.word	0xe000e018
 8005738:	20000000 	.word	0x20000000
 800573c:	10624dd3 	.word	0x10624dd3
 8005740:	e000e014 	.word	0xe000e014

08005744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005754 <vPortEnableVFP+0x10>
 8005748:	6801      	ldr	r1, [r0, #0]
 800574a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800574e:	6001      	str	r1, [r0, #0]
 8005750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005752:	bf00      	nop
 8005754:	e000ed88 	.word	0xe000ed88

08005758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800575e:	f3ef 8305 	mrs	r3, IPSR
 8005762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d915      	bls.n	8005796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <vPortValidateInterruptPriority+0x74>)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005774:	4b16      	ldr	r3, [pc, #88]	@ (80057d0 <vPortValidateInterruptPriority+0x78>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	7afa      	ldrb	r2, [r7, #11]
 800577a:	429a      	cmp	r2, r3
 800577c:	d20b      	bcs.n	8005796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005796:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <vPortValidateInterruptPriority+0x7c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800579e:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <vPortValidateInterruptPriority+0x80>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d90b      	bls.n	80057be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	603b      	str	r3, [r7, #0]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <vPortValidateInterruptPriority+0x62>
	}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	e000e3f0 	.word	0xe000e3f0
 80057d0:	20000f24 	.word	0x20000f24
 80057d4:	e000ed0c 	.word	0xe000ed0c
 80057d8:	20000f28 	.word	0x20000f28

080057dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057e8:	f7fe fd74 	bl	80042d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005960 <pvPortMalloc+0x184>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057f4:	f000 f924 	bl	8005a40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005964 <pvPortMalloc+0x188>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 8095 	bne.w	8005930 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01e      	beq.n	800584a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800580c:	2208      	movs	r2, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d015      	beq.n	800584a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	3308      	adds	r3, #8
 8005826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <pvPortMalloc+0x6e>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	617b      	str	r3, [r7, #20]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d06f      	beq.n	8005930 <pvPortMalloc+0x154>
 8005850:	4b45      	ldr	r3, [pc, #276]	@ (8005968 <pvPortMalloc+0x18c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d86a      	bhi.n	8005930 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800585a:	4b44      	ldr	r3, [pc, #272]	@ (800596c <pvPortMalloc+0x190>)
 800585c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800585e:	4b43      	ldr	r3, [pc, #268]	@ (800596c <pvPortMalloc+0x190>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005864:	e004      	b.n	8005870 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d903      	bls.n	8005882 <pvPortMalloc+0xa6>
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f1      	bne.n	8005866 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005882:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <pvPortMalloc+0x184>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005888:	429a      	cmp	r2, r3
 800588a:	d051      	beq.n	8005930 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	4413      	add	r3, r2
 8005894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1ad2      	subs	r2, r2, r3
 80058a6:	2308      	movs	r3, #8
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d920      	bls.n	80058f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4413      	add	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <pvPortMalloc+0xfc>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	1ad2      	subs	r2, r2, r3
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058ea:	69b8      	ldr	r0, [r7, #24]
 80058ec:	f000 f90a 	bl	8005b04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <pvPortMalloc+0x18c>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005968 <pvPortMalloc+0x18c>)
 80058fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <pvPortMalloc+0x18c>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <pvPortMalloc+0x194>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d203      	bcs.n	8005912 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800590a:	4b17      	ldr	r3, [pc, #92]	@ (8005968 <pvPortMalloc+0x18c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <pvPortMalloc+0x194>)
 8005910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <pvPortMalloc+0x188>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	431a      	orrs	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005926:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <pvPortMalloc+0x198>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	4a11      	ldr	r2, [pc, #68]	@ (8005974 <pvPortMalloc+0x198>)
 800592e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005930:	f7fe fcde 	bl	80042f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <pvPortMalloc+0x17a>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60fb      	str	r3, [r7, #12]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <pvPortMalloc+0x176>
	return pvReturn;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3728      	adds	r7, #40	@ 0x28
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20004b34 	.word	0x20004b34
 8005964:	20004b48 	.word	0x20004b48
 8005968:	20004b38 	.word	0x20004b38
 800596c:	20004b2c 	.word	0x20004b2c
 8005970:	20004b3c 	.word	0x20004b3c
 8005974:	20004b40 	.word	0x20004b40

08005978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d04f      	beq.n	8005a2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800598a:	2308      	movs	r3, #8
 800598c:	425b      	negs	r3, r3
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4b25      	ldr	r3, [pc, #148]	@ (8005a34 <vPortFree+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <vPortFree+0x46>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <vPortFree+0x66>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	60bb      	str	r3, [r7, #8]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4b14      	ldr	r3, [pc, #80]	@ (8005a34 <vPortFree+0xbc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01e      	beq.n	8005a2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11a      	bne.n	8005a2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a34 <vPortFree+0xbc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a04:	f7fe fc66 	bl	80042d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <vPortFree+0xc0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4413      	add	r3, r2
 8005a12:	4a09      	ldr	r2, [pc, #36]	@ (8005a38 <vPortFree+0xc0>)
 8005a14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a16:	6938      	ldr	r0, [r7, #16]
 8005a18:	f000 f874 	bl	8005b04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a1c:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <vPortFree+0xc4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	4a06      	ldr	r2, [pc, #24]	@ (8005a3c <vPortFree+0xc4>)
 8005a24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a26:	f7fe fc63 	bl	80042f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20004b48 	.word	0x20004b48
 8005a38:	20004b38 	.word	0x20004b38
 8005a3c:	20004b44 	.word	0x20004b44

08005a40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a4c:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <prvHeapInit+0xac>)
 8005a4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00c      	beq.n	8005a74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3307      	adds	r3, #7
 8005a5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005aec <prvHeapInit+0xac>)
 8005a70:	4413      	add	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a78:	4a1d      	ldr	r2, [pc, #116]	@ (8005af0 <prvHeapInit+0xb0>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005af0 <prvHeapInit+0xb0>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0307 	bic.w	r3, r3, #7
 8005a9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4a15      	ldr	r2, [pc, #84]	@ (8005af4 <prvHeapInit+0xb4>)
 8005aa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <prvHeapInit+0xb4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aaa:	4b12      	ldr	r3, [pc, #72]	@ (8005af4 <prvHeapInit+0xb4>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8005af4 <prvHeapInit+0xb4>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4a0a      	ldr	r2, [pc, #40]	@ (8005af8 <prvHeapInit+0xb8>)
 8005ace:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4a09      	ldr	r2, [pc, #36]	@ (8005afc <prvHeapInit+0xbc>)
 8005ad6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ad8:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <prvHeapInit+0xc0>)
 8005ada:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ade:	601a      	str	r2, [r3, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000f2c 	.word	0x20000f2c
 8005af0:	20004b2c 	.word	0x20004b2c
 8005af4:	20004b34 	.word	0x20004b34
 8005af8:	20004b3c 	.word	0x20004b3c
 8005afc:	20004b38 	.word	0x20004b38
 8005b00:	20004b48 	.word	0x20004b48

08005b04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b0c:	4b28      	ldr	r3, [pc, #160]	@ (8005bb0 <prvInsertBlockIntoFreeList+0xac>)
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e002      	b.n	8005b18 <prvInsertBlockIntoFreeList+0x14>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d8f7      	bhi.n	8005b12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d108      	bne.n	8005b46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	441a      	add	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d118      	bne.n	8005b8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b15      	ldr	r3, [pc, #84]	@ (8005bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d00d      	beq.n	8005b82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	441a      	add	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e008      	b.n	8005b94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b82:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e003      	b.n	8005b94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d002      	beq.n	8005ba2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba2:	bf00      	nop
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20004b2c 	.word	0x20004b2c
 8005bb4:	20004b34 	.word	0x20004b34

08005bb8 <memset>:
 8005bb8:	4402      	add	r2, r0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4d0d      	ldr	r5, [pc, #52]	@ (8005c00 <__libc_init_array+0x38>)
 8005bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8005c04 <__libc_init_array+0x3c>)
 8005bce:	1b64      	subs	r4, r4, r5
 8005bd0:	10a4      	asrs	r4, r4, #2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8005c08 <__libc_init_array+0x40>)
 8005bda:	4c0c      	ldr	r4, [pc, #48]	@ (8005c0c <__libc_init_array+0x44>)
 8005bdc:	f000 f8dc 	bl	8005d98 <_init>
 8005be0:	1b64      	subs	r4, r4, r5
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	2600      	movs	r6, #0
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08005e74 	.word	0x08005e74
 8005c04:	08005e74 	.word	0x08005e74
 8005c08:	08005e74 	.word	0x08005e74
 8005c0c:	08005e78 	.word	0x08005e78

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <_reclaim_reent>:
 8005c14:	4b2d      	ldr	r3, [pc, #180]	@ (8005ccc <_reclaim_reent+0xb8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4283      	cmp	r3, r0
 8005c1a:	b570      	push	{r4, r5, r6, lr}
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	d053      	beq.n	8005cc8 <_reclaim_reent+0xb4>
 8005c20:	69c3      	ldr	r3, [r0, #28]
 8005c22:	b31b      	cbz	r3, 8005c6c <_reclaim_reent+0x58>
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	b163      	cbz	r3, 8005c42 <_reclaim_reent+0x2e>
 8005c28:	2500      	movs	r5, #0
 8005c2a:	69e3      	ldr	r3, [r4, #28]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	5959      	ldr	r1, [r3, r5]
 8005c30:	b9b1      	cbnz	r1, 8005c60 <_reclaim_reent+0x4c>
 8005c32:	3504      	adds	r5, #4
 8005c34:	2d80      	cmp	r5, #128	@ 0x80
 8005c36:	d1f8      	bne.n	8005c2a <_reclaim_reent+0x16>
 8005c38:	69e3      	ldr	r3, [r4, #28]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	68d9      	ldr	r1, [r3, #12]
 8005c3e:	f000 f855 	bl	8005cec <_free_r>
 8005c42:	69e3      	ldr	r3, [r4, #28]
 8005c44:	6819      	ldr	r1, [r3, #0]
 8005c46:	b111      	cbz	r1, 8005c4e <_reclaim_reent+0x3a>
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 f84f 	bl	8005cec <_free_r>
 8005c4e:	69e3      	ldr	r3, [r4, #28]
 8005c50:	689d      	ldr	r5, [r3, #8]
 8005c52:	b15d      	cbz	r5, 8005c6c <_reclaim_reent+0x58>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4620      	mov	r0, r4
 8005c58:	682d      	ldr	r5, [r5, #0]
 8005c5a:	f000 f847 	bl	8005cec <_free_r>
 8005c5e:	e7f8      	b.n	8005c52 <_reclaim_reent+0x3e>
 8005c60:	680e      	ldr	r6, [r1, #0]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 f842 	bl	8005cec <_free_r>
 8005c68:	4631      	mov	r1, r6
 8005c6a:	e7e1      	b.n	8005c30 <_reclaim_reent+0x1c>
 8005c6c:	6961      	ldr	r1, [r4, #20]
 8005c6e:	b111      	cbz	r1, 8005c76 <_reclaim_reent+0x62>
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 f83b 	bl	8005cec <_free_r>
 8005c76:	69e1      	ldr	r1, [r4, #28]
 8005c78:	b111      	cbz	r1, 8005c80 <_reclaim_reent+0x6c>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f836 	bl	8005cec <_free_r>
 8005c80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005c82:	b111      	cbz	r1, 8005c8a <_reclaim_reent+0x76>
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 f831 	bl	8005cec <_free_r>
 8005c8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c8c:	b111      	cbz	r1, 8005c94 <_reclaim_reent+0x80>
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 f82c 	bl	8005cec <_free_r>
 8005c94:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005c96:	b111      	cbz	r1, 8005c9e <_reclaim_reent+0x8a>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f827 	bl	8005cec <_free_r>
 8005c9e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ca0:	b111      	cbz	r1, 8005ca8 <_reclaim_reent+0x94>
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 f822 	bl	8005cec <_free_r>
 8005ca8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005caa:	b111      	cbz	r1, 8005cb2 <_reclaim_reent+0x9e>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f81d 	bl	8005cec <_free_r>
 8005cb2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005cb4:	b111      	cbz	r1, 8005cbc <_reclaim_reent+0xa8>
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 f818 	bl	8005cec <_free_r>
 8005cbc:	6a23      	ldr	r3, [r4, #32]
 8005cbe:	b11b      	cbz	r3, 8005cc8 <_reclaim_reent+0xb4>
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cc6:	4718      	bx	r3
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000010 	.word	0x20000010

08005cd0 <memcpy>:
 8005cd0:	440a      	add	r2, r1
 8005cd2:	4291      	cmp	r1, r2
 8005cd4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005cd8:	d100      	bne.n	8005cdc <memcpy+0xc>
 8005cda:	4770      	bx	lr
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ce6:	4291      	cmp	r1, r2
 8005ce8:	d1f9      	bne.n	8005cde <memcpy+0xe>
 8005cea:	bd10      	pop	{r4, pc}

08005cec <_free_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	d041      	beq.n	8005d78 <_free_r+0x8c>
 8005cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf8:	1f0c      	subs	r4, r1, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfb8      	it	lt
 8005cfe:	18e4      	addlt	r4, r4, r3
 8005d00:	f000 f83e 	bl	8005d80 <__malloc_lock>
 8005d04:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <_free_r+0x90>)
 8005d06:	6813      	ldr	r3, [r2, #0]
 8005d08:	b933      	cbnz	r3, 8005d18 <_free_r+0x2c>
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	6014      	str	r4, [r2, #0]
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d14:	f000 b83a 	b.w	8005d8c <__malloc_unlock>
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d908      	bls.n	8005d2e <_free_r+0x42>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf01      	itttt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	1809      	addeq	r1, r1, r0
 8005d2a:	6021      	streq	r1, [r4, #0]
 8005d2c:	e7ed      	b.n	8005d0a <_free_r+0x1e>
 8005d2e:	461a      	mov	r2, r3
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b10b      	cbz	r3, 8005d38 <_free_r+0x4c>
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d9fa      	bls.n	8005d2e <_free_r+0x42>
 8005d38:	6811      	ldr	r1, [r2, #0]
 8005d3a:	1850      	adds	r0, r2, r1
 8005d3c:	42a0      	cmp	r0, r4
 8005d3e:	d10b      	bne.n	8005d58 <_free_r+0x6c>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	4401      	add	r1, r0
 8005d44:	1850      	adds	r0, r2, r1
 8005d46:	4283      	cmp	r3, r0
 8005d48:	6011      	str	r1, [r2, #0]
 8005d4a:	d1e0      	bne.n	8005d0e <_free_r+0x22>
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6053      	str	r3, [r2, #4]
 8005d52:	4408      	add	r0, r1
 8005d54:	6010      	str	r0, [r2, #0]
 8005d56:	e7da      	b.n	8005d0e <_free_r+0x22>
 8005d58:	d902      	bls.n	8005d60 <_free_r+0x74>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	e7d6      	b.n	8005d0e <_free_r+0x22>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	1821      	adds	r1, r4, r0
 8005d64:	428b      	cmp	r3, r1
 8005d66:	bf04      	itt	eq
 8005d68:	6819      	ldreq	r1, [r3, #0]
 8005d6a:	685b      	ldreq	r3, [r3, #4]
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	bf04      	itt	eq
 8005d70:	1809      	addeq	r1, r1, r0
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	6054      	str	r4, [r2, #4]
 8005d76:	e7ca      	b.n	8005d0e <_free_r+0x22>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20004c88 	.word	0x20004c88

08005d80 <__malloc_lock>:
 8005d80:	4801      	ldr	r0, [pc, #4]	@ (8005d88 <__malloc_lock+0x8>)
 8005d82:	f7ff bf45 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 8005d86:	bf00      	nop
 8005d88:	20004c84 	.word	0x20004c84

08005d8c <__malloc_unlock>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	@ (8005d94 <__malloc_unlock+0x8>)
 8005d8e:	f7ff bf40 	b.w	8005c12 <__retarget_lock_release_recursive>
 8005d92:	bf00      	nop
 8005d94:	20004c84 	.word	0x20004c84

08005d98 <_init>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	bf00      	nop
 8005d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9e:	bc08      	pop	{r3}
 8005da0:	469e      	mov	lr, r3
 8005da2:	4770      	bx	lr

08005da4 <_fini>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr
