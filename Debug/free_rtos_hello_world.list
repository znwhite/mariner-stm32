
free_rtos_hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c7c  08005c7c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c84  08005c84  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c88  08005c88  00006c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005c8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  20000060  08005cec  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  08005cec  00007c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153e0  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  0001c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfd  00000000  00000000  000206a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f30  00000000  00000000  000214a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013aa1  00000000  00000000  000243d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a2e  00000000  00000000  00037e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001108a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  001108e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001157f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bd8 	.word	0x08005bd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005bd8 	.word	0x08005bd8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fb4a 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f826 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f90a 	bl	8000760 <MX_GPIO_Init>
  MX_TIM3_Init();
 800054c:	f000 f890 	bl	8000670 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000550:	f002 fca2 	bl	8002e98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000554:	4a09      	ldr	r2, [pc, #36]	@ (800057c <main+0x40>)
 8000556:	2100      	movs	r1, #0
 8000558:	4809      	ldr	r0, [pc, #36]	@ (8000580 <main+0x44>)
 800055a:	f002 fce7 	bl	8002f2c <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a08      	ldr	r2, [pc, #32]	@ (8000584 <main+0x48>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of motorTest01 */
  motorTest01Handle = osThreadNew(StartMotorTest01, NULL, &motorTest01_attributes);
 8000564:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <main+0x4c>)
 8000566:	2100      	movs	r1, #0
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x50>)
 800056a:	f002 fcdf 	bl	8002f2c <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <main+0x54>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f002 fcb4 	bl	8002ee0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x3c>
 800057c:	08005c1c 	.word	0x08005c1c
 8000580:	0800085d 	.word	0x0800085d
 8000584:	200000c4 	.word	0x200000c4
 8000588:	08005c40 	.word	0x08005c40
 800058c:	0800087d 	.word	0x0800087d
 8000590:	200000c8 	.word	0x200000c8

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	@ 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fa28 	bl	80059f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <SystemClock_Config+0xd4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a29      	ldr	r2, [pc, #164]	@ (8000668 <SystemClock_Config+0xd4>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <SystemClock_Config+0xd4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <SystemClock_Config+0xd8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <SystemClock_Config+0xd8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000610:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f92c 	bl	8001880 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062e:	f000 f967 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2102      	movs	r1, #2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fdae 	bl	80011b0 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065a:	f000 f951 	bl	8000900 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08e      	sub	sp, #56	@ 0x38
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
 800069c:	615a      	str	r2, [r3, #20]
 800069e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006a2:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <MX_TIM3_Init+0xec>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006a8:	2253      	movs	r2, #83	@ 0x53
 80006aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80006b2:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006b4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006c6:	4824      	ldr	r0, [pc, #144]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006c8:	f001 fb78 	bl	8001dbc <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006d2:	f000 f915 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006e0:	4619      	mov	r1, r3
 80006e2:	481d      	ldr	r0, [pc, #116]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006e4:	f001 fefe 	bl	80024e4 <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006ee:	f000 f907 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006f2:	4819      	ldr	r0, [pc, #100]	@ (8000758 <MX_TIM3_Init+0xe8>)
 80006f4:	f001 fc22 	bl	8001f3c <HAL_TIM_PWM_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006fe:	f000 f8ff 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	4619      	mov	r1, r3
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <MX_TIM3_Init+0xe8>)
 8000712:	f002 faed 	bl	8002cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800071c:	f000 f8f0 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	@ 0x60
 8000722:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000724:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2208      	movs	r2, #8
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	@ (8000758 <MX_TIM3_Init+0xe8>)
 800073a:	f001 fe11 	bl	8002360 <HAL_TIM_PWM_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000744:	f000 f8dc 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <MX_TIM3_Init+0xe8>)
 800074a:	f000 f92d 	bl	80009a8 <HAL_TIM_MspPostInit>

}
 800074e:	bf00      	nop
 8000750:	3738      	adds	r7, #56	@ 0x38
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000007c 	.word	0x2000007c
 800075c:	40000400 	.word	0x40000400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a2d      	ldr	r2, [pc, #180]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	481a      	ldr	r0, [pc, #104]	@ (8000854 <MX_GPIO_Init+0xf4>)
 80007ec:	f000 fcac 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <MX_GPIO_Init+0xf8>)
 8000808:	f000 fb0a 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080c:	230c      	movs	r3, #12
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081c:	2307      	movs	r3, #7
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000828:	f000 fafa 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000844:	f000 faec 	bl	8000e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	@ 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000864:	2120      	movs	r1, #32
 8000866:	4804      	ldr	r0, [pc, #16]	@ (8000878 <StartBlink01+0x1c>)
 8000868:	f000 fc87 	bl	800117a <HAL_GPIO_TogglePin>
    osDelay(500);
 800086c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000870:	f002 fbee 	bl	8003050 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000874:	bf00      	nop
 8000876:	e7f5      	b.n	8000864 <StartBlink01+0x8>
 8000878:	40020000 	.word	0x40020000

0800087c <StartMotorTest01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTest01 */
void StartMotorTest01(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTest01 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000884:	2108      	movs	r1, #8
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <StartMotorTest01+0x5c>)
 8000888:	f001 fbb2 	bl	8001ff0 <HAL_TIM_PWM_Start>

  // Thruster-specific arming - hold minimum throttle longer
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Neutral position
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <StartMotorTest01+0x5c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000894:	63da      	str	r2, [r3, #60]	@ 0x3c
  osDelay(3000);
 8000896:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800089a:	f002 fbd9 	bl	8003050 <osDelay>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000); // Minimum
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <StartMotorTest01+0x5c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  osDelay(5000); // Hold minimum longer for thruster ESCs
 80008a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008ac:	f002 fbd0 	bl	8003050 <osDelay>

  for(;;)
  {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1100); // Very slow forward
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <StartMotorTest01+0x5c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f240 424c 	movw	r2, #1100	@ 0x44c
 80008b8:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(3000);
 80008ba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80008be:	f002 fbc7 	bl	8003050 <osDelay>

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Stop (neutral)
 80008c2:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <StartMotorTest01+0x5c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(10000);
 80008cc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008d0:	f002 fbbe 	bl	8003050 <osDelay>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1100); // Very slow forward
 80008d4:	bf00      	nop
 80008d6:	e7eb      	b.n	80008b0 <StartMotorTest01+0x34>
 80008d8:	2000007c 	.word	0x2000007c

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008ee:	f000 f995 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40001000 	.word	0x40001000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	@ (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000920:	6453      	str	r3, [r2, #68]	@ 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fa3b 	bl	8000dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10d      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	4a09      	ldr	r2, [pc, #36]	@ (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6413      	str	r3, [r2, #64]	@ 0x40
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40000400 	.word	0x40000400
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <HAL_TIM_MspPostInit+0x68>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d11d      	bne.n	8000a06 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_TIM_MspPostInit+0x6c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <HAL_TIM_MspPostInit+0x6c>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_TIM_MspPostInit+0x6c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e6:	2301      	movs	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <HAL_TIM_MspPostInit+0x70>)
 8000a02:	f000 fa0d 	bl	8000e20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40000400 	.word	0x40000400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	@ 0x38
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b33      	ldr	r3, [pc, #204]	@ (8000b00 <HAL_InitTick+0xe4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <HAL_InitTick+0xe4>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3c:	4b30      	ldr	r3, [pc, #192]	@ (8000b00 <HAL_InitTick+0xe4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a48:	f107 0210 	add.w	r2, r7, #16
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fcb2 	bl	80013bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a62:	f000 fc97 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8000a66:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a68:	e004      	b.n	8000a74 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a6a:	f000 fc93 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a76:	4a23      	ldr	r2, [pc, #140]	@ (8000b04 <HAL_InitTick+0xe8>)
 8000a78:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7c:	0c9b      	lsrs	r3, r3, #18
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a82:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a84:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <HAL_InitTick+0xf0>)
 8000a86:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a90:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_InitTick+0xec>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000aa8:	4817      	ldr	r0, [pc, #92]	@ (8000b08 <HAL_InitTick+0xec>)
 8000aaa:	f001 f987 	bl	8001dbc <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d11b      	bne.n	8000af4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000abc:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <HAL_InitTick+0xec>)
 8000abe:	f001 f9cd 	bl	8001e5c <HAL_TIM_Base_Start_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d111      	bne.n	8000af4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad0:	2036      	movs	r0, #54	@ 0x36
 8000ad2:	f000 f997 	bl	8000e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d808      	bhi.n	8000aee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2036      	movs	r0, #54	@ 0x36
 8000ae2:	f000 f973 	bl	8000dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <HAL_InitTick+0xf4>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e002      	b.n	8000af4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3738      	adds	r7, #56	@ 0x38
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	431bde83 	.word	0x431bde83
 8000b08:	200000cc 	.word	0x200000cc
 8000b0c:	40001000 	.word	0x40001000
 8000b10:	20000004 	.word	0x20000004

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <TIM6_DAC_IRQHandler+0x10>)
 8000b52:	f001 fb15 	bl	8002180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000cc 	.word	0x200000cc

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b88:	f7ff ffea 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f004 ff29 	bl	8005a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fcc1 	bl	800053c <main>
  bx  lr    
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bc8:	08005c8c 	.word	0x08005c8c
  ldr r2, =_sbss
 8000bcc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bd0:	20004c40 	.word	0x20004c40

08000bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <HAL_Init+0x40>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_Init+0x40>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_Init+0x40>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d8 	bl	8000db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff ff08 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fe7e 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000114 	.word	0x20000114

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000114 	.word	0x20000114

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	@ (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	@ 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff4c 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff61 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ffb1 	bl	8000d50 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff80 	bl	8000cfc <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff54 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e165      	b.n	8001108 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8154 	bne.w	8001102 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80ae 	beq.w	8001102 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b5d      	ldr	r3, [pc, #372]	@ (8001120 <HAL_GPIO_Init+0x300>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a5c      	ldr	r2, [pc, #368]	@ (8001120 <HAL_GPIO_Init+0x300>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8001120 <HAL_GPIO_Init+0x300>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a58      	ldr	r2, [pc, #352]	@ (8001124 <HAL_GPIO_Init+0x304>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8001128 <HAL_GPIO_Init+0x308>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800112c <HAL_GPIO_Init+0x30c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <HAL_GPIO_Init+0x310>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4c      	ldr	r2, [pc, #304]	@ (8001134 <HAL_GPIO_Init+0x314>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	@ (8001138 <HAL_GPIO_Init+0x318>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x20a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4a      	ldr	r2, [pc, #296]	@ (800113c <HAL_GPIO_Init+0x31c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x206>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a49      	ldr	r2, [pc, #292]	@ (8001140 <HAL_GPIO_Init+0x320>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x202>
 800101e:	2306      	movs	r3, #6
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x21c>
 8001022:	2307      	movs	r3, #7
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x21c>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x21c>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x21c>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x21c>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x21c>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x21c>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	@ (8001124 <HAL_GPIO_Init+0x304>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b3a      	ldr	r3, [pc, #232]	@ (8001144 <HAL_GPIO_Init+0x324>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a31      	ldr	r2, [pc, #196]	@ (8001144 <HAL_GPIO_Init+0x324>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <HAL_GPIO_Init+0x324>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a26      	ldr	r2, [pc, #152]	@ (8001144 <HAL_GPIO_Init+0x324>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <HAL_GPIO_Init+0x324>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <HAL_GPIO_Init+0x324>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_GPIO_Init+0x324>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <HAL_GPIO_Init+0x324>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae96 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001164:	e003      	b.n	800116e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	041a      	lsls	r2, r3, #16
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43d9      	mvns	r1, r3
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	400b      	ands	r3, r1
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0cc      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b68      	ldr	r3, [pc, #416]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d90c      	bls.n	80011ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b65      	ldr	r3, [pc, #404]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b63      	ldr	r3, [pc, #396]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0b8      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001204:	4b59      	ldr	r3, [pc, #356]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a58      	ldr	r2, [pc, #352]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800120e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800121c:	4b53      	ldr	r3, [pc, #332]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a52      	ldr	r2, [pc, #328]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001228:	4b50      	ldr	r3, [pc, #320]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	494d      	ldr	r1, [pc, #308]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d044      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d119      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d003      	beq.n	800126e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126a:	2b03      	cmp	r3, #3
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e06f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e067      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4934      	ldr	r1, [pc, #208]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fcd0 	bl	8000c44 <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	e00a      	b.n	80012be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fccc 	bl	8000c44 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e04f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 020c 	and.w	r2, r3, #12
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1eb      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d0:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d20c      	bcs.n	80012f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e032      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4916      	ldr	r1, [pc, #88]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	490e      	ldr	r1, [pc, #56]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001336:	f000 f873 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	490a      	ldr	r1, [pc, #40]	@ (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	5ccb      	ldrb	r3, [r1, r3]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_RCC_ClockConfig+0x1c8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fb60 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00
 800136c:	40023800 	.word	0x40023800
 8001370:	08005c64 	.word	0x08005c64
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_RCC_GetHCLKFreq+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000

08001394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001398:	f7ff fff0 	bl	800137c <HAL_RCC_GetHCLKFreq>
 800139c:	4602      	mov	r2, r0
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	0a9b      	lsrs	r3, r3, #10
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	4903      	ldr	r1, [pc, #12]	@ (80013b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013aa:	5ccb      	ldrb	r3, [r1, r3]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08005c74 	.word	0x08005c74

080013bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	220f      	movs	r2, #15
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_RCC_GetClockConfig+0x60>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 020f 	and.w	r2, r3, #15
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001424:	b0ae      	sub	sp, #184	@ 0xb8
 8001426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001446:	4bcb      	ldr	r3, [pc, #812]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b0c      	cmp	r3, #12
 8001450:	f200 8206 	bhi.w	8001860 <HAL_RCC_GetSysClockFreq+0x440>
 8001454:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	08001491 	.word	0x08001491
 8001460:	08001861 	.word	0x08001861
 8001464:	08001861 	.word	0x08001861
 8001468:	08001861 	.word	0x08001861
 800146c:	08001499 	.word	0x08001499
 8001470:	08001861 	.word	0x08001861
 8001474:	08001861 	.word	0x08001861
 8001478:	08001861 	.word	0x08001861
 800147c:	080014a1 	.word	0x080014a1
 8001480:	08001861 	.word	0x08001861
 8001484:	08001861 	.word	0x08001861
 8001488:	08001861 	.word	0x08001861
 800148c:	08001691 	.word	0x08001691
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001490:	4bb9      	ldr	r3, [pc, #740]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x358>)
 8001492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001496:	e1e7      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001498:	4bb8      	ldr	r3, [pc, #736]	@ (800177c <HAL_RCC_GetSysClockFreq+0x35c>)
 800149a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800149e:	e1e3      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a0:	4bb4      	ldr	r3, [pc, #720]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ac:	4bb1      	ldr	r3, [pc, #708]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d071      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b8:	4bae      	ldr	r3, [pc, #696]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	647b      	str	r3, [r7, #68]	@ 0x44
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001510:	4649      	mov	r1, r9
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4641      	mov	r1, r8
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4641      	mov	r1, r8
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4641      	mov	r1, r8
 8001520:	1a51      	subs	r1, r2, r1
 8001522:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001524:	4649      	mov	r1, r9
 8001526:	eb63 0301 	sbc.w	r3, r3, r1
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001538:	4649      	mov	r1, r9
 800153a:	00cb      	lsls	r3, r1, #3
 800153c:	4641      	mov	r1, r8
 800153e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001542:	4641      	mov	r1, r8
 8001544:	00ca      	lsls	r2, r1, #3
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	4603      	mov	r3, r0
 800154c:	4622      	mov	r2, r4
 800154e:	189b      	adds	r3, r3, r2
 8001550:	633b      	str	r3, [r7, #48]	@ 0x30
 8001552:	462b      	mov	r3, r5
 8001554:	460a      	mov	r2, r1
 8001556:	eb42 0303 	adc.w	r3, r2, r3
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001568:	4629      	mov	r1, r5
 800156a:	024b      	lsls	r3, r1, #9
 800156c:	4621      	mov	r1, r4
 800156e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001572:	4621      	mov	r1, r4
 8001574:	024a      	lsls	r2, r1, #9
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800157e:	2200      	movs	r2, #0
 8001580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001588:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800158c:	f7fe fe40 	bl	8000210 <__aeabi_uldivmod>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4613      	mov	r3, r2
 8001596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800159a:	e067      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159c:	4b75      	ldr	r3, [pc, #468]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015b6:	2300      	movs	r3, #0
 80015b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015be:	4622      	mov	r2, r4
 80015c0:	462b      	mov	r3, r5
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	0159      	lsls	r1, r3, #5
 80015cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d0:	0150      	lsls	r0, r2, #5
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4621      	mov	r1, r4
 80015d8:	1a51      	subs	r1, r2, r1
 80015da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015dc:	4629      	mov	r1, r5
 80015de:	eb63 0301 	sbc.w	r3, r3, r1
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015f0:	4649      	mov	r1, r9
 80015f2:	018b      	lsls	r3, r1, #6
 80015f4:	4641      	mov	r1, r8
 80015f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fa:	4641      	mov	r1, r8
 80015fc:	018a      	lsls	r2, r1, #6
 80015fe:	4641      	mov	r1, r8
 8001600:	ebb2 0a01 	subs.w	sl, r2, r1
 8001604:	4649      	mov	r1, r9
 8001606:	eb63 0b01 	sbc.w	fp, r3, r1
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001616:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800161a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800161e:	4692      	mov	sl, r2
 8001620:	469b      	mov	fp, r3
 8001622:	4623      	mov	r3, r4
 8001624:	eb1a 0303 	adds.w	r3, sl, r3
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	462b      	mov	r3, r5
 800162c:	eb4b 0303 	adc.w	r3, fp, r3
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800163e:	4629      	mov	r1, r5
 8001640:	028b      	lsls	r3, r1, #10
 8001642:	4621      	mov	r1, r4
 8001644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001648:	4621      	mov	r1, r4
 800164a:	028a      	lsls	r2, r1, #10
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001654:	2200      	movs	r2, #0
 8001656:	673b      	str	r3, [r7, #112]	@ 0x70
 8001658:	677a      	str	r2, [r7, #116]	@ 0x74
 800165a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800165e:	f7fe fdd7 	bl	8000210 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4613      	mov	r3, r2
 8001668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800166c:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	3301      	adds	r3, #1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800167e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800168e:	e0eb      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169c:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d06b      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x354>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	@ 0x64
 80016c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016c4:	4622      	mov	r2, r4
 80016c6:	462b      	mov	r3, r5
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	0159      	lsls	r1, r3, #5
 80016d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d6:	0150      	lsls	r0, r2, #5
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4621      	mov	r1, r4
 80016de:	1a51      	subs	r1, r2, r1
 80016e0:	61b9      	str	r1, [r7, #24]
 80016e2:	4629      	mov	r1, r5
 80016e4:	eb63 0301 	sbc.w	r3, r3, r1
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016f6:	4659      	mov	r1, fp
 80016f8:	018b      	lsls	r3, r1, #6
 80016fa:	4651      	mov	r1, sl
 80016fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001700:	4651      	mov	r1, sl
 8001702:	018a      	lsls	r2, r1, #6
 8001704:	4651      	mov	r1, sl
 8001706:	ebb2 0801 	subs.w	r8, r2, r1
 800170a:	4659      	mov	r1, fp
 800170c:	eb63 0901 	sbc.w	r9, r3, r1
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800171c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001724:	4690      	mov	r8, r2
 8001726:	4699      	mov	r9, r3
 8001728:	4623      	mov	r3, r4
 800172a:	eb18 0303 	adds.w	r3, r8, r3
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	462b      	mov	r3, r5
 8001732:	eb49 0303 	adc.w	r3, r9, r3
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001744:	4629      	mov	r1, r5
 8001746:	024b      	lsls	r3, r1, #9
 8001748:	4621      	mov	r1, r4
 800174a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800174e:	4621      	mov	r1, r4
 8001750:	024a      	lsls	r2, r1, #9
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800175a:	2200      	movs	r2, #0
 800175c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800175e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001764:	f7fe fd54 	bl	8000210 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001772:	e065      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x420>
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001780:	4b3d      	ldr	r3, [pc, #244]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x458>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	2200      	movs	r2, #0
 8001788:	4618      	mov	r0, r3
 800178a:	4611      	mov	r1, r2
 800178c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001790:	653b      	str	r3, [r7, #80]	@ 0x50
 8001792:	2300      	movs	r3, #0
 8001794:	657b      	str	r3, [r7, #84]	@ 0x54
 8001796:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800179a:	4642      	mov	r2, r8
 800179c:	464b      	mov	r3, r9
 800179e:	f04f 0000 	mov.w	r0, #0
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	0159      	lsls	r1, r3, #5
 80017a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ac:	0150      	lsls	r0, r2, #5
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4641      	mov	r1, r8
 80017b4:	1a51      	subs	r1, r2, r1
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	4649      	mov	r1, r9
 80017ba:	eb63 0301 	sbc.w	r3, r3, r1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017cc:	4659      	mov	r1, fp
 80017ce:	018b      	lsls	r3, r1, #6
 80017d0:	4651      	mov	r1, sl
 80017d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d6:	4651      	mov	r1, sl
 80017d8:	018a      	lsls	r2, r1, #6
 80017da:	4651      	mov	r1, sl
 80017dc:	1a54      	subs	r4, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0501 	sbc.w	r5, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	00eb      	lsls	r3, r5, #3
 80017ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017f2:	00e2      	lsls	r2, r4, #3
 80017f4:	4614      	mov	r4, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	4643      	mov	r3, r8
 80017fa:	18e3      	adds	r3, r4, r3
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	464b      	mov	r3, r9
 8001800:	eb45 0303 	adc.w	r3, r5, r3
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001812:	4629      	mov	r1, r5
 8001814:	028b      	lsls	r3, r1, #10
 8001816:	4621      	mov	r1, r4
 8001818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800181c:	4621      	mov	r1, r4
 800181e:	028a      	lsls	r2, r1, #10
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001828:	2200      	movs	r2, #0
 800182a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800182c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800182e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001832:	f7fe fced 	bl	8000210 <__aeabi_uldivmod>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4613      	mov	r3, r2
 800183c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x458>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0f1b      	lsrs	r3, r3, #28
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800184e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800185e:	e003      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001866:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800186c:	4618      	mov	r0, r3
 800186e:	37b8      	adds	r7, #184	@ 0xb8
 8001870:	46bd      	mov	sp, r7
 8001872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	00f42400 	.word	0x00f42400

08001880 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e28d      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8083 	beq.w	80019a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018a0:	4b94      	ldr	r3, [pc, #592]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d019      	beq.n	80018e0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018ac:	4b91      	ldr	r3, [pc, #580]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
        || \
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018b8:	4b8e      	ldr	r3, [pc, #568]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018c4:	d00c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b8b      	ldr	r3, [pc, #556]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d2:	4b88      	ldr	r3, [pc, #544]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b84      	ldr	r3, [pc, #528]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d05b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x124>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e25a      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x90>
 8001902:	4b7c      	ldr	r3, [pc, #496]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7b      	ldr	r2, [pc, #492]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xcc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xb4>
 800191a:	4b76      	ldr	r3, [pc, #472]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a75      	ldr	r2, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b73      	ldr	r3, [pc, #460]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a72      	ldr	r2, [pc, #456]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xcc>
 8001934:	4b6f      	ldr	r3, [pc, #444]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6e      	ldr	r2, [pc, #440]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6b      	ldr	r2, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff f976 	bl	8000c44 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f972 	bl	8000c44 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e21f      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xdc>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f962 	bl	8000c44 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f95e 	bl	8000c44 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e20b      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x104>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d06f      	beq.n	8001a92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019b2:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d017      	beq.n	80019ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019be:	4b4d      	ldr	r3, [pc, #308]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019d6:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e2:	4b44      	ldr	r3, [pc, #272]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x186>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1d3      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4937      	ldr	r1, [pc, #220]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_RCC_OscConfig+0x278>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f90b 	bl	8000c44 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff f907 	bl	8000c44 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1b4      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4925      	ldr	r1, [pc, #148]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_OscConfig+0x278>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f8ea 	bl	8000c44 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff f8e6 	bl	8000c44 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e193      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d036      	beq.n	8001b0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d016      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_RCC_OscConfig+0x27c>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff f8ca 	bl	8000c44 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f8c6 	bl	8000c44 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e173      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x234>
 8001ad2:	e01b      	b.n	8001b0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff f8b3 	bl	8000c44 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	e00e      	b.n	8001b00 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f8af 	bl	8000c44 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d907      	bls.n	8001b00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e15c      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	42470000 	.word	0x42470000
 8001afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b8a      	ldr	r3, [pc, #552]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ea      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8097 	beq.w	8001c48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b83      	ldr	r3, [pc, #524]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a7e      	ldr	r2, [pc, #504]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b79      	ldr	r3, [pc, #484]	@ (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b76      	ldr	r3, [pc, #472]	@ (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a75      	ldr	r2, [pc, #468]	@ (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f86f 	bl	8000c44 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff f86b 	bl	8000c44 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e118      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d30 <HAL_RCC_OscConfig+0x4b0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x31e>
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b94:	4a65      	ldr	r2, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x358>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x340>
 8001ba6:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001baa:	4a60      	ldr	r2, [pc, #384]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x358>
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc4:	4a59      	ldr	r2, [pc, #356]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bcc:	4b57      	ldr	r3, [pc, #348]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd0:	4a56      	ldr	r2, [pc, #344]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d015      	beq.n	8001c0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f830 	bl	8000c44 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff f82c 	bl	8000c44 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0d7      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ee      	beq.n	8001be8 <HAL_RCC_OscConfig+0x368>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f81a 	bl	8000c44 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f816 	bl	8000c44 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0c1      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2a:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ee      	bne.n	8001c14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	4a3a      	ldr	r2, [pc, #232]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80ad 	beq.w	8001dac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c52:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d060      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d145      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_RCC_OscConfig+0x4b4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7fe ffea 	bl	8000c44 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7fe ffe6 	bl	8000c44 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e093      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	3b01      	subs	r3, #1
 8001cac:	041b      	lsls	r3, r3, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	071b      	lsls	r3, r3, #28
 8001cbe:	491b      	ldr	r1, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x4b4>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7fe ffbb 	bl	8000c44 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe ffb7 	bl	8000c44 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e064      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x452>
 8001cf0:	e05c      	b.n	8001dac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_RCC_OscConfig+0x4b4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7fe ffa4 	bl	8000c44 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe ffa0 	bl	8000c44 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e04d      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x480>
 8001d1e:	e045      	b.n	8001dac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e040      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <HAL_RCC_OscConfig+0x538>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d030      	beq.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d129      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d122      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d119      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10f      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fdbe 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 fc62 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d001      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e04e      	b.n	8001f12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d022      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9e:	d01d      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d018      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1e      	ldr	r2, [pc, #120]	@ (8001f28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00e      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d009      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d004      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x80>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d010      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efe:	e007      	b.n	8001f10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40001800 	.word	0x40001800

08001f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e041      	b.n	8001fd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f839 	bl	8001fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 fba2 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_TIM_PWM_Start+0x24>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e022      	b.n	800205a <HAL_TIM_PWM_Start+0x6a>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d109      	bne.n	800202e <HAL_TIM_PWM_Start+0x3e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	e015      	b.n	800205a <HAL_TIM_PWM_Start+0x6a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b08      	cmp	r3, #8
 8002032:	d109      	bne.n	8002048 <HAL_TIM_PWM_Start+0x58>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e008      	b.n	800205a <HAL_TIM_PWM_Start+0x6a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e07c      	b.n	800215c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <HAL_TIM_PWM_Start+0x82>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002070:	e013      	b.n	800209a <HAL_TIM_PWM_Start+0xaa>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d104      	bne.n	8002082 <HAL_TIM_PWM_Start+0x92>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002080:	e00b      	b.n	800209a <HAL_TIM_PWM_Start+0xaa>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d104      	bne.n	8002092 <HAL_TIM_PWM_Start+0xa2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002090:	e003      	b.n	800209a <HAL_TIM_PWM_Start+0xaa>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2201      	movs	r2, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fdfe 	bl	8002ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002164 <HAL_TIM_PWM_Start+0x174>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_TIM_PWM_Start+0xcc>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002168 <HAL_TIM_PWM_Start+0x178>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_TIM_PWM_Start+0xd0>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_TIM_PWM_Start+0xd2>
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <HAL_TIM_PWM_Start+0x174>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e8:	d01d      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1f      	ldr	r2, [pc, #124]	@ (800216c <HAL_TIM_PWM_Start+0x17c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_TIM_PWM_Start+0x180>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1c      	ldr	r2, [pc, #112]	@ (8002174 <HAL_TIM_PWM_Start+0x184>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_TIM_PWM_Start+0x178>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_TIM_PWM_Start+0x188>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIM_PWM_Start+0x136>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a16      	ldr	r2, [pc, #88]	@ (800217c <HAL_TIM_PWM_Start+0x18c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d111      	bne.n	800214a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d010      	beq.n	800215a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002148:	e007      	b.n	800215a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40010000 	.word	0x40010000
 8002168:	40010400 	.word	0x40010400
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40014000 	.word	0x40014000
 800217c:	40001800 	.word	0x40001800

08002180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0202 	mvn.w	r2, #2
 80021b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa5b 	bl	8002686 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa4d 	bl	8002672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa5e 	bl	800269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0204 	mvn.w	r2, #4
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fa35 	bl	8002686 <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa27 	bl	8002672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa38 	bl	800269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d020      	beq.n	800227c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0208 	mvn.w	r2, #8
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fa0f 	bl	8002686 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa01 	bl	8002672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fa12 	bl	800269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d020      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0210 	mvn.w	r2, #16
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2208      	movs	r2, #8
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9e9 	bl	8002686 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9db 	bl	8002672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f9ec 	bl	800269a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0201 	mvn.w	r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe faf8 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fd76 	bl	8002dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9bd 	bl	80026ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0220 	mvn.w	r2, #32
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fd48 	bl	8002de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800237a:	2302      	movs	r3, #2
 800237c:	e0ae      	b.n	80024dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	f200 809f 	bhi.w	80024cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800238e:	a201      	add	r2, pc, #4	@ (adr r2, 8002394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023c9 	.word	0x080023c9
 8002398:	080024cd 	.word	0x080024cd
 800239c:	080024cd 	.word	0x080024cd
 80023a0:	080024cd 	.word	0x080024cd
 80023a4:	08002409 	.word	0x08002409
 80023a8:	080024cd 	.word	0x080024cd
 80023ac:	080024cd 	.word	0x080024cd
 80023b0:	080024cd 	.word	0x080024cd
 80023b4:	0800244b 	.word	0x0800244b
 80023b8:	080024cd 	.word	0x080024cd
 80023bc:	080024cd 	.word	0x080024cd
 80023c0:	080024cd 	.word	0x080024cd
 80023c4:	0800248b 	.word	0x0800248b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fa1e 	bl	8002810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0208 	orr.w	r2, r2, #8
 80023e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6999      	ldr	r1, [r3, #24]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	619a      	str	r2, [r3, #24]
      break;
 8002406:	e064      	b.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fa6e 	bl	80028f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6999      	ldr	r1, [r3, #24]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	021a      	lsls	r2, r3, #8
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	619a      	str	r2, [r3, #24]
      break;
 8002448:	e043      	b.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fac3 	bl	80029dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0208 	orr.w	r2, r2, #8
 8002464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0204 	bic.w	r2, r2, #4
 8002474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	61da      	str	r2, [r3, #28]
      break;
 8002488:	e023      	b.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fb17 	bl	8002ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69d9      	ldr	r1, [r3, #28]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	021a      	lsls	r2, r3, #8
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	61da      	str	r2, [r3, #28]
      break;
 80024ca:	e002      	b.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
      break;
 80024d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024da:	7dfb      	ldrb	r3, [r7, #23]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x1c>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e0b4      	b.n	800266a <HAL_TIM_ConfigClockSource+0x186>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800251e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002538:	d03e      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xd4>
 800253a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253e:	f200 8087 	bhi.w	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002546:	f000 8086 	beq.w	8002656 <HAL_TIM_ConfigClockSource+0x172>
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800254e:	d87f      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b70      	cmp	r3, #112	@ 0x70
 8002552:	d01a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xa6>
 8002554:	2b70      	cmp	r3, #112	@ 0x70
 8002556:	d87b      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b60      	cmp	r3, #96	@ 0x60
 800255a:	d050      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x11a>
 800255c:	2b60      	cmp	r3, #96	@ 0x60
 800255e:	d877      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b50      	cmp	r3, #80	@ 0x50
 8002562:	d03c      	beq.n	80025de <HAL_TIM_ConfigClockSource+0xfa>
 8002564:	2b50      	cmp	r3, #80	@ 0x50
 8002566:	d873      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d058      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x13a>
 800256c:	2b40      	cmp	r3, #64	@ 0x40
 800256e:	d86f      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b30      	cmp	r3, #48	@ 0x30
 8002572:	d064      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x15a>
 8002574:	2b30      	cmp	r3, #48	@ 0x30
 8002576:	d86b      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d060      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x15a>
 800257c:	2b20      	cmp	r3, #32
 800257e:	d867      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x15a>
 8002584:	2b10      	cmp	r3, #16
 8002586:	d05a      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x15a>
 8002588:	e062      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800259a:	f000 fb63 	bl	8002c64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	609a      	str	r2, [r3, #8]
      break;
 80025b6:	e04f      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025c8:	f000 fb4c 	bl	8002c64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025da:	609a      	str	r2, [r3, #8]
      break;
 80025dc:	e03c      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	461a      	mov	r2, r3
 80025ec:	f000 fac0 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2150      	movs	r1, #80	@ 0x50
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fb19 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 80025fc:	e02c      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800260a:	461a      	mov	r2, r3
 800260c:	f000 fadf 	bl	8002bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2160      	movs	r1, #96	@ 0x60
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb09 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 800261c:	e01c      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800262a:	461a      	mov	r2, r3
 800262c:	f000 faa0 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2140      	movs	r1, #64	@ 0x40
 8002636:	4618      	mov	r0, r3
 8002638:	f000 faf9 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 800263c:	e00c      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f000 faf0 	bl	8002c2e <TIM_ITRx_SetConfig>
      break;
 800264e:	e003      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
      break;
 8002654:	e000      	b.n	8002658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a43      	ldr	r2, [pc, #268]	@ (80027e4 <TIM_Base_SetConfig+0x120>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e2:	d00f      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a40      	ldr	r2, [pc, #256]	@ (80027e8 <TIM_Base_SetConfig+0x124>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00b      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3f      	ldr	r2, [pc, #252]	@ (80027ec <TIM_Base_SetConfig+0x128>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3e      	ldr	r2, [pc, #248]	@ (80027f0 <TIM_Base_SetConfig+0x12c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3d      	ldr	r2, [pc, #244]	@ (80027f4 <TIM_Base_SetConfig+0x130>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d108      	bne.n	8002716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a32      	ldr	r2, [pc, #200]	@ (80027e4 <TIM_Base_SetConfig+0x120>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002724:	d027      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a2f      	ldr	r2, [pc, #188]	@ (80027e8 <TIM_Base_SetConfig+0x124>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d023      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2e      	ldr	r2, [pc, #184]	@ (80027ec <TIM_Base_SetConfig+0x128>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2d      	ldr	r2, [pc, #180]	@ (80027f0 <TIM_Base_SetConfig+0x12c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <TIM_Base_SetConfig+0x130>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d017      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <TIM_Base_SetConfig+0x134>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2a      	ldr	r2, [pc, #168]	@ (80027fc <TIM_Base_SetConfig+0x138>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00f      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a29      	ldr	r2, [pc, #164]	@ (8002800 <TIM_Base_SetConfig+0x13c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <TIM_Base_SetConfig+0x140>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a27      	ldr	r2, [pc, #156]	@ (8002808 <TIM_Base_SetConfig+0x144>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <TIM_Base_SetConfig+0x148>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d108      	bne.n	8002788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a0e      	ldr	r2, [pc, #56]	@ (80027e4 <TIM_Base_SetConfig+0x120>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0xf2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a10      	ldr	r2, [pc, #64]	@ (80027f4 <TIM_Base_SetConfig+0x130>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d103      	bne.n	80027be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800
 80027f0:	40000c00 	.word	0x40000c00
 80027f4:	40010400 	.word	0x40010400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400
 8002800:	40014800 	.word	0x40014800
 8002804:	40001800 	.word	0x40001800
 8002808:	40001c00 	.word	0x40001c00
 800280c:	40002000 	.word	0x40002000

08002810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 0201 	bic.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f023 0302 	bic.w	r3, r3, #2
 8002858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <TIM_OC1_SetConfig+0xd8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_OC1_SetConfig+0x64>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <TIM_OC1_SetConfig+0xdc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10c      	bne.n	800288e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0308 	bic.w	r3, r3, #8
 800287a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a15      	ldr	r2, [pc, #84]	@ (80028e8 <TIM_OC1_SetConfig+0xd8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_OC1_SetConfig+0x8e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <TIM_OC1_SetConfig+0xdc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d111      	bne.n	80028c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	621a      	str	r2, [r3, #32]
}
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40010400 	.word	0x40010400

080028f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 0210 	bic.w	r2, r3, #16
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800291e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f023 0320 	bic.w	r3, r3, #32
 800293a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <TIM_OC2_SetConfig+0xe4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_OC2_SetConfig+0x68>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a21      	ldr	r2, [pc, #132]	@ (80029d8 <TIM_OC2_SetConfig+0xe8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10d      	bne.n	8002974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800295e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a17      	ldr	r2, [pc, #92]	@ (80029d4 <TIM_OC2_SetConfig+0xe4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_OC2_SetConfig+0x94>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a16      	ldr	r2, [pc, #88]	@ (80029d8 <TIM_OC2_SetConfig+0xe8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d113      	bne.n	80029ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800298a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	621a      	str	r2, [r3, #32]
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40010400 	.word	0x40010400

080029dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a21      	ldr	r2, [pc, #132]	@ (8002abc <TIM_OC3_SetConfig+0xe0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <TIM_OC3_SetConfig+0x66>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	@ (8002ac0 <TIM_OC3_SetConfig+0xe4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a16      	ldr	r2, [pc, #88]	@ (8002abc <TIM_OC3_SetConfig+0xe0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_OC3_SetConfig+0x92>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <TIM_OC3_SetConfig+0xe4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d113      	bne.n	8002a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	621a      	str	r2, [r3, #32]
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	031b      	lsls	r3, r3, #12
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a12      	ldr	r2, [pc, #72]	@ (8002b68 <TIM_OC4_SetConfig+0xa4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_OC4_SetConfig+0x68>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a11      	ldr	r2, [pc, #68]	@ (8002b6c <TIM_OC4_SetConfig+0xa8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d109      	bne.n	8002b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	40010400 	.word	0x40010400

08002b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f023 030a 	bic.w	r3, r3, #10
 8002bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f023 0210 	bic.w	r2, r3, #16
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	031b      	lsls	r3, r3, #12
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f043 0307 	orr.w	r3, r3, #7
 8002c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1a      	ldr	r2, [r3, #32]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e05a      	b.n	8002dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a21      	ldr	r2, [pc, #132]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d54:	d01d      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d018      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a18      	ldr	r2, [pc, #96]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	@ (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10c      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40000400 	.word	0x40000400
 8002dd4:	40000800 	.word	0x40000800
 8002dd8:	40000c00 	.word	0x40000c00
 8002ddc:	40010400 	.word	0x40010400
 8002de0:	40014000 	.word	0x40014000
 8002de4:	40001800 	.word	0x40001800

08002de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <__NVIC_SetPriority>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	@ (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	@ (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <SysTick_Handler+0x1c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e6c:	f001 fd46 	bl	80048fc <xTaskGetSchedulerState>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e76:	f002 fb3f 	bl	80054f8 <xPortSysTickHandler>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e88:	2100      	movs	r1, #0
 8002e8a:	f06f 0004 	mvn.w	r0, #4
 8002e8e:	f7ff ffbf 	bl	8002e10 <__NVIC_SetPriority>
#endif
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e9e:	f3ef 8305 	mrs	r3, IPSR
 8002ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002eaa:	f06f 0305 	mvn.w	r3, #5
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	e00c      	b.n	8002ecc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <osKernelInitialize+0x44>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <osKernelInitialize+0x44>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	e002      	b.n	8002ecc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000118 	.word	0x20000118

08002ee0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ee6:	f3ef 8305 	mrs	r3, IPSR
 8002eea:	603b      	str	r3, [r7, #0]
  return(result);
 8002eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ef2:	f06f 0305 	mvn.w	r3, #5
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	e010      	b.n	8002f1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <osKernelStart+0x48>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d109      	bne.n	8002f16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f02:	f7ff ffbf 	bl	8002e84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <osKernelStart+0x48>)
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f0c:	f001 f892 	bl	8004034 <vTaskStartScheduler>
      stat = osOK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	e002      	b.n	8002f1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f1c:	687b      	ldr	r3, [r7, #4]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000118 	.word	0x20000118

08002f2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af04      	add	r7, sp, #16
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f3c:	f3ef 8305 	mrs	r3, IPSR
 8002f40:	617b      	str	r3, [r7, #20]
  return(result);
 8002f42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d17e      	bne.n	8003046 <osThreadNew+0x11a>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d07b      	beq.n	8003046 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f52:	2318      	movs	r3, #24
 8002f54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d045      	beq.n	8002ff2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <osThreadNew+0x48>
        name = attr->name;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <osThreadNew+0x6e>
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b38      	cmp	r3, #56	@ 0x38
 8002f8c:	d805      	bhi.n	8002f9a <osThreadNew+0x6e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <osThreadNew+0x72>
        return (NULL);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e054      	b.n	8003048 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	089b      	lsrs	r3, r3, #2
 8002fac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <osThreadNew+0xa8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2ba7      	cmp	r3, #167	@ 0xa7
 8002fbc:	d90a      	bls.n	8002fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <osThreadNew+0xa8>
        mem = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e010      	b.n	8002ff6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10c      	bne.n	8002ff6 <osThreadNew+0xca>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <osThreadNew+0xca>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <osThreadNew+0xca>
          mem = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e001      	b.n	8002ff6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d110      	bne.n	800301e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003004:	9202      	str	r2, [sp, #8]
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fe1a 	bl	8003c4c <xTaskCreateStatic>
 8003018:	4603      	mov	r3, r0
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e013      	b.n	8003046 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d110      	bne.n	8003046 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	b29a      	uxth	r2, r3
 8003028:	f107 0310 	add.w	r3, r7, #16
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fe68 	bl	8003d0c <xTaskCreate>
 800303c:	4603      	mov	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d001      	beq.n	8003046 <osThreadNew+0x11a>
            hTask = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003046:	693b      	ldr	r3, [r7, #16]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	@ 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003058:	f3ef 8305 	mrs	r3, IPSR
 800305c:	60bb      	str	r3, [r7, #8]
  return(result);
 800305e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <osDelay+0x1c>
    stat = osErrorISR;
 8003064:	f06f 0305 	mvn.w	r3, #5
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e007      	b.n	800307c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 ffa6 	bl	8003fc8 <vTaskDelay>
    }
  }

  return (stat);
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a07      	ldr	r2, [pc, #28]	@ (80030b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <vApplicationGetIdleTaskMemory+0x30>)
 800309e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000011c 	.word	0x2000011c
 80030b8:	200001c4 	.word	0x200001c4

080030bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a07      	ldr	r2, [pc, #28]	@ (80030e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80030cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4a06      	ldr	r2, [pc, #24]	@ (80030ec <vApplicationGetTimerTaskMemory+0x30>)
 80030d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	200003c4 	.word	0x200003c4
 80030ec:	2000046c 	.word	0x2000046c

080030f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f103 0208 	add.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f103 0208 	add.w	r2, r3, #8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f103 0208 	add.w	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031a8:	d103      	bne.n	80031b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e00c      	b.n	80031cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3308      	adds	r3, #8
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e002      	b.n	80031c0 <vListInsert+0x2e>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d2f6      	bcs.n	80031ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6852      	ldr	r2, [r2, #4]
 8003224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d103      	bne.n	8003238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003284:	f002 f8a8 	bl	80053d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	441a      	add	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	3b01      	subs	r3, #1
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	22ff      	movs	r2, #255	@ 0xff
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	22ff      	movs	r2, #255	@ 0xff
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d114      	bne.n	8003304 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01a      	beq.n	8003318 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3310      	adds	r3, #16
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 f942 	bl	8004570 <xTaskRemoveFromEventList>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <xQueueGenericReset+0xd0>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	e009      	b.n	8003318 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3310      	adds	r3, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fef1 	bl	80030f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3324      	adds	r3, #36	@ 0x24
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff feec 	bl	80030f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003318:	f002 f890 	bl	800543c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800331c:	2301      	movs	r3, #1
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	@ 0x38
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	e7fd      	b.n	8003372 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <xQueueGenericCreateStatic+0x56>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <xQueueGenericCreateStatic+0x5a>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <xQueueGenericCreateStatic+0x5c>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	623b      	str	r3, [r7, #32]
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <xQueueGenericCreateStatic+0x84>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <xQueueGenericCreateStatic+0x88>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <xQueueGenericCreateStatic+0x8a>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	61fb      	str	r3, [r7, #28]
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	e7fd      	b.n	80033ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033d2:	2350      	movs	r3, #80	@ 0x50
 80033d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b50      	cmp	r3, #80	@ 0x50
 80033da:	d00b      	beq.n	80033f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	61bb      	str	r3, [r7, #24]
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003408:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f805 	bl	8003426 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800341e:	4618      	mov	r0, r3
 8003420:	3730      	adds	r7, #48	@ 0x30
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e002      	b.n	8003448 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003454:	2101      	movs	r1, #1
 8003456:	69b8      	ldr	r0, [r7, #24]
 8003458:	f7ff fefe 	bl	8003258 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <xQueueGenericSend+0x34>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <xQueueGenericSend+0x42>
 80034a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <xQueueGenericSend+0x46>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <xQueueGenericSend+0x48>
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <xQueueGenericSend+0x64>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <xQueueGenericSend+0x72>
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericSend+0x76>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericSend+0x78>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <xQueueGenericSend+0x94>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003500:	f001 f9fc 	bl	80048fc <xTaskGetSchedulerState>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <xQueueGenericSend+0xa4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <xQueueGenericSend+0xa8>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <xQueueGenericSend+0xaa>
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <xQueueGenericSend+0xc6>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	61fb      	str	r3, [r7, #28]
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003532:	f001 ff51 	bl	80053d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <xQueueGenericSend+0xdc>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d129      	bne.n	800359c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800354e:	f000 fa0f 	bl	8003970 <prvCopyDataToQueue>
 8003552:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	3324      	adds	r3, #36	@ 0x24
 8003560:	4618      	mov	r0, r3
 8003562:	f001 f805 	bl	8004570 <xTaskRemoveFromEventList>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800356c:	4b3f      	ldr	r3, [pc, #252]	@ (800366c <xQueueGenericSend+0x200>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	e00a      	b.n	8003594 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800357e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003584:	4b39      	ldr	r3, [pc, #228]	@ (800366c <xQueueGenericSend+0x200>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003594:	f001 ff52 	bl	800543c <vPortExitCritical>
				return pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	e063      	b.n	8003664 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a2:	f001 ff4b 	bl	800543c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e05c      	b.n	8003664 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f83f 	bl	8004638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ba:	2301      	movs	r3, #1
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035be:	f001 ff3d 	bl	800543c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c2:	f000 fda7 	bl	8004114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c6:	f001 ff07 	bl	80053d8 <vPortEnterCritical>
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035d6:	d103      	bne.n	80035e0 <xQueueGenericSend+0x174>
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ec:	d103      	bne.n	80035f6 <xQueueGenericSend+0x18a>
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035f6:	f001 ff21 	bl	800543c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035fa:	1d3a      	adds	r2, r7, #4
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f001 f82e 	bl	8004664 <xTaskCheckForTimeOut>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d124      	bne.n	8003658 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800360e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003610:	f000 faa6 	bl	8003b60 <prvIsQueueFull>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d018      	beq.n	800364c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	3310      	adds	r3, #16
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 ff52 	bl	80044cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800362a:	f000 fa31 	bl	8003a90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800362e:	f000 fd7f 	bl	8004130 <xTaskResumeAll>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	f47f af7c 	bne.w	8003532 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800363a:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <xQueueGenericSend+0x200>)
 800363c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	e772      	b.n	8003532 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800364c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800364e:	f000 fa1f 	bl	8003a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003652:	f000 fd6d 	bl	8004130 <xTaskResumeAll>
 8003656:	e76c      	b.n	8003532 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800365a:	f000 fa19 	bl	8003a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800365e:	f000 fd67 	bl	8004130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003662:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003664:	4618      	mov	r0, r3
 8003666:	3738      	adds	r7, #56	@ 0x38
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b090      	sub	sp, #64	@ 0x40
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <xQueueGenericSendFromISR+0x3e>
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <xQueueGenericSendFromISR+0x42>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <xQueueGenericSendFromISR+0x44>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d103      	bne.n	80036de <xQueueGenericSendFromISR+0x6e>
 80036d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <xQueueGenericSendFromISR+0x72>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <xQueueGenericSendFromISR+0x74>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	623b      	str	r3, [r7, #32]
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003700:	f001 ff4a 	bl	8005598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003704:	f3ef 8211 	mrs	r2, BASEPRI
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	61fa      	str	r2, [r7, #28]
 800371a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800371c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <xQueueGenericSendFromISR+0xc2>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d12f      	bne.n	8003792 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800373c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003748:	f000 f912 	bl	8003970 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800374c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003754:	d112      	bne.n	800377c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	3324      	adds	r3, #36	@ 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f000 ff04 	bl	8004570 <xTaskRemoveFromEventList>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e007      	b.n	800378c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800377c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003780:	3301      	adds	r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	b25a      	sxtb	r2, r3
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800378c:	2301      	movs	r3, #1
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003790:	e001      	b.n	8003796 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003792:	2300      	movs	r3, #0
 8003794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003798:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3740      	adds	r7, #64	@ 0x40
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	@ 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xQueueReceive+0x32>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	623b      	str	r3, [r7, #32]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <xQueueReceive+0x40>
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <xQueueReceive+0x44>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <xQueueReceive+0x46>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <xQueueReceive+0x62>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	61fb      	str	r3, [r7, #28]
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	e7fd      	b.n	800380a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800380e:	f001 f875 	bl	80048fc <xTaskGetSchedulerState>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <xQueueReceive+0x72>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueReceive+0x76>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueReceive+0x78>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xQueueReceive+0x94>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	61bb      	str	r3, [r7, #24]
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003840:	f001 fdca 	bl	80053d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01f      	beq.n	8003890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003854:	f000 f8f6 	bl	8003a44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	1e5a      	subs	r2, r3, #1
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00f      	beq.n	8003888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	3310      	adds	r3, #16
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fe7f 	bl	8004570 <xTaskRemoveFromEventList>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003878:	4b3c      	ldr	r3, [pc, #240]	@ (800396c <xQueueReceive+0x1c0>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003888:	f001 fdd8 	bl	800543c <vPortExitCritical>
				return pdPASS;
 800388c:	2301      	movs	r3, #1
 800388e:	e069      	b.n	8003964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003896:	f001 fdd1 	bl	800543c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800389a:	2300      	movs	r3, #0
 800389c:	e062      	b.n	8003964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fec5 	bl	8004638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038b2:	f001 fdc3 	bl	800543c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038b6:	f000 fc2d 	bl	8004114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ba:	f001 fd8d 	bl	80053d8 <vPortEnterCritical>
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ca:	d103      	bne.n	80038d4 <xQueueReceive+0x128>
 80038cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e0:	d103      	bne.n	80038ea <xQueueReceive+0x13e>
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038ea:	f001 fda7 	bl	800543c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ee:	1d3a      	adds	r2, r7, #4
 80038f0:	f107 0310 	add.w	r3, r7, #16
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 feb4 	bl	8004664 <xTaskCheckForTimeOut>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d123      	bne.n	800394a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003904:	f000 f916 	bl	8003b34 <prvIsQueueEmpty>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	3324      	adds	r3, #36	@ 0x24
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fdd8 	bl	80044cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800391c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800391e:	f000 f8b7 	bl	8003a90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003922:	f000 fc05 	bl	8004130 <xTaskResumeAll>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d189      	bne.n	8003840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <xQueueReceive+0x1c0>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	e780      	b.n	8003840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800393e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003940:	f000 f8a6 	bl	8003a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003944:	f000 fbf4 	bl	8004130 <xTaskResumeAll>
 8003948:	e77a      	b.n	8003840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800394a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800394c:	f000 f8a0 	bl	8003a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003950:	f000 fbee 	bl	8004130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003956:	f000 f8ed 	bl	8003b34 <prvIsQueueEmpty>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	f43f af6f 	beq.w	8003840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003964:	4618      	mov	r0, r3
 8003966:	3730      	adds	r7, #48	@ 0x30
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d14d      	bne.n	8003a32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 ffcc 	bl	8004938 <xTaskPriorityDisinherit>
 80039a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	e043      	b.n	8003a32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d119      	bne.n	80039e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6858      	ldr	r0, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	461a      	mov	r2, r3
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	f002 f8a8 	bl	8005b10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	441a      	add	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d32b      	bcc.n	8003a32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e026      	b.n	8003a32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68d8      	ldr	r0, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	461a      	mov	r2, r3
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	f002 f88e 	bl	8005b10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	425b      	negs	r3, r3
 80039fe:	441a      	add	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d207      	bcs.n	8003a20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	425b      	negs	r3, r3
 8003a1a:	441a      	add	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d105      	bne.n	8003a32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a3a:	697b      	ldr	r3, [r7, #20]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d018      	beq.n	8003a88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d303      	bcc.n	8003a78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68d9      	ldr	r1, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	461a      	mov	r2, r3
 8003a82:	6838      	ldr	r0, [r7, #0]
 8003a84:	f002 f844 	bl	8005b10 <memcpy>
	}
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a98:	f001 fc9e 	bl	80053d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aa4:	e011      	b.n	8003aca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d012      	beq.n	8003ad4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3324      	adds	r3, #36	@ 0x24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fd5c 	bl	8004570 <xTaskRemoveFromEventList>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003abe:	f000 fe35 	bl	800472c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	dce9      	bgt.n	8003aa6 <prvUnlockQueue+0x16>
 8003ad2:	e000      	b.n	8003ad6 <prvUnlockQueue+0x46>
					break;
 8003ad4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	22ff      	movs	r2, #255	@ 0xff
 8003ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ade:	f001 fcad 	bl	800543c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ae2:	f001 fc79 	bl	80053d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aee:	e011      	b.n	8003b14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3310      	adds	r3, #16
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fd37 	bl	8004570 <xTaskRemoveFromEventList>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b08:	f000 fe10 	bl	800472c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	dce9      	bgt.n	8003af0 <prvUnlockQueue+0x60>
 8003b1c:	e000      	b.n	8003b20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	22ff      	movs	r2, #255	@ 0xff
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b28:	f001 fc88 	bl	800543c <vPortExitCritical>
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b3c:	f001 fc4c 	bl	80053d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e001      	b.n	8003b52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b52:	f001 fc73 	bl	800543c <vPortExitCritical>

	return xReturn;
 8003b56:	68fb      	ldr	r3, [r7, #12]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b68:	f001 fc36 	bl	80053d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d102      	bne.n	8003b7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e001      	b.n	8003b82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f001 fc5b 	bl	800543c <vPortExitCritical>

	return xReturn;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e014      	b.n	8003bca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8003be0 <vQueueAddToRegistry+0x50>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bac:	490c      	ldr	r1, [pc, #48]	@ (8003be0 <vQueueAddToRegistry+0x50>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003be0 <vQueueAddToRegistry+0x50>)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bc2:	e006      	b.n	8003bd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b07      	cmp	r3, #7
 8003bce:	d9e7      	bls.n	8003ba0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	2000086c 	.word	0x2000086c

08003be4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bf4:	f001 fbf0 	bl	80053d8 <vPortEnterCritical>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c04:	d103      	bne.n	8003c0e <vQueueWaitForMessageRestricted+0x2a>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c1a:	d103      	bne.n	8003c24 <vQueueWaitForMessageRestricted+0x40>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c24:	f001 fc0a 	bl	800543c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	3324      	adds	r3, #36	@ 0x24
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fc6d 	bl	8004518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7ff ff26 	bl	8003a90 <prvUnlockQueue>
	}
 8003c44:	bf00      	nop
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08e      	sub	sp, #56	@ 0x38
 8003c50:	af04      	add	r7, sp, #16
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	623b      	str	r3, [r7, #32]
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	61fb      	str	r3, [r7, #28]
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	e7fd      	b.n	8003c92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c96:	23a8      	movs	r3, #168	@ 0xa8
 8003c98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003c9e:	d00b      	beq.n	8003cb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61bb      	str	r3, [r7, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003cb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01e      	beq.n	8003cfe <xTaskCreateStatic+0xb2>
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01b      	beq.n	8003cfe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9303      	str	r3, [sp, #12]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f851 	bl	8003d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003cf8:	f000 f8f6 	bl	8003ee8 <prvAddNewTaskToReadyList>
 8003cfc:	e001      	b.n	8003d02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d02:	697b      	ldr	r3, [r7, #20]
	}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3728      	adds	r7, #40	@ 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	@ 0x30
 8003d10:	af04      	add	r7, sp, #16
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fc7b 	bl	800561c <pvPortMalloc>
 8003d26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00e      	beq.n	8003d4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d2e:	20a8      	movs	r0, #168	@ 0xa8
 8003d30:	f001 fc74 	bl	800561c <pvPortMalloc>
 8003d34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d42:	e005      	b.n	8003d50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f001 fd37 	bl	80057b8 <vPortFree>
 8003d4a:	e001      	b.n	8003d50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f80f 	bl	8003d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d7a:	69f8      	ldr	r0, [r7, #28]
 8003d7c:	f000 f8b4 	bl	8003ee8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d80:	2301      	movs	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e002      	b.n	8003d8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
	}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	21a5      	movs	r1, #165	@ 0xa5
 8003db2:	f001 fe21 	bl	80059f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f023 0307 	bic.w	r3, r3, #7
 8003dce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	617b      	str	r3, [r7, #20]
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	e7fd      	b.n	8003dee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01f      	beq.n	8003e38 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e012      	b.n	8003e24 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	7819      	ldrb	r1, [r3, #0]
 8003e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3334      	adds	r3, #52	@ 0x34
 8003e0e:	460a      	mov	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3301      	adds	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d9e9      	bls.n	8003dfe <prvInitialiseNewTask+0x66>
 8003e2a:	e000      	b.n	8003e2e <prvInitialiseNewTask+0x96>
			{
				break;
 8003e2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e36:	e003      	b.n	8003e40 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	2b37      	cmp	r3, #55	@ 0x37
 8003e44:	d901      	bls.n	8003e4a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e46:	2337      	movs	r3, #55	@ 0x37
 8003e48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	2200      	movs	r2, #0
 8003e5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff f965 	bl	8003130 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	3318      	adds	r3, #24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f960 	bl	8003130 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	3354      	adds	r3, #84	@ 0x54
 8003e9a:	224c      	movs	r2, #76	@ 0x4c
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fdaa 	bl	80059f8 <memset>
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8003edc <prvInitialiseNewTask+0x144>)
 8003ea8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee0 <prvInitialiseNewTask+0x148>)
 8003eae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee4 <prvInitialiseNewTask+0x14c>)
 8003eb4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	69b8      	ldr	r0, [r7, #24]
 8003ebc:	f001 f95a 	bl	8005174 <pxPortInitialiseStack>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed2:	bf00      	nop
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20004b00 	.word	0x20004b00
 8003ee0:	20004b68 	.word	0x20004b68
 8003ee4:	20004bd0 	.word	0x20004bd0

08003ee8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ef0:	f001 fa72 	bl	80053d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8003fac <prvAddNewTaskToReadyList+0xc4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	4a2c      	ldr	r2, [pc, #176]	@ (8003fac <prvAddNewTaskToReadyList+0xc4>)
 8003efc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003efe:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <prvAddNewTaskToReadyList+0xc8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f06:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <prvAddNewTaskToReadyList+0xc8>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <prvAddNewTaskToReadyList+0xc4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d110      	bne.n	8003f36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f14:	f000 fc2e 	bl	8004774 <prvInitialiseTaskLists>
 8003f18:	e00d      	b.n	8003f36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f1a:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <prvAddNewTaskToReadyList+0xcc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f22:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <prvAddNewTaskToReadyList+0xc8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d802      	bhi.n	8003f36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f30:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb0 <prvAddNewTaskToReadyList+0xc8>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <prvAddNewTaskToReadyList+0xd0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb8 <prvAddNewTaskToReadyList+0xd0>)
 8003f3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <prvAddNewTaskToReadyList+0xd0>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <prvAddNewTaskToReadyList+0xd4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d903      	bls.n	8003f5c <prvAddNewTaskToReadyList+0x74>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4a18      	ldr	r2, [pc, #96]	@ (8003fbc <prvAddNewTaskToReadyList+0xd4>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4a15      	ldr	r2, [pc, #84]	@ (8003fc0 <prvAddNewTaskToReadyList+0xd8>)
 8003f6a:	441a      	add	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7ff f8e9 	bl	800314a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f78:	f001 fa60 	bl	800543c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <prvAddNewTaskToReadyList+0xcc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f84:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <prvAddNewTaskToReadyList+0xc8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d207      	bcs.n	8003fa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f92:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <prvAddNewTaskToReadyList+0xdc>)
 8003f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000d80 	.word	0x20000d80
 8003fb0:	200008ac 	.word	0x200008ac
 8003fb4:	20000d8c 	.word	0x20000d8c
 8003fb8:	20000d9c 	.word	0x20000d9c
 8003fbc:	20000d88 	.word	0x20000d88
 8003fc0:	200008b0 	.word	0x200008b0
 8003fc4:	e000ed04 	.word	0xe000ed04

08003fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <vTaskDelay+0x64>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <vTaskDelay+0x32>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60bb      	str	r3, [r7, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ffa:	f000 f88b 	bl	8004114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fd09 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004006:	f000 f893 	bl	8004130 <xTaskResumeAll>
 800400a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004012:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <vTaskDelay+0x68>)
 8004014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000da8 	.word	0x20000da8
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	@ 0x28
 8004038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004042:	463a      	mov	r2, r7
 8004044:	1d39      	adds	r1, r7, #4
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff f81c 	bl	8003088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004050:	6839      	ldr	r1, [r7, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	9202      	str	r2, [sp, #8]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	460a      	mov	r2, r1
 8004062:	4924      	ldr	r1, [pc, #144]	@ (80040f4 <vTaskStartScheduler+0xc0>)
 8004064:	4824      	ldr	r0, [pc, #144]	@ (80040f8 <vTaskStartScheduler+0xc4>)
 8004066:	f7ff fdf1 	bl	8003c4c <xTaskCreateStatic>
 800406a:	4603      	mov	r3, r0
 800406c:	4a23      	ldr	r2, [pc, #140]	@ (80040fc <vTaskStartScheduler+0xc8>)
 800406e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004070:	4b22      	ldr	r3, [pc, #136]	@ (80040fc <vTaskStartScheduler+0xc8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e001      	b.n	8004082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004088:	f000 fd1a 	bl	8004ac0 <xTimerCreateTimerTask>
 800408c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d11b      	bne.n	80040cc <vTaskStartScheduler+0x98>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	613b      	str	r3, [r7, #16]
}
 80040a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040a8:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <vTaskStartScheduler+0xcc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3354      	adds	r3, #84	@ 0x54
 80040ae:	4a15      	ldr	r2, [pc, #84]	@ (8004104 <vTaskStartScheduler+0xd0>)
 80040b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <vTaskStartScheduler+0xd4>)
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040ba:	4b14      	ldr	r3, [pc, #80]	@ (800410c <vTaskStartScheduler+0xd8>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040c0:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <vTaskStartScheduler+0xdc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040c6:	f001 f8e3 	bl	8005290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ca:	e00f      	b.n	80040ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040d2:	d10b      	bne.n	80040ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <vTaskStartScheduler+0xb4>
}
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	08005c04 	.word	0x08005c04
 80040f8:	08004745 	.word	0x08004745
 80040fc:	20000da4 	.word	0x20000da4
 8004100:	200008ac 	.word	0x200008ac
 8004104:	20000010 	.word	0x20000010
 8004108:	20000da0 	.word	0x20000da0
 800410c:	20000d8c 	.word	0x20000d8c
 8004110:	20000d84 	.word	0x20000d84

08004114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <vTaskSuspendAll+0x18>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a03      	ldr	r2, [pc, #12]	@ (800412c <vTaskSuspendAll+0x18>)
 8004120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	20000da8 	.word	0x20000da8

08004130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800413e:	4b42      	ldr	r3, [pc, #264]	@ (8004248 <xTaskResumeAll+0x118>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <xTaskResumeAll+0x2e>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	603b      	str	r3, [r7, #0]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800415e:	f001 f93b 	bl	80053d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004162:	4b39      	ldr	r3, [pc, #228]	@ (8004248 <xTaskResumeAll+0x118>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3b01      	subs	r3, #1
 8004168:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <xTaskResumeAll+0x118>)
 800416a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800416c:	4b36      	ldr	r3, [pc, #216]	@ (8004248 <xTaskResumeAll+0x118>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d162      	bne.n	800423a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004174:	4b35      	ldr	r3, [pc, #212]	@ (800424c <xTaskResumeAll+0x11c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05e      	beq.n	800423a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800417c:	e02f      	b.n	80041de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417e:	4b34      	ldr	r3, [pc, #208]	@ (8004250 <xTaskResumeAll+0x120>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3318      	adds	r3, #24
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff f83a 	bl	8003204 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3304      	adds	r3, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff f835 	bl	8003204 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419e:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <xTaskResumeAll+0x124>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d903      	bls.n	80041ae <xTaskResumeAll+0x7e>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004254 <xTaskResumeAll+0x124>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4a27      	ldr	r2, [pc, #156]	@ (8004258 <xTaskResumeAll+0x128>)
 80041bc:	441a      	add	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f7fe ffc0 	bl	800314a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ce:	4b23      	ldr	r3, [pc, #140]	@ (800425c <xTaskResumeAll+0x12c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80041d8:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <xTaskResumeAll+0x130>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041de:	4b1c      	ldr	r3, [pc, #112]	@ (8004250 <xTaskResumeAll+0x120>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1cb      	bne.n	800417e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041ec:	f000 fb66 	bl	80048bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004264 <xTaskResumeAll+0x134>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041fc:	f000 f846 	bl	800428c <xTaskIncrementTick>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004206:	4b16      	ldr	r3, [pc, #88]	@ (8004260 <xTaskResumeAll+0x130>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f1      	bne.n	80041fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004218:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <xTaskResumeAll+0x134>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800421e:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <xTaskResumeAll+0x130>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004226:	2301      	movs	r3, #1
 8004228:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800422a:	4b0f      	ldr	r3, [pc, #60]	@ (8004268 <xTaskResumeAll+0x138>)
 800422c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800423a:	f001 f8ff 	bl	800543c <vPortExitCritical>

	return xAlreadyYielded;
 800423e:	68bb      	ldr	r3, [r7, #8]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000da8 	.word	0x20000da8
 800424c:	20000d80 	.word	0x20000d80
 8004250:	20000d40 	.word	0x20000d40
 8004254:	20000d88 	.word	0x20000d88
 8004258:	200008b0 	.word	0x200008b0
 800425c:	200008ac 	.word	0x200008ac
 8004260:	20000d94 	.word	0x20000d94
 8004264:	20000d90 	.word	0x20000d90
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <xTaskGetTickCount+0x1c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000d84 	.word	0x20000d84

0800428c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004296:	4b4f      	ldr	r3, [pc, #316]	@ (80043d4 <xTaskIncrementTick+0x148>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 8090 	bne.w	80043c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042a0:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <xTaskIncrementTick+0x14c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042a8:	4a4b      	ldr	r2, [pc, #300]	@ (80043d8 <xTaskIncrementTick+0x14c>)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d121      	bne.n	80042f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042b4:	4b49      	ldr	r3, [pc, #292]	@ (80043dc <xTaskIncrementTick+0x150>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	603b      	str	r3, [r7, #0]
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	e7fd      	b.n	80042d2 <xTaskIncrementTick+0x46>
 80042d6:	4b41      	ldr	r3, [pc, #260]	@ (80043dc <xTaskIncrementTick+0x150>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <xTaskIncrementTick+0x154>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3e      	ldr	r2, [pc, #248]	@ (80043dc <xTaskIncrementTick+0x150>)
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4a3e      	ldr	r2, [pc, #248]	@ (80043e0 <xTaskIncrementTick+0x154>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b3e      	ldr	r3, [pc, #248]	@ (80043e4 <xTaskIncrementTick+0x158>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	4a3c      	ldr	r2, [pc, #240]	@ (80043e4 <xTaskIncrementTick+0x158>)
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	f000 fae2 	bl	80048bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042f8:	4b3b      	ldr	r3, [pc, #236]	@ (80043e8 <xTaskIncrementTick+0x15c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d349      	bcc.n	8004396 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004302:	4b36      	ldr	r3, [pc, #216]	@ (80043dc <xTaskIncrementTick+0x150>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430c:	4b36      	ldr	r3, [pc, #216]	@ (80043e8 <xTaskIncrementTick+0x15c>)
 800430e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004312:	601a      	str	r2, [r3, #0]
					break;
 8004314:	e03f      	b.n	8004396 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004316:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <xTaskIncrementTick+0x150>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d203      	bcs.n	8004336 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800432e:	4a2e      	ldr	r2, [pc, #184]	@ (80043e8 <xTaskIncrementTick+0x15c>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004334:	e02f      	b.n	8004396 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe ff62 	bl	8003204 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3318      	adds	r3, #24
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe ff59 	bl	8003204 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004356:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <xTaskIncrementTick+0x160>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d903      	bls.n	8004366 <xTaskIncrementTick+0xda>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	4a22      	ldr	r2, [pc, #136]	@ (80043ec <xTaskIncrementTick+0x160>)
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4a1f      	ldr	r2, [pc, #124]	@ (80043f0 <xTaskIncrementTick+0x164>)
 8004374:	441a      	add	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7fe fee4 	bl	800314a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004386:	4b1b      	ldr	r3, [pc, #108]	@ (80043f4 <xTaskIncrementTick+0x168>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d3b8      	bcc.n	8004302 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004394:	e7b5      	b.n	8004302 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004396:	4b17      	ldr	r3, [pc, #92]	@ (80043f4 <xTaskIncrementTick+0x168>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	4914      	ldr	r1, [pc, #80]	@ (80043f0 <xTaskIncrementTick+0x164>)
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d901      	bls.n	80043b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80043ae:	2301      	movs	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043b2:	4b11      	ldr	r3, [pc, #68]	@ (80043f8 <xTaskIncrementTick+0x16c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e004      	b.n	80043ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043c0:	4b0e      	ldr	r3, [pc, #56]	@ (80043fc <xTaskIncrementTick+0x170>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a0d      	ldr	r2, [pc, #52]	@ (80043fc <xTaskIncrementTick+0x170>)
 80043c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043ca:	697b      	ldr	r3, [r7, #20]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000da8 	.word	0x20000da8
 80043d8:	20000d84 	.word	0x20000d84
 80043dc:	20000d38 	.word	0x20000d38
 80043e0:	20000d3c 	.word	0x20000d3c
 80043e4:	20000d98 	.word	0x20000d98
 80043e8:	20000da0 	.word	0x20000da0
 80043ec:	20000d88 	.word	0x20000d88
 80043f0:	200008b0 	.word	0x200008b0
 80043f4:	200008ac 	.word	0x200008ac
 80043f8:	20000d94 	.word	0x20000d94
 80043fc:	20000d90 	.word	0x20000d90

08004400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004406:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <vTaskSwitchContext+0xb4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800440e:	4b2a      	ldr	r3, [pc, #168]	@ (80044b8 <vTaskSwitchContext+0xb8>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004414:	e047      	b.n	80044a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004416:	4b28      	ldr	r3, [pc, #160]	@ (80044b8 <vTaskSwitchContext+0xb8>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441c:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <vTaskSwitchContext+0xbc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e011      	b.n	8004448 <vTaskSwitchContext+0x48>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <vTaskSwitchContext+0x42>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vTaskSwitchContext+0x3e>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b01      	subs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	491d      	ldr	r1, [pc, #116]	@ (80044c0 <vTaskSwitchContext+0xc0>)
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0e3      	beq.n	8004424 <vTaskSwitchContext+0x24>
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <vTaskSwitchContext+0xc0>)
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3308      	adds	r3, #8
 800447e:	429a      	cmp	r2, r3
 8004480:	d104      	bne.n	800448c <vTaskSwitchContext+0x8c>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4a0c      	ldr	r2, [pc, #48]	@ (80044c4 <vTaskSwitchContext+0xc4>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <vTaskSwitchContext+0xbc>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <vTaskSwitchContext+0xc4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3354      	adds	r3, #84	@ 0x54
 80044a2:	4a09      	ldr	r2, [pc, #36]	@ (80044c8 <vTaskSwitchContext+0xc8>)
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000da8 	.word	0x20000da8
 80044b8:	20000d94 	.word	0x20000d94
 80044bc:	20000d88 	.word	0x20000d88
 80044c0:	200008b0 	.word	0x200008b0
 80044c4:	200008ac 	.word	0x200008ac
 80044c8:	20000010 	.word	0x20000010

080044cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60fb      	str	r3, [r7, #12]
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044f4:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <vTaskPlaceOnEventList+0x48>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3318      	adds	r3, #24
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fe fe48 	bl	8003192 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004502:	2101      	movs	r1, #1
 8004504:	6838      	ldr	r0, [r7, #0]
 8004506:	f000 fa87 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	200008ac 	.word	0x200008ac

08004518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	617b      	str	r3, [r7, #20]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <vTaskPlaceOnEventListRestricted+0x54>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3318      	adds	r3, #24
 8004548:	4619      	mov	r1, r3
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7fe fdfd 	bl	800314a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800455a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	68b8      	ldr	r0, [r7, #8]
 8004560:	f000 fa5a 	bl	8004a18 <prvAddCurrentTaskToDelayedList>
	}
 8004564:	bf00      	nop
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	200008ac 	.word	0x200008ac

08004570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60fb      	str	r3, [r7, #12]
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3318      	adds	r3, #24
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fe2e 	bl	8003204 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <xTaskRemoveFromEventList+0xb0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d11d      	bne.n	80045ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe fe25 	bl	8003204 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045be:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <xTaskRemoveFromEventList+0xb4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d903      	bls.n	80045ce <xTaskRemoveFromEventList+0x5e>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	4a16      	ldr	r2, [pc, #88]	@ (8004624 <xTaskRemoveFromEventList+0xb4>)
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4a13      	ldr	r2, [pc, #76]	@ (8004628 <xTaskRemoveFromEventList+0xb8>)
 80045dc:	441a      	add	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f7fe fdb0 	bl	800314a <vListInsertEnd>
 80045ea:	e005      	b.n	80045f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3318      	adds	r3, #24
 80045f0:	4619      	mov	r1, r3
 80045f2:	480e      	ldr	r0, [pc, #56]	@ (800462c <xTaskRemoveFromEventList+0xbc>)
 80045f4:	f7fe fda9 	bl	800314a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <xTaskRemoveFromEventList+0xc0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	429a      	cmp	r2, r3
 8004604:	d905      	bls.n	8004612 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004606:	2301      	movs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800460a:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <xTaskRemoveFromEventList+0xc4>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e001      	b.n	8004616 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004616:	697b      	ldr	r3, [r7, #20]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000da8 	.word	0x20000da8
 8004624:	20000d88 	.word	0x20000d88
 8004628:	200008b0 	.word	0x200008b0
 800462c:	20000d40 	.word	0x20000d40
 8004630:	200008ac 	.word	0x200008ac
 8004634:	20000d94 	.word	0x20000d94

08004638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <vTaskInternalSetTimeOutState+0x24>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <vTaskInternalSetTimeOutState+0x28>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	605a      	str	r2, [r3, #4]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000d98 	.word	0x20000d98
 8004660:	20000d84 	.word	0x20000d84

08004664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	613b      	str	r3, [r7, #16]
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60fb      	str	r3, [r7, #12]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046aa:	f000 fe95 	bl	80053d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <xTaskCheckForTimeOut+0xc0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c6:	d102      	bne.n	80046ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e023      	b.n	8004716 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <xTaskCheckForTimeOut+0xc4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d007      	beq.n	80046ea <xTaskCheckForTimeOut+0x86>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e015      	b.n	8004716 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d20b      	bcs.n	800470c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff99 	bl	8004638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e004      	b.n	8004716 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004712:	2301      	movs	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004716:	f000 fe91 	bl	800543c <vPortExitCritical>

	return xReturn;
 800471a:	69fb      	ldr	r3, [r7, #28]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000d84 	.word	0x20000d84
 8004728:	20000d98 	.word	0x20000d98

0800472c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004730:	4b03      	ldr	r3, [pc, #12]	@ (8004740 <vTaskMissedYield+0x14>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000d94 	.word	0x20000d94

08004744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800474c:	f000 f852 	bl	80047f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004750:	4b06      	ldr	r3, [pc, #24]	@ (800476c <prvIdleTask+0x28>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d9f9      	bls.n	800474c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <prvIdleTask+0x2c>)
 800475a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004768:	e7f0      	b.n	800474c <prvIdleTask+0x8>
 800476a:	bf00      	nop
 800476c:	200008b0 	.word	0x200008b0
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	e00c      	b.n	800479a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a12      	ldr	r2, [pc, #72]	@ (80047d4 <prvInitialiseTaskLists+0x60>)
 800478c:	4413      	add	r3, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fcae 	bl	80030f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3301      	adds	r3, #1
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b37      	cmp	r3, #55	@ 0x37
 800479e:	d9ef      	bls.n	8004780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047a0:	480d      	ldr	r0, [pc, #52]	@ (80047d8 <prvInitialiseTaskLists+0x64>)
 80047a2:	f7fe fca5 	bl	80030f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047a6:	480d      	ldr	r0, [pc, #52]	@ (80047dc <prvInitialiseTaskLists+0x68>)
 80047a8:	f7fe fca2 	bl	80030f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047ac:	480c      	ldr	r0, [pc, #48]	@ (80047e0 <prvInitialiseTaskLists+0x6c>)
 80047ae:	f7fe fc9f 	bl	80030f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047b2:	480c      	ldr	r0, [pc, #48]	@ (80047e4 <prvInitialiseTaskLists+0x70>)
 80047b4:	f7fe fc9c 	bl	80030f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047b8:	480b      	ldr	r0, [pc, #44]	@ (80047e8 <prvInitialiseTaskLists+0x74>)
 80047ba:	f7fe fc99 	bl	80030f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <prvInitialiseTaskLists+0x78>)
 80047c0:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <prvInitialiseTaskLists+0x64>)
 80047c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <prvInitialiseTaskLists+0x7c>)
 80047c6:	4a05      	ldr	r2, [pc, #20]	@ (80047dc <prvInitialiseTaskLists+0x68>)
 80047c8:	601a      	str	r2, [r3, #0]
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200008b0 	.word	0x200008b0
 80047d8:	20000d10 	.word	0x20000d10
 80047dc:	20000d24 	.word	0x20000d24
 80047e0:	20000d40 	.word	0x20000d40
 80047e4:	20000d54 	.word	0x20000d54
 80047e8:	20000d6c 	.word	0x20000d6c
 80047ec:	20000d38 	.word	0x20000d38
 80047f0:	20000d3c 	.word	0x20000d3c

080047f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047fa:	e019      	b.n	8004830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047fc:	f000 fdec 	bl	80053d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004800:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <prvCheckTasksWaitingTermination+0x50>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fcf9 	bl	8003204 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <prvCheckTasksWaitingTermination+0x54>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	4a0b      	ldr	r2, [pc, #44]	@ (8004848 <prvCheckTasksWaitingTermination+0x54>)
 800481a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <prvCheckTasksWaitingTermination+0x58>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3b01      	subs	r3, #1
 8004822:	4a0a      	ldr	r2, [pc, #40]	@ (800484c <prvCheckTasksWaitingTermination+0x58>)
 8004824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004826:	f000 fe09 	bl	800543c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f810 	bl	8004850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <prvCheckTasksWaitingTermination+0x58>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e1      	bne.n	80047fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000d54 	.word	0x20000d54
 8004848:	20000d80 	.word	0x20000d80
 800484c:	20000d68 	.word	0x20000d68

08004850 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3354      	adds	r3, #84	@ 0x54
 800485c:	4618      	mov	r0, r3
 800485e:	f001 f8f9 	bl	8005a54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004868:	2b00      	cmp	r3, #0
 800486a:	d108      	bne.n	800487e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004870:	4618      	mov	r0, r3
 8004872:	f000 ffa1 	bl	80057b8 <vPortFree>
				vPortFree( pxTCB );
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 ff9e 	bl	80057b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800487c:	e019      	b.n	80048b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004884:	2b01      	cmp	r3, #1
 8004886:	d103      	bne.n	8004890 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ff95 	bl	80057b8 <vPortFree>
	}
 800488e:	e010      	b.n	80048b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004896:	2b02      	cmp	r3, #2
 8004898:	d00b      	beq.n	80048b2 <prvDeleteTCB+0x62>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60fb      	str	r3, [r7, #12]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <prvDeleteTCB+0x5e>
	}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c2:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <prvResetNextTaskUnblockTime+0x38>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <prvResetNextTaskUnblockTime+0x3c>)
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048d4:	e008      	b.n	80048e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <prvResetNextTaskUnblockTime+0x38>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <prvResetNextTaskUnblockTime+0x3c>)
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000d38 	.word	0x20000d38
 80048f8:	20000da0 	.word	0x20000da0

080048fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <xTaskGetSchedulerState+0x34>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800490a:	2301      	movs	r3, #1
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	e008      	b.n	8004922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004910:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <xTaskGetSchedulerState+0x38>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004918:	2302      	movs	r3, #2
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	e001      	b.n	8004922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004922:	687b      	ldr	r3, [r7, #4]
	}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	20000d8c 	.word	0x20000d8c
 8004934:	20000da8 	.word	0x20000da8

08004938 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d058      	beq.n	8004a00 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800494e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a0c <xTaskPriorityDisinherit+0xd4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d00b      	beq.n	8004970 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	60fb      	str	r3, [r7, #12]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	60bb      	str	r3, [r7, #8]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d02c      	beq.n	8004a00 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d128      	bne.n	8004a00 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fc26 	bl	8003204 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <xTaskPriorityDisinherit+0xd8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d903      	bls.n	80049e0 <xTaskPriorityDisinherit+0xa8>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004a10 <xTaskPriorityDisinherit+0xd8>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a09      	ldr	r2, [pc, #36]	@ (8004a14 <xTaskPriorityDisinherit+0xdc>)
 80049ee:	441a      	add	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7fe fba7 	bl	800314a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a00:	697b      	ldr	r3, [r7, #20]
	}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200008ac 	.word	0x200008ac
 8004a10:	20000d88 	.word	0x20000d88
 8004a14:	200008b0 	.word	0x200008b0

08004a18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a22:	4b21      	ldr	r3, [pc, #132]	@ (8004aa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a28:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe fbe8 	bl	8003204 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a3a:	d10a      	bne.n	8004a52 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a42:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4819      	ldr	r0, [pc, #100]	@ (8004ab0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a4c:	f7fe fb7d 	bl	800314a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a50:	e026      	b.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a5a:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d209      	bcs.n	8004a7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6a:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f7fe fb8b 	bl	8003192 <vListInsert>
}
 8004a7c:	e010      	b.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <prvAddCurrentTaskToDelayedList+0x94>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7fe fb81 	bl	8003192 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d202      	bcs.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000d84 	.word	0x20000d84
 8004aac:	200008ac 	.word	0x200008ac
 8004ab0:	20000d6c 	.word	0x20000d6c
 8004ab4:	20000d3c 	.word	0x20000d3c
 8004ab8:	20000d38 	.word	0x20000d38
 8004abc:	20000da0 	.word	0x20000da0

08004ac0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	@ 0x28
 8004ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aca:	f000 fb13 	bl	80050f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ace:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <xTimerCreateTimerTask+0x84>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d021      	beq.n	8004b1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ade:	1d3a      	adds	r2, r7, #4
 8004ae0:	f107 0108 	add.w	r1, r7, #8
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fae7 	bl	80030bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	9202      	str	r2, [sp, #8]
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	2302      	movs	r3, #2
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	460a      	mov	r2, r1
 8004b00:	4911      	ldr	r1, [pc, #68]	@ (8004b48 <xTimerCreateTimerTask+0x88>)
 8004b02:	4812      	ldr	r0, [pc, #72]	@ (8004b4c <xTimerCreateTimerTask+0x8c>)
 8004b04:	f7ff f8a2 	bl	8003c4c <xTaskCreateStatic>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <xTimerCreateTimerTask+0x90>)
 8004b0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b0e:	4b10      	ldr	r3, [pc, #64]	@ (8004b50 <xTimerCreateTimerTask+0x90>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b16:	2301      	movs	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b38:	697b      	ldr	r3, [r7, #20]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000ddc 	.word	0x20000ddc
 8004b48:	08005c0c 	.word	0x08005c0c
 8004b4c:	08004c8d 	.word	0x08004c8d
 8004b50:	20000de0 	.word	0x20000de0

08004b54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	@ 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	623b      	str	r3, [r7, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b84:	4b19      	ldr	r3, [pc, #100]	@ (8004bec <xTimerGenericCommand+0x98>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02a      	beq.n	8004be2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	dc18      	bgt.n	8004bd0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b9e:	f7ff fead 	bl	80048fc <xTaskGetSchedulerState>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d109      	bne.n	8004bbc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ba8:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <xTimerGenericCommand+0x98>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	f107 0110 	add.w	r1, r7, #16
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb4:	f7fe fc5a 	bl	800346c <xQueueGenericSend>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bba:	e012      	b.n	8004be2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <xTimerGenericCommand+0x98>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	f107 0110 	add.w	r1, r7, #16
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f7fe fc50 	bl	800346c <xQueueGenericSend>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bce:	e008      	b.n	8004be2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bd0:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <xTimerGenericCommand+0x98>)
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	f107 0110 	add.w	r1, r7, #16
 8004bd8:	2300      	movs	r3, #0
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	f7fe fd48 	bl	8003670 <xQueueGenericSendFromISR>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	@ 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000ddc 	.word	0x20000ddc

08004bf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfa:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <prvProcessExpiredTimer+0x98>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fafb 	bl	8003204 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d023      	beq.n	8004c64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	18d1      	adds	r1, r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	6978      	ldr	r0, [r7, #20]
 8004c2a:	f000 f8d5 	bl	8004dd8 <prvInsertTimerInActiveList>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c34:	2300      	movs	r3, #0
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	6978      	ldr	r0, [r7, #20]
 8004c40:	f7ff ff88 	bl	8004b54 <xTimerGenericCommand>
 8004c44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d114      	bne.n	8004c76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	6978      	ldr	r0, [r7, #20]
 8004c7c:	4798      	blx	r3
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000dd4 	.word	0x20000dd4

08004c8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f859 	bl	8004d50 <prvGetNextExpireTime>
 8004c9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f805 	bl	8004cb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004caa:	f000 f8d7 	bl	8004e5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cae:	bf00      	nop
 8004cb0:	e7f0      	b.n	8004c94 <prvTimerTask+0x8>
	...

08004cb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cbe:	f7ff fa29 	bl	8004114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cc2:	f107 0308 	add.w	r3, r7, #8
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f866 	bl	8004d98 <prvSampleTimeNow>
 8004ccc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d130      	bne.n	8004d36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <prvProcessTimerOrBlockTask+0x3c>
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d806      	bhi.n	8004cf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ce2:	f7ff fa25 	bl	8004130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff81 	bl	8004bf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cee:	e024      	b.n	8004d3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cf6:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <prvProcessTimerOrBlockTask+0x90>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <prvProcessTimerOrBlockTask+0x50>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <prvProcessTimerOrBlockTask+0x52>
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d08:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <prvProcessTimerOrBlockTask+0x94>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4619      	mov	r1, r3
 8004d16:	f7fe ff65 	bl	8003be4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d1a:	f7ff fa09 	bl	8004130 <xTaskResumeAll>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d24:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <prvProcessTimerOrBlockTask+0x98>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
}
 8004d34:	e001      	b.n	8004d3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d36:	f7ff f9fb 	bl	8004130 <xTaskResumeAll>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000dd8 	.word	0x20000dd8
 8004d48:	20000ddc 	.word	0x20000ddc
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d58:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <prvGetNextExpireTime+0x44>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <prvGetNextExpireTime+0x16>
 8004d62:	2201      	movs	r2, #1
 8004d64:	e000      	b.n	8004d68 <prvGetNextExpireTime+0x18>
 8004d66:	2200      	movs	r2, #0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d74:	4b07      	ldr	r3, [pc, #28]	@ (8004d94 <prvGetNextExpireTime+0x44>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e001      	b.n	8004d84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000dd4 	.word	0x20000dd4

08004d98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004da0:	f7ff fa64 	bl	800426c <xTaskGetTickCount>
 8004da4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <prvSampleTimeNow+0x3c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d205      	bcs.n	8004dbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004db0:	f000 f93a 	bl	8005028 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e002      	b.n	8004dc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004dc2:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <prvSampleTimeNow+0x3c>)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000de4 	.word	0x20000de4

08004dd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d812      	bhi.n	8004e24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e01b      	b.n	8004e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <prvInsertTimerInActiveList+0x7c>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f7fe f9b8 	bl	8003192 <vListInsert>
 8004e22:	e012      	b.n	8004e4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d206      	bcs.n	8004e3a <prvInsertTimerInActiveList+0x62>
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d302      	bcc.n	8004e3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e007      	b.n	8004e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e3a:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <prvInsertTimerInActiveList+0x80>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7fe f9a4 	bl	8003192 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000dd8 	.word	0x20000dd8
 8004e58:	20000dd4 	.word	0x20000dd4

08004e5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08e      	sub	sp, #56	@ 0x38
 8004e60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e62:	e0ce      	b.n	8005002 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da19      	bge.n	8004e9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10b      	bne.n	8004e8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	61fb      	str	r3, [r7, #28]
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	e7fd      	b.n	8004e8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e94:	6850      	ldr	r0, [r2, #4]
 8004e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e98:	6892      	ldr	r2, [r2, #8]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f2c0 80ae 	blt.w	8005002 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe f9a4 	bl	8003204 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ff6a 	bl	8004d98 <prvSampleTimeNow>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	f200 8097 	bhi.w	8004ffc <prvProcessReceivedCommands+0x1a0>
 8004ece:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <prvProcessReceivedCommands+0x78>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004efd 	.word	0x08004efd
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004efd 	.word	0x08004efd
 8004ee0:	08004f73 	.word	0x08004f73
 8004ee4:	08004f87 	.word	0x08004f87
 8004ee8:	08004fd3 	.word	0x08004fd3
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004efd 	.word	0x08004efd
 8004ef4:	08004f73 	.word	0x08004f73
 8004ef8:	08004f87 	.word	0x08004f87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	18d1      	adds	r1, r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f1c:	f7ff ff5c 	bl	8004dd8 <prvInsertTimerInActiveList>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d06c      	beq.n	8005000 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d061      	beq.n	8005000 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	441a      	add	r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f4e:	f7ff fe01 	bl	8004b54 <xTimerGenericCommand>
 8004f52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d152      	bne.n	8005000 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	61bb      	str	r3, [r7, #24]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f84:	e03d      	b.n	8005002 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	617b      	str	r3, [r7, #20]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	18d1      	adds	r1, r2, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fcc:	f7ff ff04 	bl	8004dd8 <prvInsertTimerInActiveList>
					break;
 8004fd0:	e017      	b.n	8005002 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fe2:	f000 fbe9 	bl	80057b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fe6:	e00c      	b.n	8005002 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ffa:	e002      	b.n	8005002 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <prvProcessReceivedCommands+0x1a6>
					break;
 8005000:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005002:	4b08      	ldr	r3, [pc, #32]	@ (8005024 <prvProcessReceivedCommands+0x1c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	1d39      	adds	r1, r7, #4
 8005008:	2200      	movs	r2, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fbce 	bl	80037ac <xQueueReceive>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f47f af26 	bne.w	8004e64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	3730      	adds	r7, #48	@ 0x30
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000ddc 	.word	0x20000ddc

08005028 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800502e:	e049      	b.n	80050c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005030:	4b2e      	ldr	r3, [pc, #184]	@ (80050ec <prvSwitchTimerLists+0xc4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503a:	4b2c      	ldr	r3, [pc, #176]	@ (80050ec <prvSwitchTimerLists+0xc4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3304      	adds	r3, #4
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe f8db 	bl	8003204 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02f      	beq.n	80050c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	429a      	cmp	r2, r3
 8005074:	d90e      	bls.n	8005094 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005082:	4b1a      	ldr	r3, [pc, #104]	@ (80050ec <prvSwitchTimerLists+0xc4>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3304      	adds	r3, #4
 800508a:	4619      	mov	r1, r3
 800508c:	4610      	mov	r0, r2
 800508e:	f7fe f880 	bl	8003192 <vListInsert>
 8005092:	e017      	b.n	80050c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005094:	2300      	movs	r3, #0
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2300      	movs	r3, #0
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	2100      	movs	r1, #0
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff fd58 	bl	8004b54 <xTimerGenericCommand>
 80050a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	603b      	str	r3, [r7, #0]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050c4:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <prvSwitchTimerLists+0xc4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1b0      	bne.n	8005030 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050ce:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <prvSwitchTimerLists+0xc4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050d4:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <prvSwitchTimerLists+0xc8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a04      	ldr	r2, [pc, #16]	@ (80050ec <prvSwitchTimerLists+0xc4>)
 80050da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050dc:	4a04      	ldr	r2, [pc, #16]	@ (80050f0 <prvSwitchTimerLists+0xc8>)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6013      	str	r3, [r2, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000dd4 	.word	0x20000dd4
 80050f0:	20000dd8 	.word	0x20000dd8

080050f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050fa:	f000 f96d 	bl	80053d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050fe:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <prvCheckForValidListAndQueue+0x60>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d120      	bne.n	8005148 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005106:	4814      	ldr	r0, [pc, #80]	@ (8005158 <prvCheckForValidListAndQueue+0x64>)
 8005108:	f7fd fff2 	bl	80030f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800510c:	4813      	ldr	r0, [pc, #76]	@ (800515c <prvCheckForValidListAndQueue+0x68>)
 800510e:	f7fd ffef 	bl	80030f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005112:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <prvCheckForValidListAndQueue+0x6c>)
 8005114:	4a10      	ldr	r2, [pc, #64]	@ (8005158 <prvCheckForValidListAndQueue+0x64>)
 8005116:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005118:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <prvCheckForValidListAndQueue+0x70>)
 800511a:	4a10      	ldr	r2, [pc, #64]	@ (800515c <prvCheckForValidListAndQueue+0x68>)
 800511c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800511e:	2300      	movs	r3, #0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <prvCheckForValidListAndQueue+0x74>)
 8005124:	4a11      	ldr	r2, [pc, #68]	@ (800516c <prvCheckForValidListAndQueue+0x78>)
 8005126:	2110      	movs	r1, #16
 8005128:	200a      	movs	r0, #10
 800512a:	f7fe f8ff 	bl	800332c <xQueueGenericCreateStatic>
 800512e:	4603      	mov	r3, r0
 8005130:	4a08      	ldr	r2, [pc, #32]	@ (8005154 <prvCheckForValidListAndQueue+0x60>)
 8005132:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005134:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <prvCheckForValidListAndQueue+0x60>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800513c:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <prvCheckForValidListAndQueue+0x60>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	490b      	ldr	r1, [pc, #44]	@ (8005170 <prvCheckForValidListAndQueue+0x7c>)
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fd24 	bl	8003b90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005148:	f000 f978 	bl	800543c <vPortExitCritical>
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000ddc 	.word	0x20000ddc
 8005158:	20000dac 	.word	0x20000dac
 800515c:	20000dc0 	.word	0x20000dc0
 8005160:	20000dd4 	.word	0x20000dd4
 8005164:	20000dd8 	.word	0x20000dd8
 8005168:	20000e88 	.word	0x20000e88
 800516c:	20000de8 	.word	0x20000de8
 8005170:	08005c14 	.word	0x08005c14

08005174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3b04      	subs	r3, #4
 8005184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800518c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b04      	subs	r3, #4
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051a4:	4a0c      	ldr	r2, [pc, #48]	@ (80051d8 <pxPortInitialiseStack+0x64>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b14      	subs	r3, #20
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b04      	subs	r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f06f 0202 	mvn.w	r2, #2
 80051c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3b20      	subs	r3, #32
 80051c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	080051dd 	.word	0x080051dd

080051dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <prvTaskExitError+0x58>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ee:	d00b      	beq.n	8005208 <prvTaskExitError+0x2c>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60fb      	str	r3, [r7, #12]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <prvTaskExitError+0x28>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60bb      	str	r3, [r7, #8]
}
 800521a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800521c:	bf00      	nop
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0fc      	beq.n	800521e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
	...

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	4770      	bx	lr
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst2>:
 8005260:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005268:	4808      	ldr	r0, [pc, #32]	@ (800528c <prvPortStartFirstTask+0x24>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8814 	msr	CONTROL, r0
 800527a:	b662      	cpsie	i
 800527c:	b661      	cpsie	f
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	df00      	svc	0
 8005288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800528a:	bf00      	nop
 800528c:	e000ed08 	.word	0xe000ed08

08005290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005296:	4b47      	ldr	r3, [pc, #284]	@ (80053b4 <xPortStartScheduler+0x124>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <xPortStartScheduler+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10b      	bne.n	80052b8 <xPortStartScheduler+0x28>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60fb      	str	r3, [r7, #12]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052b8:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <xPortStartScheduler+0x124>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3f      	ldr	r2, [pc, #252]	@ (80053bc <xPortStartScheduler+0x12c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10b      	bne.n	80052da <xPortStartScheduler+0x4a>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	613b      	str	r3, [r7, #16]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <xPortStartScheduler+0x130>)
 80052dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	22ff      	movs	r2, #255	@ 0xff
 80052ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4b31      	ldr	r3, [pc, #196]	@ (80053c4 <xPortStartScheduler+0x134>)
 8005300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005302:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005304:	2207      	movs	r2, #7
 8005306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005308:	e009      	b.n	800531e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <xPortStartScheduler+0x138>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	4a2d      	ldr	r2, [pc, #180]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
 800531c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d0ef      	beq.n	800530a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800532a:	4b27      	ldr	r3, [pc, #156]	@ (80053c8 <xPortStartScheduler+0x138>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	d00b      	beq.n	800534e <xPortStartScheduler+0xbe>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	e7fd      	b.n	800534a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800534e:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005358:	4b1b      	ldr	r3, [pc, #108]	@ (80053c8 <xPortStartScheduler+0x138>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005360:	4a19      	ldr	r2, [pc, #100]	@ (80053c8 <xPortStartScheduler+0x138>)
 8005362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800536c:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <xPortStartScheduler+0x13c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a16      	ldr	r2, [pc, #88]	@ (80053cc <xPortStartScheduler+0x13c>)
 8005372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005378:	4b14      	ldr	r3, [pc, #80]	@ (80053cc <xPortStartScheduler+0x13c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <xPortStartScheduler+0x13c>)
 800537e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005384:	f000 f8da 	bl	800553c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005388:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <xPortStartScheduler+0x140>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800538e:	f000 f8f9 	bl	8005584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <xPortStartScheduler+0x144>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a0f      	ldr	r2, [pc, #60]	@ (80053d4 <xPortStartScheduler+0x144>)
 8005398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800539c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800539e:	f7ff ff63 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053a2:	f7ff f82d 	bl	8004400 <vTaskSwitchContext>
	prvTaskExitError();
 80053a6:	f7ff ff19 	bl	80051dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	e000ed00 	.word	0xe000ed00
 80053b8:	410fc271 	.word	0x410fc271
 80053bc:	410fc270 	.word	0x410fc270
 80053c0:	e000e400 	.word	0xe000e400
 80053c4:	20000ed8 	.word	0x20000ed8
 80053c8:	20000edc 	.word	0x20000edc
 80053cc:	e000ed20 	.word	0xe000ed20
 80053d0:	2000000c 	.word	0x2000000c
 80053d4:	e000ef34 	.word	0xe000ef34

080053d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053f2:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <vPortEnterCritical+0x5c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d110      	bne.n	8005426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005404:	4b0c      	ldr	r3, [pc, #48]	@ (8005438 <vPortEnterCritical+0x60>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <vPortEnterCritical+0x4e>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	603b      	str	r3, [r7, #0]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <vPortEnterCritical+0x4a>
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005442:	4b12      	ldr	r3, [pc, #72]	@ (800548c <vPortExitCritical+0x50>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10b      	bne.n	8005462 <vPortExitCritical+0x26>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005462:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <vPortExitCritical+0x50>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3b01      	subs	r3, #1
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <vPortExitCritical+0x50>)
 800546a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800546c:	4b07      	ldr	r3, [pc, #28]	@ (800548c <vPortExitCritical+0x50>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <vPortExitCritical+0x44>
 8005474:	2300      	movs	r3, #0
 8005476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f383 8811 	msr	BASEPRI, r3
}
 800547e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	2000000c 	.word	0x2000000c

08005490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005490:	f3ef 8009 	mrs	r0, PSP
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <pxCurrentTCBConst>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f01e 0f10 	tst.w	lr, #16
 80054a0:	bf08      	it	eq
 80054a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054b4:	f380 8811 	msr	BASEPRI, r0
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f7fe ff9e 	bl	8004400 <vTaskSwitchContext>
 80054c4:	f04f 0000 	mov.w	r0, #0
 80054c8:	f380 8811 	msr	BASEPRI, r0
 80054cc:	bc09      	pop	{r0, r3}
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6808      	ldr	r0, [r1, #0]
 80054d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d6:	f01e 0f10 	tst.w	lr, #16
 80054da:	bf08      	it	eq
 80054dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054e0:	f380 8809 	msr	PSP, r0
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	f3af 8000 	nop.w

080054f0 <pxCurrentTCBConst>:
 80054f0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
}
 8005510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005512:	f7fe febb 	bl	800428c <xTaskIncrementTick>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <xPortSysTickHandler+0x40>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f383 8811 	msr	BASEPRI, r3
}
 800552e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <vPortSetupTimerInterrupt+0x38>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <vPortSetupTimerInterrupt+0x3c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <vPortSetupTimerInterrupt+0x40>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <vPortSetupTimerInterrupt+0x44>)
 800555a:	3b01      	subs	r3, #1
 800555c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <vPortSetupTimerInterrupt+0x34>)
 8005560:	2207      	movs	r2, #7
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	e000e010 	.word	0xe000e010
 8005574:	e000e018 	.word	0xe000e018
 8005578:	20000000 	.word	0x20000000
 800557c:	10624dd3 	.word	0x10624dd3
 8005580:	e000e014 	.word	0xe000e014

08005584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005594 <vPortEnableVFP+0x10>
 8005588:	6801      	ldr	r1, [r0, #0]
 800558a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800558e:	6001      	str	r1, [r0, #0]
 8005590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005592:	bf00      	nop
 8005594:	e000ed88 	.word	0xe000ed88

08005598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800559e:	f3ef 8305 	mrs	r3, IPSR
 80055a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b0f      	cmp	r3, #15
 80055a8:	d915      	bls.n	80055d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055aa:	4a18      	ldr	r2, [pc, #96]	@ (800560c <vPortValidateInterruptPriority+0x74>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055b4:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <vPortValidateInterruptPriority+0x78>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	7afa      	ldrb	r2, [r7, #11]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d20b      	bcs.n	80055d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <vPortValidateInterruptPriority+0x7c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055de:	4b0e      	ldr	r3, [pc, #56]	@ (8005618 <vPortValidateInterruptPriority+0x80>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d90b      	bls.n	80055fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	603b      	str	r3, [r7, #0]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vPortValidateInterruptPriority+0x62>
	}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000e3f0 	.word	0xe000e3f0
 8005610:	20000ed8 	.word	0x20000ed8
 8005614:	e000ed0c 	.word	0xe000ed0c
 8005618:	20000edc 	.word	0x20000edc

0800561c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	@ 0x28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005628:	f7fe fd74 	bl	8004114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800562c:	4b5c      	ldr	r3, [pc, #368]	@ (80057a0 <pvPortMalloc+0x184>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005634:	f000 f924 	bl	8005880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005638:	4b5a      	ldr	r3, [pc, #360]	@ (80057a4 <pvPortMalloc+0x188>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 8095 	bne.w	8005770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01e      	beq.n	800568a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800564c:	2208      	movs	r2, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f023 0307 	bic.w	r3, r3, #7
 8005664:	3308      	adds	r3, #8
 8005666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <pvPortMalloc+0x6e>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	617b      	str	r3, [r7, #20]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d06f      	beq.n	8005770 <pvPortMalloc+0x154>
 8005690:	4b45      	ldr	r3, [pc, #276]	@ (80057a8 <pvPortMalloc+0x18c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d86a      	bhi.n	8005770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800569a:	4b44      	ldr	r3, [pc, #272]	@ (80057ac <pvPortMalloc+0x190>)
 800569c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800569e:	4b43      	ldr	r3, [pc, #268]	@ (80057ac <pvPortMalloc+0x190>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056a4:	e004      	b.n	80056b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d903      	bls.n	80056c2 <pvPortMalloc+0xa6>
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056c2:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <pvPortMalloc+0x184>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d051      	beq.n	8005770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2208      	movs	r2, #8
 80056d2:	4413      	add	r3, r2
 80056d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	1ad2      	subs	r2, r2, r3
 80056e6:	2308      	movs	r3, #8
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d920      	bls.n	8005730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4413      	add	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <pvPortMalloc+0xfc>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800572a:	69b8      	ldr	r0, [r7, #24]
 800572c:	f000 f90a 	bl	8005944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <pvPortMalloc+0x18c>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <pvPortMalloc+0x18c>)
 800573c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800573e:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <pvPortMalloc+0x18c>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <pvPortMalloc+0x194>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d203      	bcs.n	8005752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800574a:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <pvPortMalloc+0x18c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a18      	ldr	r2, [pc, #96]	@ (80057b0 <pvPortMalloc+0x194>)
 8005750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4b13      	ldr	r3, [pc, #76]	@ (80057a4 <pvPortMalloc+0x188>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	431a      	orrs	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005766:	4b13      	ldr	r3, [pc, #76]	@ (80057b4 <pvPortMalloc+0x198>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	4a11      	ldr	r2, [pc, #68]	@ (80057b4 <pvPortMalloc+0x198>)
 800576e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005770:	f7fe fcde 	bl	8004130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <pvPortMalloc+0x17a>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <pvPortMalloc+0x176>
	return pvReturn;
 8005796:	69fb      	ldr	r3, [r7, #28]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3728      	adds	r7, #40	@ 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20004ae8 	.word	0x20004ae8
 80057a4:	20004afc 	.word	0x20004afc
 80057a8:	20004aec 	.word	0x20004aec
 80057ac:	20004ae0 	.word	0x20004ae0
 80057b0:	20004af0 	.word	0x20004af0
 80057b4:	20004af4 	.word	0x20004af4

080057b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d04f      	beq.n	800586a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057ca:	2308      	movs	r3, #8
 80057cc:	425b      	negs	r3, r3
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	4b25      	ldr	r3, [pc, #148]	@ (8005874 <vPortFree+0xbc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <vPortFree+0x46>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	60fb      	str	r3, [r7, #12]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <vPortFree+0x66>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60bb      	str	r3, [r7, #8]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4b14      	ldr	r3, [pc, #80]	@ (8005874 <vPortFree+0xbc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11a      	bne.n	800586a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <vPortFree+0xbc>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005844:	f7fe fc66 	bl	8004114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <vPortFree+0xc0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4413      	add	r3, r2
 8005852:	4a09      	ldr	r2, [pc, #36]	@ (8005878 <vPortFree+0xc0>)
 8005854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005856:	6938      	ldr	r0, [r7, #16]
 8005858:	f000 f874 	bl	8005944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800585c:	4b07      	ldr	r3, [pc, #28]	@ (800587c <vPortFree+0xc4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	4a06      	ldr	r2, [pc, #24]	@ (800587c <vPortFree+0xc4>)
 8005864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005866:	f7fe fc63 	bl	8004130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20004afc 	.word	0x20004afc
 8005878:	20004aec 	.word	0x20004aec
 800587c:	20004af8 	.word	0x20004af8

08005880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005886:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800588a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800588c:	4b27      	ldr	r3, [pc, #156]	@ (800592c <prvHeapInit+0xac>)
 800588e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3307      	adds	r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0307 	bic.w	r3, r3, #7
 80058a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <prvHeapInit+0xac>)
 80058b0:	4413      	add	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <prvHeapInit+0xb0>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058be:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <prvHeapInit+0xb0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	4413      	add	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058cc:	2208      	movs	r2, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <prvHeapInit+0xb4>)
 80058e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058e2:	4b14      	ldr	r3, [pc, #80]	@ (8005934 <prvHeapInit+0xb4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ea:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <prvHeapInit+0xb4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	1ad2      	subs	r2, r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005900:	4b0c      	ldr	r3, [pc, #48]	@ (8005934 <prvHeapInit+0xb4>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a0a      	ldr	r2, [pc, #40]	@ (8005938 <prvHeapInit+0xb8>)
 800590e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a09      	ldr	r2, [pc, #36]	@ (800593c <prvHeapInit+0xbc>)
 8005916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005918:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <prvHeapInit+0xc0>)
 800591a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800591e:	601a      	str	r2, [r3, #0]
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000ee0 	.word	0x20000ee0
 8005930:	20004ae0 	.word	0x20004ae0
 8005934:	20004ae8 	.word	0x20004ae8
 8005938:	20004af0 	.word	0x20004af0
 800593c:	20004aec 	.word	0x20004aec
 8005940:	20004afc 	.word	0x20004afc

08005944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800594c:	4b28      	ldr	r3, [pc, #160]	@ (80059f0 <prvInsertBlockIntoFreeList+0xac>)
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <prvInsertBlockIntoFreeList+0x14>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	d8f7      	bhi.n	8005952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	4413      	add	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d108      	bne.n	8005986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	441a      	add	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d118      	bne.n	80059cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <prvInsertBlockIntoFreeList+0xb0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d00d      	beq.n	80059c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e008      	b.n	80059d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059c2:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <prvInsertBlockIntoFreeList+0xb0>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e003      	b.n	80059d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d002      	beq.n	80059e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20004ae0 	.word	0x20004ae0
 80059f4:	20004ae8 	.word	0x20004ae8

080059f8 <memset>:
 80059f8:	4402      	add	r2, r0
 80059fa:	4603      	mov	r3, r0
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d100      	bne.n	8005a02 <memset+0xa>
 8005a00:	4770      	bx	lr
 8005a02:	f803 1b01 	strb.w	r1, [r3], #1
 8005a06:	e7f9      	b.n	80059fc <memset+0x4>

08005a08 <__libc_init_array>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a40 <__libc_init_array+0x38>)
 8005a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a44 <__libc_init_array+0x3c>)
 8005a0e:	1b64      	subs	r4, r4, r5
 8005a10:	10a4      	asrs	r4, r4, #2
 8005a12:	2600      	movs	r6, #0
 8005a14:	42a6      	cmp	r6, r4
 8005a16:	d109      	bne.n	8005a2c <__libc_init_array+0x24>
 8005a18:	4d0b      	ldr	r5, [pc, #44]	@ (8005a48 <__libc_init_array+0x40>)
 8005a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a4c <__libc_init_array+0x44>)
 8005a1c:	f000 f8dc 	bl	8005bd8 <_init>
 8005a20:	1b64      	subs	r4, r4, r5
 8005a22:	10a4      	asrs	r4, r4, #2
 8005a24:	2600      	movs	r6, #0
 8005a26:	42a6      	cmp	r6, r4
 8005a28:	d105      	bne.n	8005a36 <__libc_init_array+0x2e>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a30:	4798      	blx	r3
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7ee      	b.n	8005a14 <__libc_init_array+0xc>
 8005a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3a:	4798      	blx	r3
 8005a3c:	3601      	adds	r6, #1
 8005a3e:	e7f2      	b.n	8005a26 <__libc_init_array+0x1e>
 8005a40:	08005c84 	.word	0x08005c84
 8005a44:	08005c84 	.word	0x08005c84
 8005a48:	08005c84 	.word	0x08005c84
 8005a4c:	08005c88 	.word	0x08005c88

08005a50 <__retarget_lock_acquire_recursive>:
 8005a50:	4770      	bx	lr

08005a52 <__retarget_lock_release_recursive>:
 8005a52:	4770      	bx	lr

08005a54 <_reclaim_reent>:
 8005a54:	4b2d      	ldr	r3, [pc, #180]	@ (8005b0c <_reclaim_reent+0xb8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4283      	cmp	r3, r0
 8005a5a:	b570      	push	{r4, r5, r6, lr}
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	d053      	beq.n	8005b08 <_reclaim_reent+0xb4>
 8005a60:	69c3      	ldr	r3, [r0, #28]
 8005a62:	b31b      	cbz	r3, 8005aac <_reclaim_reent+0x58>
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	b163      	cbz	r3, 8005a82 <_reclaim_reent+0x2e>
 8005a68:	2500      	movs	r5, #0
 8005a6a:	69e3      	ldr	r3, [r4, #28]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	5959      	ldr	r1, [r3, r5]
 8005a70:	b9b1      	cbnz	r1, 8005aa0 <_reclaim_reent+0x4c>
 8005a72:	3504      	adds	r5, #4
 8005a74:	2d80      	cmp	r5, #128	@ 0x80
 8005a76:	d1f8      	bne.n	8005a6a <_reclaim_reent+0x16>
 8005a78:	69e3      	ldr	r3, [r4, #28]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	68d9      	ldr	r1, [r3, #12]
 8005a7e:	f000 f855 	bl	8005b2c <_free_r>
 8005a82:	69e3      	ldr	r3, [r4, #28]
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	b111      	cbz	r1, 8005a8e <_reclaim_reent+0x3a>
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 f84f 	bl	8005b2c <_free_r>
 8005a8e:	69e3      	ldr	r3, [r4, #28]
 8005a90:	689d      	ldr	r5, [r3, #8]
 8005a92:	b15d      	cbz	r5, 8005aac <_reclaim_reent+0x58>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4620      	mov	r0, r4
 8005a98:	682d      	ldr	r5, [r5, #0]
 8005a9a:	f000 f847 	bl	8005b2c <_free_r>
 8005a9e:	e7f8      	b.n	8005a92 <_reclaim_reent+0x3e>
 8005aa0:	680e      	ldr	r6, [r1, #0]
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 f842 	bl	8005b2c <_free_r>
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	e7e1      	b.n	8005a70 <_reclaim_reent+0x1c>
 8005aac:	6961      	ldr	r1, [r4, #20]
 8005aae:	b111      	cbz	r1, 8005ab6 <_reclaim_reent+0x62>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f83b 	bl	8005b2c <_free_r>
 8005ab6:	69e1      	ldr	r1, [r4, #28]
 8005ab8:	b111      	cbz	r1, 8005ac0 <_reclaim_reent+0x6c>
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f836 	bl	8005b2c <_free_r>
 8005ac0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005ac2:	b111      	cbz	r1, 8005aca <_reclaim_reent+0x76>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f831 	bl	8005b2c <_free_r>
 8005aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005acc:	b111      	cbz	r1, 8005ad4 <_reclaim_reent+0x80>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f82c 	bl	8005b2c <_free_r>
 8005ad4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005ad6:	b111      	cbz	r1, 8005ade <_reclaim_reent+0x8a>
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 f827 	bl	8005b2c <_free_r>
 8005ade:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ae0:	b111      	cbz	r1, 8005ae8 <_reclaim_reent+0x94>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 f822 	bl	8005b2c <_free_r>
 8005ae8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005aea:	b111      	cbz	r1, 8005af2 <_reclaim_reent+0x9e>
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f81d 	bl	8005b2c <_free_r>
 8005af2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005af4:	b111      	cbz	r1, 8005afc <_reclaim_reent+0xa8>
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 f818 	bl	8005b2c <_free_r>
 8005afc:	6a23      	ldr	r3, [r4, #32]
 8005afe:	b11b      	cbz	r3, 8005b08 <_reclaim_reent+0xb4>
 8005b00:	4620      	mov	r0, r4
 8005b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b06:	4718      	bx	r3
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000010 	.word	0x20000010

08005b10 <memcpy>:
 8005b10:	440a      	add	r2, r1
 8005b12:	4291      	cmp	r1, r2
 8005b14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005b18:	d100      	bne.n	8005b1c <memcpy+0xc>
 8005b1a:	4770      	bx	lr
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b26:	4291      	cmp	r1, r2
 8005b28:	d1f9      	bne.n	8005b1e <memcpy+0xe>
 8005b2a:	bd10      	pop	{r4, pc}

08005b2c <_free_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4605      	mov	r5, r0
 8005b30:	2900      	cmp	r1, #0
 8005b32:	d041      	beq.n	8005bb8 <_free_r+0x8c>
 8005b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b38:	1f0c      	subs	r4, r1, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bfb8      	it	lt
 8005b3e:	18e4      	addlt	r4, r4, r3
 8005b40:	f000 f83e 	bl	8005bc0 <__malloc_lock>
 8005b44:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <_free_r+0x90>)
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	b933      	cbnz	r3, 8005b58 <_free_r+0x2c>
 8005b4a:	6063      	str	r3, [r4, #4]
 8005b4c:	6014      	str	r4, [r2, #0]
 8005b4e:	4628      	mov	r0, r5
 8005b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b54:	f000 b83a 	b.w	8005bcc <__malloc_unlock>
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	d908      	bls.n	8005b6e <_free_r+0x42>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	1821      	adds	r1, r4, r0
 8005b60:	428b      	cmp	r3, r1
 8005b62:	bf01      	itttt	eq
 8005b64:	6819      	ldreq	r1, [r3, #0]
 8005b66:	685b      	ldreq	r3, [r3, #4]
 8005b68:	1809      	addeq	r1, r1, r0
 8005b6a:	6021      	streq	r1, [r4, #0]
 8005b6c:	e7ed      	b.n	8005b4a <_free_r+0x1e>
 8005b6e:	461a      	mov	r2, r3
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	b10b      	cbz	r3, 8005b78 <_free_r+0x4c>
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	d9fa      	bls.n	8005b6e <_free_r+0x42>
 8005b78:	6811      	ldr	r1, [r2, #0]
 8005b7a:	1850      	adds	r0, r2, r1
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d10b      	bne.n	8005b98 <_free_r+0x6c>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	4401      	add	r1, r0
 8005b84:	1850      	adds	r0, r2, r1
 8005b86:	4283      	cmp	r3, r0
 8005b88:	6011      	str	r1, [r2, #0]
 8005b8a:	d1e0      	bne.n	8005b4e <_free_r+0x22>
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	4408      	add	r0, r1
 8005b94:	6010      	str	r0, [r2, #0]
 8005b96:	e7da      	b.n	8005b4e <_free_r+0x22>
 8005b98:	d902      	bls.n	8005ba0 <_free_r+0x74>
 8005b9a:	230c      	movs	r3, #12
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	e7d6      	b.n	8005b4e <_free_r+0x22>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	1821      	adds	r1, r4, r0
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	bf04      	itt	eq
 8005ba8:	6819      	ldreq	r1, [r3, #0]
 8005baa:	685b      	ldreq	r3, [r3, #4]
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	bf04      	itt	eq
 8005bb0:	1809      	addeq	r1, r1, r0
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	6054      	str	r4, [r2, #4]
 8005bb6:	e7ca      	b.n	8005b4e <_free_r+0x22>
 8005bb8:	bd38      	pop	{r3, r4, r5, pc}
 8005bba:	bf00      	nop
 8005bbc:	20004c3c 	.word	0x20004c3c

08005bc0 <__malloc_lock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	@ (8005bc8 <__malloc_lock+0x8>)
 8005bc2:	f7ff bf45 	b.w	8005a50 <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	20004c38 	.word	0x20004c38

08005bcc <__malloc_unlock>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	@ (8005bd4 <__malloc_unlock+0x8>)
 8005bce:	f7ff bf40 	b.w	8005a52 <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	20004c38 	.word	0x20004c38

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
