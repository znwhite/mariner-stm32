
free_rtos_hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080075c0  080075c0  000085c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c8  080079c8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079c8  080079c8  000089c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d0  080079d0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d0  080079d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079d4  080079d4  000089d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080079d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005094  20000060  08007a38  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050f4  08007a38  000090f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ad8  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003616  00000000  00000000  00021b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00025180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c6  00000000  00000000  00026710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b71  00000000  00000000  000277d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018937  00000000  00000000  0002b347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbe1a  00000000  00000000  00043c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fa98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006044  00000000  00000000  0011fadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00125b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075a8 	.word	0x080075a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080075a8 	.word	0x080075a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fef6 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f846 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9b2 	bl	8000950 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005ec:	f000 f938 	bl	8000860 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005f0:	f000 f8dc 	bl	80007ac <MX_TIM2_Init>
  MX_I2C1_Init();
 80005f4:	f000 f8ac 	bl	8000750 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f003 fd12 	bl	8004020 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80005fc:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <main+0x68>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4811      	ldr	r0, [pc, #68]	@ (8000648 <main+0x6c>)
 8000602:	f003 fd57 	bl	80040b4 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a10      	ldr	r2, [pc, #64]	@ (800064c <main+0x70>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of motorTest01 */
  motorTest01Handle = osThreadNew(StartMotorTest01, NULL, &motorTest01_attributes);
 800060c:	4a10      	ldr	r2, [pc, #64]	@ (8000650 <main+0x74>)
 800060e:	2100      	movs	r1, #0
 8000610:	4810      	ldr	r0, [pc, #64]	@ (8000654 <main+0x78>)
 8000612:	f003 fd4f 	bl	80040b4 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0f      	ldr	r2, [pc, #60]	@ (8000658 <main+0x7c>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of servoTest01 */
  servoTest01Handle = osThreadNew(StartServoTest01, NULL, &servoTest01_attributes);
 800061c:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <main+0x80>)
 800061e:	2100      	movs	r1, #0
 8000620:	480f      	ldr	r0, [pc, #60]	@ (8000660 <main+0x84>)
 8000622:	f003 fd47 	bl	80040b4 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <main+0x88>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of oledDisplay01 */
  oledDisplay01Handle = osThreadNew(StartOledDisplay01, NULL, &oledDisplay01_attributes);
 800062c:	4a0e      	ldr	r2, [pc, #56]	@ (8000668 <main+0x8c>)
 800062e:	2100      	movs	r1, #0
 8000630:	480e      	ldr	r0, [pc, #56]	@ (800066c <main+0x90>)
 8000632:	f003 fd3f 	bl	80040b4 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <main+0x94>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f003 fd14 	bl	8004068 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x64>
 8000644:	08007614 	.word	0x08007614
 8000648:	08000a4d 	.word	0x08000a4d
 800064c:	20000160 	.word	0x20000160
 8000650:	08007638 	.word	0x08007638
 8000654:	08000a6d 	.word	0x08000a6d
 8000658:	20000164 	.word	0x20000164
 800065c:	0800765c 	.word	0x0800765c
 8000660:	08000acd 	.word	0x08000acd
 8000664:	20000168 	.word	0x20000168
 8000668:	08007680 	.word	0x08007680
 800066c:	08000b41 	.word	0x08000b41
 8000670:	2000016c 	.word	0x2000016c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2234      	movs	r2, #52	@ 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 fab4 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <SystemClock_Config+0xd4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <SystemClock_Config+0xd4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <SystemClock_Config+0xd4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <SystemClock_Config+0xd8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <SystemClock_Config+0xd8>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e8:	2310      	movs	r3, #16
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4618      	mov	r0, r3
 8000704:	f002 f98a 	bl	8002a1c <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800070e:	f000 fa4b 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fe0c 	bl	800234c <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073a:	f000 fa35 	bl	8000ba8 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	@ 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f001 f92f 	bl	80019f0 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 fa06 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000007c 	.word	0x2000007c
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007d8:	f240 628f 	movw	r2, #1679	@ 0x68f
 80007dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f8:	4818      	ldr	r0, [pc, #96]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007fa:	f002 fc6d 	bl	80030d8 <HAL_TIM_PWM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f9d0 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4619      	mov	r1, r3
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <MX_TIM2_Init+0xb0>)
 8000818:	f003 fb2e 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000822:	f000 f9c1 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000826:	2360      	movs	r3, #96	@ 0x60
 8000828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 800082a:	2396      	movs	r3, #150	@ 0x96
 800082c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM2_Init+0xb0>)
 800083e:	f002 fe53 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000848:	f000 f9ae 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM2_Init+0xb0>)
 800084e:	f000 fc4b 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000d0 	.word	0x200000d0

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	@ 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_TIM3_Init+0xe8>)
 8000892:	4a2e      	ldr	r2, [pc, #184]	@ (800094c <MX_TIM3_Init+0xec>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000896:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <MX_TIM3_Init+0xe8>)
 8000898:	2253      	movs	r2, #83	@ 0x53
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_TIM3_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_TIM3_Init+0xe8>)
 80008a4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MX_TIM3_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <MX_TIM3_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b6:	4824      	ldr	r0, [pc, #144]	@ (8000948 <MX_TIM3_Init+0xe8>)
 80008b8:	f002 fb4e 	bl	8002f58 <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008c2:	f000 f971 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4619      	mov	r1, r3
 80008d2:	481d      	ldr	r0, [pc, #116]	@ (8000948 <MX_TIM3_Init+0xe8>)
 80008d4:	f002 feca 	bl	800366c <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008de:	f000 f963 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008e2:	4819      	ldr	r0, [pc, #100]	@ (8000948 <MX_TIM3_Init+0xe8>)
 80008e4:	f002 fbf8 	bl	80030d8 <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008ee:	f000 f95b 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	4619      	mov	r1, r3
 8000900:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_TIM3_Init+0xe8>)
 8000902:	f003 fab9 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800090c:	f000 f94c 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000914:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2208      	movs	r2, #8
 8000926:	4619      	mov	r1, r3
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <MX_TIM3_Init+0xe8>)
 800092a:	f002 fddd 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000934:	f000 f938 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <MX_TIM3_Init+0xe8>)
 800093a:	f000 fbd5 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	@ 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000118 	.word	0x20000118
 800094c:	40000400 	.word	0x40000400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a34      	ldr	r2, [pc, #208]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a26      	ldr	r2, [pc, #152]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_GPIO_Init+0xf0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	481a      	ldr	r0, [pc, #104]	@ (8000a44 <MX_GPIO_Init+0xf4>)
 80009dc:	f000 ffd4 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <MX_GPIO_Init+0xf8>)
 80009f8:	f000 fe32 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009fc:	230c      	movs	r3, #12
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <MX_GPIO_Init+0xf4>)
 8000a18:	f000 fe22 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_GPIO_Init+0xf4>)
 8000a34:	f000 fe14 	bl	8001660 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	@ 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020800 	.word	0x40020800

08000a4c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a54:	2120      	movs	r1, #32
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <StartBlink01+0x1c>)
 8000a58:	f000 ffaf 	bl	80019ba <HAL_GPIO_TogglePin>
    osDelay(500);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a60:	f003 fbba 	bl	80041d8 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a64:	bf00      	nop
 8000a66:	e7f5      	b.n	8000a54 <StartBlink01+0x8>
 8000a68:	40020000 	.word	0x40020000

08000a6c <StartMotorTest01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTest01 */
void StartMotorTest01(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTest01 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a74:	2108      	movs	r1, #8
 8000a76:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <StartMotorTest01+0x5c>)
 8000a78:	f002 fb7e 	bl	8003178 <HAL_TIM_PWM_Start>

  // Thruster-specific arming - hold minimum throttle longer
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Neutral position
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <StartMotorTest01+0x5c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000a84:	63da      	str	r2, [r3, #60]	@ 0x3c
  osDelay(3000);
 8000a86:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a8a:	f003 fba5 	bl	80041d8 <osDelay>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000); // Minimum
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <StartMotorTest01+0x5c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a96:	63da      	str	r2, [r3, #60]	@ 0x3c
  osDelay(5000); // Hold minimum longer for thruster ESCs
 8000a98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a9c:	f003 fb9c 	bl	80041d8 <osDelay>

  for(;;)
  {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1100); // Very slow forward
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <StartMotorTest01+0x5c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(3000);
 8000aaa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000aae:	f003 fb93 	bl	80041d8 <osDelay>

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500); // Stop (neutral)
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <StartMotorTest01+0x5c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000aba:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(10000);
 8000abc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000ac0:	f003 fb8a 	bl	80041d8 <osDelay>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1100); // Very slow forward
 8000ac4:	bf00      	nop
 8000ac6:	e7eb      	b.n	8000aa0 <StartMotorTest01+0x34>
 8000ac8:	20000118 	.word	0x20000118

08000acc <StartServoTest01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoTest01 */
void StartServoTest01(void *argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	REMEMBER: still needs to share GND with STM32 to get clean signals.
	Hint:This means two wires connecting to the OUT- of the buck converter.
	*/

    // Start the PWM for servo
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ad4:	2104      	movs	r1, #4
 8000ad6:	4819      	ldr	r0, [pc, #100]	@ (8000b3c <StartServoTest01+0x70>)
 8000ad8:	f002 fb4e 	bl	8003178 <HAL_TIM_PWM_Start>

    // Position values
    uint32_t center = 75;
 8000adc:	234b      	movs	r3, #75	@ 0x4b
 8000ade:	617b      	str	r3, [r7, #20]
    uint32_t right = 125;
 8000ae0:	237d      	movs	r3, #125	@ 0x7d
 8000ae2:	613b      	str	r3, [r7, #16]
    uint32_t left = 25;
 8000ae4:	2319      	movs	r3, #25
 8000ae6:	60fb      	str	r3, [r7, #12]

    // Start at center
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <StartServoTest01+0x70>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	639a      	str	r2, [r3, #56]	@ 0x38
    osDelay(2000); // Initial center hold
 8000af0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af4:	f003 fb70 	bl	80041d8 <osDelay>

    /* Infinite loop: Center → Right → Center → Left */
    for(;;)
    {
        // Go to center
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <StartServoTest01+0x70>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 8000b00:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b04:	f003 fb68 	bl	80041d8 <osDelay>

        // Go to right
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, right);
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <StartServoTest01+0x70>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 8000b10:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b14:	f003 fb60 	bl	80041d8 <osDelay>

        // Return to center
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <StartServoTest01+0x70>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 8000b20:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b24:	f003 fb58 	bl	80041d8 <osDelay>

        // Go to left
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, left);
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <StartServoTest01+0x70>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        osDelay(3000);
 8000b30:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b34:	f003 fb50 	bl	80041d8 <osDelay>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, center);
 8000b38:	bf00      	nop
 8000b3a:	e7dd      	b.n	8000af8 <StartServoTest01+0x2c>
 8000b3c:	200000d0 	.word	0x200000d0

08000b40 <StartOledDisplay01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledDisplay01 */
void StartOledDisplay01(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledDisplay01 */

  // Wait for system to stabilize
  osDelay(1000);
 8000b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4c:	f003 fb44 	bl	80041d8 <osDelay>

  // Initialize the OLED display
  SSD1306_Init();
 8000b50:	f000 f848 	bl	8000be4 <SSD1306_Init>

  // Counter for seconds
  uint32_t seconds = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    // Clear the display
    SSD1306_Clear();
 8000b58:	f000 f9dc 	bl	8000f14 <SSD1306_Clear>

    // Show seconds count
    SSD1306_Printf(5, 5, "%lu seconds", seconds);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <StartOledDisplay01+0x40>)
 8000b60:	2105      	movs	r1, #5
 8000b62:	2005      	movs	r0, #5
 8000b64:	f000 f9e3 	bl	8000f2e <SSD1306_Printf>

    // Update the display
    SSD1306_UpdateScreen();
 8000b68:	f000 f8b2 	bl	8000cd0 <SSD1306_UpdateScreen>

    // Increment counter and wait 1 second
    seconds++;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
    osDelay(1000);
 8000b72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b76:	f003 fb2f 	bl	80041d8 <osDelay>
    SSD1306_Clear();
 8000b7a:	bf00      	nop
 8000b7c:	e7ec      	b.n	8000b58 <StartOledDisplay01+0x18>
 8000b7e:	bf00      	nop
 8000b80:	080075f0 	.word	0x080075f0

08000b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b96:	f000 fc3d 	bl	8001414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40001000 	.word	0x40001000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <SSD1306_WriteCommand>:
    {0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00}, // x
    {0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00}, // y
    {0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00}, // z
};

void SSD1306_WriteCommand(uint8_t byte) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR << 1, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2178      	movs	r1, #120	@ 0x78
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <SSD1306_WriteCommand+0x2c>)
 8000bd4:	f001 f850 	bl	8001c78 <HAL_I2C_Mem_Write>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000007c 	.word	0x2000007c

08000be4 <SSD1306_Init>:

void SSD1306_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    HAL_Delay(500);
 8000be8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bec:	f000 fc32 	bl	8001454 <HAL_Delay>

    // Initialization sequence
    SSD1306_WriteCommand(0xAE); // Display off
 8000bf0:	20ae      	movs	r0, #174	@ 0xae
 8000bf2:	f7ff ffdf 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x20); // Set Memory Addressing Mode
 8000bf6:	2020      	movs	r0, #32
 8000bf8:	f7ff ffdc 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x10); // Horizontal Addressing Mode
 8000bfc:	2010      	movs	r0, #16
 8000bfe:	f7ff ffd9 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xB0); // Set Page Start Address
 8000c02:	20b0      	movs	r0, #176	@ 0xb0
 8000c04:	f7ff ffd6 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xC8); // Set COM Output Scan Direction
 8000c08:	20c8      	movs	r0, #200	@ 0xc8
 8000c0a:	f7ff ffd3 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00); // Set low column address
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ffd0 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x10); // Set high column address
 8000c14:	2010      	movs	r0, #16
 8000c16:	f7ff ffcd 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x40); // Set start line address
 8000c1a:	2040      	movs	r0, #64	@ 0x40
 8000c1c:	f7ff ffca 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x81); // Set contrast control register
 8000c20:	2081      	movs	r0, #129	@ 0x81
 8000c22:	f7ff ffc7 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xFF);
 8000c26:	20ff      	movs	r0, #255	@ 0xff
 8000c28:	f7ff ffc4 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA1); // Set segment re-map
 8000c2c:	20a1      	movs	r0, #161	@ 0xa1
 8000c2e:	f7ff ffc1 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA6); // Set normal display
 8000c32:	20a6      	movs	r0, #166	@ 0xa6
 8000c34:	f7ff ffbe 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA8); // Set multiplex ratio
 8000c38:	20a8      	movs	r0, #168	@ 0xa8
 8000c3a:	f7ff ffbb 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x3F);
 8000c3e:	203f      	movs	r0, #63	@ 0x3f
 8000c40:	f7ff ffb8 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xA4); // Output follows RAM content
 8000c44:	20a4      	movs	r0, #164	@ 0xa4
 8000c46:	f7ff ffb5 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD3); // Set display offset
 8000c4a:	20d3      	movs	r0, #211	@ 0xd3
 8000c4c:	f7ff ffb2 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x00); // No offset
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffaf 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD5); // Set display clock divide ratio
 8000c56:	20d5      	movs	r0, #213	@ 0xd5
 8000c58:	f7ff ffac 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xF0);
 8000c5c:	20f0      	movs	r0, #240	@ 0xf0
 8000c5e:	f7ff ffa9 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xD9); // Set pre-charge period
 8000c62:	20d9      	movs	r0, #217	@ 0xd9
 8000c64:	f7ff ffa6 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x22);
 8000c68:	2022      	movs	r0, #34	@ 0x22
 8000c6a:	f7ff ffa3 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDA); // Set com pins hardware configuration
 8000c6e:	20da      	movs	r0, #218	@ 0xda
 8000c70:	f7ff ffa0 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x12);
 8000c74:	2012      	movs	r0, #18
 8000c76:	f7ff ff9d 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xDB); // Set vcomh
 8000c7a:	20db      	movs	r0, #219	@ 0xdb
 8000c7c:	f7ff ff9a 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x20);
 8000c80:	2020      	movs	r0, #32
 8000c82:	f7ff ff97 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x8D); // Set DC-DC enable
 8000c86:	208d      	movs	r0, #141	@ 0x8d
 8000c88:	f7ff ff94 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0x14);
 8000c8c:	2014      	movs	r0, #20
 8000c8e:	f7ff ff91 	bl	8000bb4 <SSD1306_WriteCommand>
    SSD1306_WriteCommand(0xAF); // Turn on display
 8000c92:	20af      	movs	r0, #175	@ 0xaf
 8000c94:	f7ff ff8e 	bl	8000bb4 <SSD1306_WriteCommand>

    SSD1306_Clear();
 8000c98:	f000 f93c 	bl	8000f14 <SSD1306_Clear>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <SSD1306_Fill>:

void SSD1306_Fill(SSD1306_COLOR color) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <SSD1306_Fill+0x14>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <SSD1306_Fill+0x16>
 8000cb4:	23ff      	movs	r3, #255	@ 0xff
 8000cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <SSD1306_Fill+0x2c>)
 8000cbe:	f005 ff97 	bl	8006bf0 <memset>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000170 	.word	0x20000170

08000cd0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	71fb      	strb	r3, [r7, #7]
 8000cda:	e01e      	b.n	8000d1a <SSD1306_UpdateScreen+0x4a>
        SSD1306_WriteCommand(0xB0 + i); // Set page address
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	3b50      	subs	r3, #80	@ 0x50
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff66 	bl	8000bb4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x00);     // Set lower column
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff63 	bl	8000bb4 <SSD1306_WriteCommand>
        SSD1306_WriteCommand(0x10);     // Set higher column
 8000cee:	2010      	movs	r0, #16
 8000cf0:	f7ff ff60 	bl	8000bb4 <SSD1306_WriteCommand>

        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR << 1, 0x40, 1,
                         &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, HAL_MAX_DELAY);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	01db      	lsls	r3, r3, #7
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR << 1, 0x40, 1,
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d2c <SSD1306_UpdateScreen+0x5c>)
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d00:	9202      	str	r2, [sp, #8]
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	9201      	str	r2, [sp, #4]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	2240      	movs	r2, #64	@ 0x40
 8000d0c:	2178      	movs	r1, #120	@ 0x78
 8000d0e:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <SSD1306_UpdateScreen+0x60>)
 8000d10:	f000 ffb2 	bl	8001c78 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3301      	adds	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b07      	cmp	r3, #7
 8000d1e:	d9dd      	bls.n	8000cdc <SSD1306_UpdateScreen+0xc>
    }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000170 	.word	0x20000170
 8000d30:	2000007c 	.word	0x2000007c

08000d34 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	4613      	mov	r3, r2
 8000d44:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db3d      	blt.n	8000dca <SSD1306_DrawPixel+0x96>
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d52:	d83a      	bhi.n	8000dca <SSD1306_DrawPixel+0x96>

    if (color == White) {
 8000d54:	797b      	ldrb	r3, [r7, #5]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d11a      	bne.n	8000d90 <SSD1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	08db      	lsrs	r3, r3, #3
 8000d60:	b2d8      	uxtb	r0, r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	01db      	lsls	r3, r3, #7
 8000d66:	4413      	add	r3, r2
 8000d68:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd8 <SSD1306_DrawPixel+0xa4>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b259      	sxtb	r1, r3
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	4603      	mov	r3, r0
 8000d84:	01db      	lsls	r3, r3, #7
 8000d86:	4413      	add	r3, r2
 8000d88:	b2c9      	uxtb	r1, r1
 8000d8a:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <SSD1306_DrawPixel+0xa4>)
 8000d8c:	54d1      	strb	r1, [r2, r3]
 8000d8e:	e01d      	b.n	8000dcc <SSD1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	b2d8      	uxtb	r0, r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	01db      	lsls	r3, r3, #7
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <SSD1306_DrawPixel+0xa4>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	4013      	ands	r3, r2
 8000db8:	b259      	sxtb	r1, r3
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	01db      	lsls	r3, r3, #7
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2c9      	uxtb	r1, r1
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <SSD1306_DrawPixel+0xa4>)
 8000dc6:	54d1      	strb	r1, [r2, r3]
 8000dc8:	e000      	b.n	8000dcc <SSD1306_DrawPixel+0x98>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8000dca:	bf00      	nop
    }
}
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000170 	.word	0x20000170

08000ddc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint8_t x, uint8_t y) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
    SSD1306_X = x;
 8000dec:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SSD1306_GotoXY+0x28>)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	7013      	strb	r3, [r2, #0]
    SSD1306_Y = y;
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SSD1306_GotoXY+0x2c>)
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	7013      	strb	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000570 	.word	0x20000570
 8000e08:	20000571 	.word	0x20000571

08000e0c <SSD1306_Puts>:

void SSD1306_Puts(char* str, SSD1306_COLOR color) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000e18:	e06b      	b.n	8000ef2 <SSD1306_Puts+0xe6>
        if (SSD1306_X + 8 > SSD1306_WIDTH) {
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f08 <SSD1306_Puts+0xfc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b78      	cmp	r3, #120	@ 0x78
 8000e20:	d90c      	bls.n	8000e3c <SSD1306_Puts+0x30>
            SSD1306_X = 0;
 8000e22:	4b39      	ldr	r3, [pc, #228]	@ (8000f08 <SSD1306_Puts+0xfc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
            SSD1306_Y += 8;
 8000e28:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <SSD1306_Puts+0x100>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b36      	ldr	r3, [pc, #216]	@ (8000f0c <SSD1306_Puts+0x100>)
 8000e32:	701a      	strb	r2, [r3, #0]
            if (SSD1306_Y + 8 > SSD1306_HEIGHT) break;
 8000e34:	4b35      	ldr	r3, [pc, #212]	@ (8000f0c <SSD1306_Puts+0x100>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b38      	cmp	r3, #56	@ 0x38
 8000e3a:	d85f      	bhi.n	8000efc <SSD1306_Puts+0xf0>
        }

        if (*str >= 32 && *str <= 126) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b1f      	cmp	r3, #31
 8000e42:	d94d      	bls.n	8000ee0 <SSD1306_Puts+0xd4>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e4a:	d849      	bhi.n	8000ee0 <SSD1306_Puts+0xd4>
            for (int i = 0; i < 8; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e043      	b.n	8000eda <SSD1306_Puts+0xce>
                uint8_t line = Font8x8[*str - 32][i];
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	3b20      	subs	r3, #32
 8000e58:	4a2d      	ldr	r2, [pc, #180]	@ (8000f10 <SSD1306_Puts+0x104>)
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	441a      	add	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4413      	add	r3, r2
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	73fb      	strb	r3, [r7, #15]
                for (int j = 0; j < 8; j++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	e030      	b.n	8000ece <SSD1306_Puts+0xc2>
                    if (line & (1 << j)) {
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa42 f303 	asr.w	r3, r2, r3
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d010      	beq.n	8000e9e <SSD1306_Puts+0x92>
                        SSD1306_DrawPixel(SSD1306_X + i, SSD1306_Y + j, color);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <SSD1306_Puts+0xfc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	b2d8      	uxtb	r0, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <SSD1306_Puts+0x100>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	78fa      	ldrb	r2, [r7, #3]
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff ff4c 	bl	8000d34 <SSD1306_DrawPixel>
 8000e9c:	e014      	b.n	8000ec8 <SSD1306_Puts+0xbc>
                    } else {
                        SSD1306_DrawPixel(SSD1306_X + i, SSD1306_Y + j, !color);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <SSD1306_Puts+0xfc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b2d8      	uxtb	r0, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <SSD1306_Puts+0x100>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2d9      	uxtb	r1, r3
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	f7ff ff36 	bl	8000d34 <SSD1306_DrawPixel>
                for (int j = 0; j < 8; j++) {
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	ddcb      	ble.n	8000e6c <SSD1306_Puts+0x60>
            for (int i = 0; i < 8; i++) {
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	ddb8      	ble.n	8000e52 <SSD1306_Puts+0x46>
                    }
                }
            }
        }
        SSD1306_X += 8;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <SSD1306_Puts+0xfc>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3308      	adds	r3, #8
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <SSD1306_Puts+0xfc>)
 8000eea:	701a      	strb	r2, [r3, #0]
        str++;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d18f      	bne.n	8000e1a <SSD1306_Puts+0xe>
    }
}
 8000efa:	e000      	b.n	8000efe <SSD1306_Puts+0xf2>
            if (SSD1306_Y + 8 > SSD1306_HEIGHT) break;
 8000efc:	bf00      	nop
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000570 	.word	0x20000570
 8000f0c:	20000571 	.word	0x20000571
 8000f10:	080076a4 	.word	0x080076a4

08000f14 <SSD1306_Clear>:

void SSD1306_Clear(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    SSD1306_Fill(Black);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fec1 	bl	8000ca0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000f1e:	f7ff fed7 	bl	8000cd0 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0, 0);
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff ff59 	bl	8000ddc <SSD1306_GotoXY>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <SSD1306_Printf>:

void SSD1306_Printf(uint8_t x, uint8_t y, const char* format, ...) {
 8000f2e:	b40c      	push	{r2, r3}
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	@ 0x50
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
    char buffer[64];
    va_list args;
    va_start(args, format);
 8000f40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f44:	60fb      	str	r3, [r7, #12]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000f46:	f107 0010 	add.w	r0, r7, #16
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000f4e:	2140      	movs	r1, #64	@ 0x40
 8000f50:	f005 fe40 	bl	8006bd4 <vsniprintf>
    va_end(args);

    SSD1306_GotoXY(x, y);
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff3e 	bl	8000ddc <SSD1306_GotoXY>
    SSD1306_Puts(buffer, White);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2101      	movs	r1, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff50 	bl	8000e0c <SSD1306_Puts>
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	@ 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f76:	b002      	add	sp, #8
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_MspInit+0x54>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a11      	ldr	r2, [pc, #68]	@ (8000fd0 <HAL_MspInit+0x54>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <HAL_MspInit+0x54>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_MspInit+0x54>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_MspInit+0x54>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <HAL_MspInit+0x54>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	f06f 0001 	mvn.w	r0, #1
 8000fc2:	f000 fb23 	bl	800160c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_I2C_MspInit+0x84>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12b      	bne.n	800104e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001012:	23c0      	movs	r3, #192	@ 0xc0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001022:	2304      	movs	r3, #4
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <HAL_I2C_MspInit+0x8c>)
 800102e:	f000 fb17 	bl	8001660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_I2C_MspInit+0x88>)
 800103c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40005400 	.word	0x40005400
 800105c:	40023800 	.word	0x40023800
 8001060:	40020400 	.word	0x40020400

08001064 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001074:	d10d      	bne.n	8001092 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10d      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <HAL_TIM_Base_MspInit+0x40>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001108:	d11e      	bne.n	8001148 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <HAL_TIM_MspPostInit+0xb0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a21      	ldr	r2, [pc, #132]	@ (8001198 <HAL_TIM_MspPostInit+0xb0>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_TIM_MspPostInit+0xb0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001136:	2301      	movs	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4816      	ldr	r0, [pc, #88]	@ (800119c <HAL_TIM_MspPostInit+0xb4>)
 8001142:	f000 fa8d 	bl	8001660 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001146:	e022      	b.n	800118e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <HAL_TIM_MspPostInit+0xb8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d11d      	bne.n	800118e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <HAL_TIM_MspPostInit+0xb0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <HAL_TIM_MspPostInit+0xb0>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <HAL_TIM_MspPostInit+0xb0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117e:	2302      	movs	r3, #2
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4806      	ldr	r0, [pc, #24]	@ (80011a4 <HAL_TIM_MspPostInit+0xbc>)
 800118a:	f000 fa69 	bl	8001660 <HAL_GPIO_Init>
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40000400 	.word	0x40000400
 80011a4:	40020400 	.word	0x40020400

080011a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	@ 0x38
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_InitTick+0xe4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	4a32      	ldr	r2, [pc, #200]	@ (800128c <HAL_InitTick+0xe4>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <HAL_InitTick+0xe4>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d4:	f107 0210 	add.w	r2, r7, #16
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f9ba 	bl	8002558 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d103      	bne.n	80011f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ee:	f001 f99f 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 80011f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80011f4:	e004      	b.n	8001200 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011f6:	f001 f99b 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 80011fa:	4603      	mov	r3, r0
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <HAL_InitTick+0xe8>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	3b01      	subs	r3, #1
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_InitTick+0xec>)
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <HAL_InitTick+0xf0>)
 8001212:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <HAL_InitTick+0xec>)
 8001216:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800121a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800121c:	4a1d      	ldr	r2, [pc, #116]	@ (8001294 <HAL_InitTick+0xec>)
 800121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001220:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_InitTick+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_InitTick+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_InitTick+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001234:	4817      	ldr	r0, [pc, #92]	@ (8001294 <HAL_InitTick+0xec>)
 8001236:	f001 fe8f 	bl	8002f58 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001240:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001244:	2b00      	cmp	r3, #0
 8001246:	d11b      	bne.n	8001280 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001248:	4812      	ldr	r0, [pc, #72]	@ (8001294 <HAL_InitTick+0xec>)
 800124a:	f001 fed5 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
 800124e:	4603      	mov	r3, r0
 8001250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001254:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001258:	2b00      	cmp	r3, #0
 800125a:	d111      	bne.n	8001280 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800125c:	2036      	movs	r0, #54	@ 0x36
 800125e:	f000 f9f1 	bl	8001644 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d808      	bhi.n	800127a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	2036      	movs	r0, #54	@ 0x36
 800126e:	f000 f9cd 	bl	800160c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_InitTick+0xf4>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e002      	b.n	8001280 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001280:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001284:	4618      	mov	r0, r3
 8001286:	3738      	adds	r7, #56	@ 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	431bde83 	.word	0x431bde83
 8001294:	20000574 	.word	0x20000574
 8001298:	40001000 	.word	0x40001000
 800129c:	20000004 	.word	0x20000004

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <TIM6_DAC_IRQHandler+0x10>)
 80012de:	f002 f813 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000574 	.word	0x20000574

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f005 fc70 	bl	8006c00 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20020000 	.word	0x20020000
 800134c:	00000400 	.word	0x00000400
 8001350:	200005bc 	.word	0x200005bc
 8001354:	200050f8 	.word	0x200050f8

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001380:	f7ff ffea 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f005 fc2f 	bl	8006c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f915 	bl	80005dc <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013c0:	080079d8 	.word	0x080079d8
  ldr r2, =_sbss
 80013c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013c8:	200050f4 	.word	0x200050f4

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f8fc 	bl	80015f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff fed2 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fdba 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	200005c0 	.word	0x200005c0

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200005c0 	.word	0x200005c0

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffde 	bl	800143c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	@ (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff4c 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161e:	f7ff ff61 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001622:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	6978      	ldr	r0, [r7, #20]
 800162a:	f7ff ffb1 	bl	8001590 <NVIC_EncodePriority>
 800162e:	4602      	mov	r2, r0
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff80 	bl	800153c <__NVIC_SetPriority>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff54 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e165      	b.n	8001948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8154 	bne.w	8001942 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d130      	bne.n	8001714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 0201 	and.w	r2, r3, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b03      	cmp	r3, #3
 800171e:	d017      	beq.n	8001750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d123      	bne.n	80017a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	69b9      	ldr	r1, [r7, #24]
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80ae 	beq.w	8001942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001960 <HAL_GPIO_Init+0x300>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001960 <HAL_GPIO_Init+0x300>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001960 <HAL_GPIO_Init+0x300>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_GPIO_Init+0x304>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4f      	ldr	r2, [pc, #316]	@ (8001968 <HAL_GPIO_Init+0x308>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d025      	beq.n	800187a <HAL_GPIO_Init+0x21a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4e      	ldr	r2, [pc, #312]	@ (800196c <HAL_GPIO_Init+0x30c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <HAL_GPIO_Init+0x216>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4d      	ldr	r2, [pc, #308]	@ (8001970 <HAL_GPIO_Init+0x310>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x212>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4c      	ldr	r2, [pc, #304]	@ (8001974 <HAL_GPIO_Init+0x314>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x20e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	@ (8001978 <HAL_GPIO_Init+0x318>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x20a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	@ (800197c <HAL_GPIO_Init+0x31c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x206>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a49      	ldr	r2, [pc, #292]	@ (8001980 <HAL_GPIO_Init+0x320>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x202>
 800185e:	2306      	movs	r3, #6
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001862:	2307      	movs	r3, #7
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x21c>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x21c>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x21c>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x21c>
 800187a:	2300      	movs	r3, #0
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	@ (8001964 <HAL_GPIO_Init+0x304>)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a31      	ldr	r2, [pc, #196]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a26      	ldr	r2, [pc, #152]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <HAL_GPIO_Init+0x324>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001912:	4a1c      	ldr	r2, [pc, #112]	@ (8001984 <HAL_GPIO_Init+0x324>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800193c:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <HAL_GPIO_Init+0x324>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f ae96 	bls.w	800167c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40013800 	.word	0x40013800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40021400 	.word	0x40021400
 8001980:	40021800 	.word	0x40021800
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	041a      	lsls	r2, r3, #16
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	400b      	ands	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e12b      	b.n	8001c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fadc 	bl	8000fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	@ 0x24
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a54:	f000 fd6c 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8001a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a81      	ldr	r2, [pc, #516]	@ (8001c64 <HAL_I2C_Init+0x274>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d807      	bhi.n	8001a74 <HAL_I2C_Init+0x84>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a80      	ldr	r2, [pc, #512]	@ (8001c68 <HAL_I2C_Init+0x278>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	bf94      	ite	ls
 8001a6c:	2301      	movls	r3, #1
 8001a6e:	2300      	movhi	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	e006      	b.n	8001a82 <HAL_I2C_Init+0x92>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a7d      	ldr	r2, [pc, #500]	@ (8001c6c <HAL_I2C_Init+0x27c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf94      	ite	ls
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0e7      	b.n	8001c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a78      	ldr	r2, [pc, #480]	@ (8001c70 <HAL_I2C_Init+0x280>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c64 <HAL_I2C_Init+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d802      	bhi.n	8001ac4 <HAL_I2C_Init+0xd4>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	e009      	b.n	8001ad8 <HAL_I2C_Init+0xe8>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	4a69      	ldr	r2, [pc, #420]	@ (8001c74 <HAL_I2C_Init+0x284>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	495c      	ldr	r1, [pc, #368]	@ (8001c64 <HAL_I2C_Init+0x274>)
 8001af4:	428b      	cmp	r3, r1
 8001af6:	d819      	bhi.n	8001b2c <HAL_I2C_Init+0x13c>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e59      	subs	r1, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b06:	1c59      	adds	r1, r3, #1
 8001b08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00a      	beq.n	8001b28 <HAL_I2C_Init+0x138>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1e59      	subs	r1, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b26:	e051      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e04f      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d111      	bne.n	8001b58 <HAL_I2C_Init+0x168>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e58      	subs	r0, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	440b      	add	r3, r1
 8001b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	e012      	b.n	8001b7e <HAL_I2C_Init+0x18e>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e58      	subs	r0, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	0099      	lsls	r1, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Init+0x196>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e022      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10e      	bne.n	8001bac <HAL_I2C_Init+0x1bc>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1e58      	subs	r0, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	440b      	add	r3, r1
 8001b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Init+0x1dc>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	0099      	lsls	r1, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	6809      	ldr	r1, [r1, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6911      	ldr	r1, [r2, #16]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68d2      	ldr	r2, [r2, #12]
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	000186a0 	.word	0x000186a0
 8001c68:	001e847f 	.word	0x001e847f
 8001c6c:	003d08ff 	.word	0x003d08ff
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	10624dd3 	.word	0x10624dd3

08001c78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	813b      	strh	r3, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c92:	f7ff fbd3 	bl	800143c <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	f040 80d9 	bne.w	8001e58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2319      	movs	r3, #25
 8001cac:	2201      	movs	r2, #1
 8001cae:	496d      	ldr	r1, [pc, #436]	@ (8001e64 <HAL_I2C_Mem_Write+0x1ec>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f971 	bl	8001f98 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e0cc      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_I2C_Mem_Write+0x56>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e0c5      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d007      	beq.n	8001cf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2221      	movs	r2, #33	@ 0x21
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a4d      	ldr	r2, [pc, #308]	@ (8001e68 <HAL_I2C_Mem_Write+0x1f0>)
 8001d34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d36:	88f8      	ldrh	r0, [r7, #6]
 8001d38:	893a      	ldrh	r2, [r7, #8]
 8001d3a:	8979      	ldrh	r1, [r7, #10]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4603      	mov	r3, r0
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f890 	bl	8001e6c <I2C_RequestMemoryWrite>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d052      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e081      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fa36 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d107      	bne.n	8001d7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_I2C_Mem_Write+0x180>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d017      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1aa      	bne.n	8001d56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fa29 	bl	800225c <I2C_WaitOnBTFFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d107      	bne.n	8001e28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e016      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	00100002 	.word	0x00100002
 8001e68:	ffff0000 	.word	0xffff0000

08001e6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	817b      	strh	r3, [r7, #10]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	813b      	strh	r3, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f878 	bl	8001f98 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ebc:	d103      	bne.n	8001ec6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e05f      	b.n	8001f8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ed8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	492d      	ldr	r1, [pc, #180]	@ (8001f94 <I2C_RequestMemoryWrite+0x128>)
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f8d3 	bl	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04c      	b.n	8001f8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f95e 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d107      	bne.n	8001f2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e02b      	b.n	8001f8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f38:	893b      	ldrh	r3, [r7, #8]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	e021      	b.n	8001f88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f44:	893b      	ldrh	r3, [r7, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f938 	bl	80021cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d107      	bne.n	8001f7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e005      	b.n	8001f8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7e:	893b      	ldrh	r3, [r7, #8]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	00010002 	.word	0x00010002

08001f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa8:	e048      	b.n	800203c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fb0:	d044      	beq.n	800203c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb2:	f7ff fa43 	bl	800143c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d302      	bcc.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d139      	bne.n	800203c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	e00c      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	429a      	cmp	r2, r3
 800200c:	d116      	bne.n	800203c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e023      	b.n	8002084 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10d      	bne.n	8002062 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	43da      	mvns	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	e00c      	b.n	800207c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	429a      	cmp	r2, r3
 8002080:	d093      	beq.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800209a:	e071      	b.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020aa:	d123      	bne.n	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e067      	b.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020fa:	d041      	beq.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fc:	f7ff f99e 	bl	800143c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d302      	bcc.n	8002112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d136      	bne.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10c      	bne.n	8002136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4013      	ands	r3, r2
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf14      	ite	ne
 800212e:	2301      	movne	r3, #1
 8002130:	2300      	moveq	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e00b      	b.n	800214e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	43da      	mvns	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4013      	ands	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e021      	b.n	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10c      	bne.n	80021a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	43da      	mvns	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e00b      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4013      	ands	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f47f af6d 	bne.w	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d8:	e034      	b.n	8002244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f886 	bl	80022ec <I2C_IsAcknowledgeFailed>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e034      	b.n	8002254 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021f0:	d028      	beq.n	8002244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7ff f923 	bl	800143c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11d      	bne.n	8002244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002212:	2b80      	cmp	r3, #128	@ 0x80
 8002214:	d016      	beq.n	8002244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b80      	cmp	r3, #128	@ 0x80
 8002250:	d1c3      	bne.n	80021da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002268:	e034      	b.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f83e 	bl	80022ec <I2C_IsAcknowledgeFailed>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e034      	b.n	80022e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002280:	d028      	beq.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f8db 	bl	800143c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11d      	bne.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d016      	beq.n	80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e007      	b.n	80022e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d1c3      	bne.n	800226a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002302:	d11b      	bne.n	800233c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800230c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f043 0204 	orr.w	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0cc      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b68      	ldr	r3, [pc, #416]	@ (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d90c      	bls.n	8002388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b65      	ldr	r3, [pc, #404]	@ (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	@ (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a58      	ldr	r2, [pc, #352]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d044      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d119      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b3f      	ldr	r3, [pc, #252]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e067      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4934      	ldr	r1, [pc, #208]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe fffe 	bl	800143c <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fe fffa 	bl	800143c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e04f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b25      	ldr	r3, [pc, #148]	@ (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d20c      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f873 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	@ (800250c <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fe58 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00
 8002508:	40023800 	.word	0x40023800
 800250c:	0800797c 	.word	0x0800797c
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_RCC_GetHCLKFreq+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000000 	.word	0x20000000

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff0 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4903      	ldr	r1, [pc, #12]	@ (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	0800798c 	.word	0x0800798c

08002558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	220f      	movs	r2, #15
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <HAL_RCC_GetClockConfig+0x60>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 020f 	and.w	r2, r3, #15
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40023c00 	.word	0x40023c00

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b0ae      	sub	sp, #184	@ 0xb8
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e2:	4bcb      	ldr	r3, [pc, #812]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	f200 8206 	bhi.w	80029fc <HAL_RCC_GetSysClockFreq+0x440>
 80025f0:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	080029fd 	.word	0x080029fd
 8002600:	080029fd 	.word	0x080029fd
 8002604:	080029fd 	.word	0x080029fd
 8002608:	08002635 	.word	0x08002635
 800260c:	080029fd 	.word	0x080029fd
 8002610:	080029fd 	.word	0x080029fd
 8002614:	080029fd 	.word	0x080029fd
 8002618:	0800263d 	.word	0x0800263d
 800261c:	080029fd 	.word	0x080029fd
 8002620:	080029fd 	.word	0x080029fd
 8002624:	080029fd 	.word	0x080029fd
 8002628:	0800282d 	.word	0x0800282d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4bb9      	ldr	r3, [pc, #740]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x358>)
 800262e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002632:	e1e7      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002634:	4bb8      	ldr	r3, [pc, #736]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800263a:	e1e3      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4bb4      	ldr	r3, [pc, #720]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002648:	4bb1      	ldr	r3, [pc, #708]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d071      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4bae      	ldr	r3, [pc, #696]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002660:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4621      	mov	r1, r4
 8002694:	1a51      	subs	r1, r2, r1
 8002696:	6439      	str	r1, [r7, #64]	@ 0x40
 8002698:	4629      	mov	r1, r5
 800269a:	eb63 0301 	sbc.w	r3, r3, r1
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026ac:	4649      	mov	r1, r9
 80026ae:	018b      	lsls	r3, r1, #6
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b6:	4641      	mov	r1, r8
 80026b8:	018a      	lsls	r2, r1, #6
 80026ba:	4641      	mov	r1, r8
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026c0:	4649      	mov	r1, r9
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026d4:	4649      	mov	r1, r9
 80026d6:	00cb      	lsls	r3, r1, #3
 80026d8:	4641      	mov	r1, r8
 80026da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026de:	4641      	mov	r1, r8
 80026e0:	00ca      	lsls	r2, r1, #3
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	4622      	mov	r2, r4
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ee:	462b      	mov	r3, r5
 80026f0:	460a      	mov	r2, r1
 80026f2:	eb42 0303 	adc.w	r3, r2, r3
 80026f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002704:	4629      	mov	r1, r5
 8002706:	024b      	lsls	r3, r1, #9
 8002708:	4621      	mov	r1, r4
 800270a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270e:	4621      	mov	r1, r4
 8002710:	024a      	lsls	r2, r1, #9
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002728:	f7fd fdc2 	bl	80002b0 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002736:	e067      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002738:	4b75      	ldr	r3, [pc, #468]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002744:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002748:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002752:	2300      	movs	r3, #0
 8002754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0159      	lsls	r1, r3, #5
 8002768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276c:	0150      	lsls	r0, r2, #5
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4621      	mov	r1, r4
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002778:	4629      	mov	r1, r5
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800278c:	4649      	mov	r1, r9
 800278e:	018b      	lsls	r3, r1, #6
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002796:	4641      	mov	r1, r8
 8002798:	018a      	lsls	r2, r1, #6
 800279a:	4641      	mov	r1, r8
 800279c:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a0:	4649      	mov	r1, r9
 80027a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ba:	4692      	mov	sl, r2
 80027bc:	469b      	mov	fp, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	eb1a 0303 	adds.w	r3, sl, r3
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	462b      	mov	r3, r5
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e4:	4621      	mov	r1, r4
 80027e6:	028a      	lsls	r2, r1, #10
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f0:	2200      	movs	r2, #0
 80027f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80027f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80027f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027fa:	f7fd fd59 	bl	80002b0 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4613      	mov	r3, r2
 8002804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002808:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800281a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800281e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800282a:	e0eb      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b38      	ldr	r3, [pc, #224]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002838:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d06b      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800284e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002856:	663b      	str	r3, [r7, #96]	@ 0x60
 8002858:	2300      	movs	r3, #0
 800285a:	667b      	str	r3, [r7, #100]	@ 0x64
 800285c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002860:	4622      	mov	r2, r4
 8002862:	462b      	mov	r3, r5
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	0159      	lsls	r1, r3, #5
 800286e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002872:	0150      	lsls	r0, r2, #5
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4621      	mov	r1, r4
 800287a:	1a51      	subs	r1, r2, r1
 800287c:	61b9      	str	r1, [r7, #24]
 800287e:	4629      	mov	r1, r5
 8002880:	eb63 0301 	sbc.w	r3, r3, r1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002892:	4659      	mov	r1, fp
 8002894:	018b      	lsls	r3, r1, #6
 8002896:	4651      	mov	r1, sl
 8002898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289c:	4651      	mov	r1, sl
 800289e:	018a      	lsls	r2, r1, #6
 80028a0:	4651      	mov	r1, sl
 80028a2:	ebb2 0801 	subs.w	r8, r2, r1
 80028a6:	4659      	mov	r1, fp
 80028a8:	eb63 0901 	sbc.w	r9, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c0:	4690      	mov	r8, r2
 80028c2:	4699      	mov	r9, r3
 80028c4:	4623      	mov	r3, r4
 80028c6:	eb18 0303 	adds.w	r3, r8, r3
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	462b      	mov	r3, r5
 80028ce:	eb49 0303 	adc.w	r3, r9, r3
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028e0:	4629      	mov	r1, r5
 80028e2:	024b      	lsls	r3, r1, #9
 80028e4:	4621      	mov	r1, r4
 80028e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ea:	4621      	mov	r1, r4
 80028ec:	024a      	lsls	r2, r1, #9
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f6:	2200      	movs	r2, #0
 80028f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002900:	f7fd fcd6 	bl	80002b0 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800290e:	e065      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x420>
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x458>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	2200      	movs	r2, #0
 8002924:	4618      	mov	r0, r3
 8002926:	4611      	mov	r1, r2
 8002928:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292c:	653b      	str	r3, [r7, #80]	@ 0x50
 800292e:	2300      	movs	r3, #0
 8002930:	657b      	str	r3, [r7, #84]	@ 0x54
 8002932:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002936:	4642      	mov	r2, r8
 8002938:	464b      	mov	r3, r9
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	0159      	lsls	r1, r3, #5
 8002944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002948:	0150      	lsls	r0, r2, #5
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4641      	mov	r1, r8
 8002950:	1a51      	subs	r1, r2, r1
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	4649      	mov	r1, r9
 8002956:	eb63 0301 	sbc.w	r3, r3, r1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002968:	4659      	mov	r1, fp
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002972:	4651      	mov	r1, sl
 8002974:	018a      	lsls	r2, r1, #6
 8002976:	4651      	mov	r1, sl
 8002978:	1a54      	subs	r4, r2, r1
 800297a:	4659      	mov	r1, fp
 800297c:	eb63 0501 	sbc.w	r5, r3, r1
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	00eb      	lsls	r3, r5, #3
 800298a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800298e:	00e2      	lsls	r2, r4, #3
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	4643      	mov	r3, r8
 8002996:	18e3      	adds	r3, r4, r3
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	464b      	mov	r3, r9
 800299c:	eb45 0303 	adc.w	r3, r5, r3
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c4:	2200      	movs	r2, #0
 80029c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029ce:	f7fd fc6f 	bl	80002b0 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0f1b      	lsrs	r3, r3, #28
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	37b8      	adds	r7, #184	@ 0xb8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400

08002a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e28d      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8083 	beq.w	8002b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a3c:	4b94      	ldr	r3, [pc, #592]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d019      	beq.n	8002a7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a48:	4b91      	ldr	r3, [pc, #580]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a54:	4b8e      	ldr	r3, [pc, #568]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b8b      	ldr	r3, [pc, #556]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b84      	ldr	r3, [pc, #528]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x124>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e25a      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x90>
 8002a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7b      	ldr	r2, [pc, #492]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xb4>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b73      	ldr	r3, [pc, #460]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a72      	ldr	r2, [pc, #456]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fca4 	bl	800143c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fca0 	bl	800143c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e21f      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xdc>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fc90 	bl	800143c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fc8c 	bl	800143c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e20b      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x104>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06f      	beq.n	8002c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b4e:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x186>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1d3      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fc39 	bl	800143c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe fc35 	bl	800143c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1b4      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fc18 	bl	800143c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fc14 	bl	800143c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e193      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fbf8 	bl	800143c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fbf4 	bl	800143c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e173      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x234>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fbe1 	bl	800143c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fbdd 	bl	800143c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e15c      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b83      	ldr	r3, [pc, #524]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b79      	ldr	r3, [pc, #484]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fb9d 	bl	800143c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe fb99 	bl	800143c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e118      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6c      	ldr	r3, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x31e>
 8002d2c:	4b66      	ldr	r3, [pc, #408]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	4a65      	ldr	r2, [pc, #404]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x340>
 8002d42:	4b61      	ldr	r3, [pc, #388]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a60      	ldr	r2, [pc, #384]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a59      	ldr	r2, [pc, #356]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b57      	ldr	r3, [pc, #348]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a56      	ldr	r2, [pc, #344]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fb5e 	bl	800143c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb5a 	bl	800143c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0d7      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x368>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe fb48 	bl	800143c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fb44 	bl	800143c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0c1      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80ad 	beq.w	8002f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d060      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d145      	bne.n	8002e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b33      	ldr	r3, [pc, #204]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fb18 	bl	800143c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fb14 	bl	800143c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e093      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	071b      	lsls	r3, r3, #28
 8002e5a:	491b      	ldr	r1, [pc, #108]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fae9 	bl	800143c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe fae5 	bl	800143c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e064      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x452>
 8002e8c:	e05c      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe fad2 	bl	800143c <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe face 	bl	800143c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04d      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x480>
 8002eba:	e045      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e040      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <HAL_RCC_OscConfig+0x538>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d030      	beq.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d129      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d122      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d119      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe f890 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 fc58 	bl	800384c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04e      	b.n	80030ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <HAL_TIM_Base_Start_IT+0xc4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d022      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d01d      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d018      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00e      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d010      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e007      	b.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40010400 	.word	0x40010400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40001800 	.word	0x40001800

080030d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e041      	b.n	800316e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd ffb0 	bl	8001064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fb98 	bl	800384c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x24>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e022      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d109      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x3e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e015      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x58>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07c      	b.n	80032e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0x82>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f8:	e013      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0x92>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003208:	e00b      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003218:	e003      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fdfe 	bl	8003e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2d      	ldr	r2, [pc, #180]	@ (80032ec <HAL_TIM_PWM_Start+0x174>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_PWM_Start+0xcc>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2c      	ldr	r2, [pc, #176]	@ (80032f0 <HAL_TIM_PWM_Start+0x178>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_TIM_PWM_Start+0xd0>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_TIM_PWM_Start+0xd2>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <HAL_TIM_PWM_Start+0x174>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003270:	d01d      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <HAL_TIM_PWM_Start+0x17c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d018      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_TIM_PWM_Start+0x180>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_TIM_PWM_Start+0x184>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00e      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <HAL_TIM_PWM_Start+0x178>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <HAL_TIM_PWM_Start+0x188>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_TIM_PWM_Start+0x136>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <HAL_TIM_PWM_Start+0x18c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d111      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d010      	beq.n	80032e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	e007      	b.n	80032e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40010400 	.word	0x40010400
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40014000 	.word	0x40014000
 8003304:	40001800 	.word	0x40001800

08003308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0202 	mvn.w	r2, #2
 800333c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa5b 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa4d 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa5e 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d020      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0204 	mvn.w	r2, #4
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa35 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa27 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fa38 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d020      	beq.n	8003404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0208 	mvn.w	r2, #8
 80033d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa0f 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 80033f0:	e005      	b.n	80033fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa01 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fa12 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d020      	beq.n	8003450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0210 	mvn.w	r2, #16
 8003420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2208      	movs	r2, #8
 8003426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f9e9 	bl	800380e <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9db 	bl	80037fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f9ec 	bl	8003822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0201 	mvn.w	r2, #1
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fb88 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fd76 	bl	8003f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00c      	beq.n	80034bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9bd 	bl	8003836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0220 	mvn.w	r2, #32
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fd48 	bl	8003f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e0ae      	b.n	8003664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	f200 809f 	bhi.w	8003654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003516:	a201      	add	r2, pc, #4	@ (adr r2, 800351c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003551 	.word	0x08003551
 8003520:	08003655 	.word	0x08003655
 8003524:	08003655 	.word	0x08003655
 8003528:	08003655 	.word	0x08003655
 800352c:	08003591 	.word	0x08003591
 8003530:	08003655 	.word	0x08003655
 8003534:	08003655 	.word	0x08003655
 8003538:	08003655 	.word	0x08003655
 800353c:	080035d3 	.word	0x080035d3
 8003540:	08003655 	.word	0x08003655
 8003544:	08003655 	.word	0x08003655
 8003548:	08003655 	.word	0x08003655
 800354c:	08003613 	.word	0x08003613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fa1e 	bl	8003998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0208 	orr.w	r2, r2, #8
 800356a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6999      	ldr	r1, [r3, #24]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	619a      	str	r2, [r3, #24]
      break;
 800358e:	e064      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa6e 	bl	8003a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]
      break;
 80035d0:	e043      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fac3 	bl	8003b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0208 	orr.w	r2, r2, #8
 80035ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0204 	bic.w	r2, r2, #4
 80035fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	61da      	str	r2, [r3, #28]
      break;
 8003610:	e023      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fb17 	bl	8003c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800362c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	021a      	lsls	r2, r3, #8
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	61da      	str	r2, [r3, #28]
      break;
 8003652:	e002      	b.n	800365a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
      break;
 8003658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIM_ConfigClockSource+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e0b4      	b.n	80037f2 <HAL_TIM_ConfigClockSource+0x186>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c0:	d03e      	beq.n	8003740 <HAL_TIM_ConfigClockSource+0xd4>
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c6:	f200 8087 	bhi.w	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ce:	f000 8086 	beq.w	80037de <HAL_TIM_ConfigClockSource+0x172>
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	d87f      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b70      	cmp	r3, #112	@ 0x70
 80036da:	d01a      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0xa6>
 80036dc:	2b70      	cmp	r3, #112	@ 0x70
 80036de:	d87b      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b60      	cmp	r3, #96	@ 0x60
 80036e2:	d050      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0x11a>
 80036e4:	2b60      	cmp	r3, #96	@ 0x60
 80036e6:	d877      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b50      	cmp	r3, #80	@ 0x50
 80036ea:	d03c      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0xfa>
 80036ec:	2b50      	cmp	r3, #80	@ 0x50
 80036ee:	d873      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d058      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0x13a>
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d86f      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b30      	cmp	r3, #48	@ 0x30
 80036fa:	d064      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	2b30      	cmp	r3, #48	@ 0x30
 80036fe:	d86b      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d060      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b20      	cmp	r3, #32
 8003706:	d867      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d05c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	2b10      	cmp	r3, #16
 800370e:	d05a      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003710:	e062      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003722:	f000 fb63 	bl	8003dec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	609a      	str	r2, [r3, #8]
      break;
 800373e:	e04f      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003750:	f000 fb4c 	bl	8003dec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003762:	609a      	str	r2, [r3, #8]
      break;
 8003764:	e03c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003772:	461a      	mov	r2, r3
 8003774:	f000 fac0 	bl	8003cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2150      	movs	r1, #80	@ 0x50
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fb19 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 8003784:	e02c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003792:	461a      	mov	r2, r3
 8003794:	f000 fadf 	bl	8003d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2160      	movs	r1, #96	@ 0x60
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fb09 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 80037a4:	e01c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	461a      	mov	r2, r3
 80037b4:	f000 faa0 	bl	8003cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2140      	movs	r1, #64	@ 0x40
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 faf9 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 80037c4:	e00c      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f000 faf0 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 80037d6:	e003      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e000      	b.n	80037e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a43      	ldr	r2, [pc, #268]	@ (800396c <TIM_Base_SetConfig+0x120>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386a:	d00f      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a40      	ldr	r2, [pc, #256]	@ (8003970 <TIM_Base_SetConfig+0x124>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3f      	ldr	r2, [pc, #252]	@ (8003974 <TIM_Base_SetConfig+0x128>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3e      	ldr	r2, [pc, #248]	@ (8003978 <TIM_Base_SetConfig+0x12c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3d      	ldr	r2, [pc, #244]	@ (800397c <TIM_Base_SetConfig+0x130>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a32      	ldr	r2, [pc, #200]	@ (800396c <TIM_Base_SetConfig+0x120>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02b      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ac:	d027      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003970 <TIM_Base_SetConfig+0x124>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d023      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003974 <TIM_Base_SetConfig+0x128>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003978 <TIM_Base_SetConfig+0x12c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01b      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	@ (800397c <TIM_Base_SetConfig+0x130>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d017      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <TIM_Base_SetConfig+0x134>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003984 <TIM_Base_SetConfig+0x138>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00f      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <TIM_Base_SetConfig+0x13c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a28      	ldr	r2, [pc, #160]	@ (800398c <TIM_Base_SetConfig+0x140>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a27      	ldr	r2, [pc, #156]	@ (8003990 <TIM_Base_SetConfig+0x144>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a26      	ldr	r2, [pc, #152]	@ (8003994 <TIM_Base_SetConfig+0x148>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0e      	ldr	r2, [pc, #56]	@ (800396c <TIM_Base_SetConfig+0x120>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0xf2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a10      	ldr	r2, [pc, #64]	@ (800397c <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d103      	bne.n	8003946 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f043 0204 	orr.w	r2, r3, #4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40010400 	.word	0x40010400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800
 800398c:	40001800 	.word	0x40001800
 8003990:	40001c00 	.word	0x40001c00
 8003994:	40002000 	.word	0x40002000

08003998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f023 0201 	bic.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0302 	bic.w	r3, r3, #2
 80039e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a20      	ldr	r2, [pc, #128]	@ (8003a70 <TIM_OC1_SetConfig+0xd8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_OC1_SetConfig+0x64>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <TIM_OC1_SetConfig+0xdc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10c      	bne.n	8003a16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f023 0308 	bic.w	r3, r3, #8
 8003a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <TIM_OC1_SetConfig+0xd8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_OC1_SetConfig+0x8e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <TIM_OC1_SetConfig+0xdc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d111      	bne.n	8003a4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40010400 	.word	0x40010400

08003a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f023 0210 	bic.w	r2, r3, #16
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0320 	bic.w	r3, r3, #32
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <TIM_OC2_SetConfig+0xe4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_OC2_SetConfig+0x68>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <TIM_OC2_SetConfig+0xe8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d10d      	bne.n	8003afc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <TIM_OC2_SetConfig+0xe4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_OC2_SetConfig+0x94>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a16      	ldr	r2, [pc, #88]	@ (8003b60 <TIM_OC2_SetConfig+0xe8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d113      	bne.n	8003b34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40010400 	.word	0x40010400

08003b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a21      	ldr	r2, [pc, #132]	@ (8003c44 <TIM_OC3_SetConfig+0xe0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <TIM_OC3_SetConfig+0x66>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <TIM_OC3_SetConfig+0xe4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10d      	bne.n	8003be6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <TIM_OC3_SetConfig+0xe0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC3_SetConfig+0x92>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a15      	ldr	r2, [pc, #84]	@ (8003c48 <TIM_OC3_SetConfig+0xe4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d113      	bne.n	8003c1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010400 	.word	0x40010400

08003c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	031b      	lsls	r3, r3, #12
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a12      	ldr	r2, [pc, #72]	@ (8003cf0 <TIM_OC4_SetConfig+0xa4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_OC4_SetConfig+0x68>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <TIM_OC4_SetConfig+0xa8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d109      	bne.n	8003cc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 0201 	bic.w	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 030a 	bic.w	r3, r3, #10
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0210 	bic.w	r2, r3, #16
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	031b      	lsls	r3, r3, #12
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f043 0307 	orr.w	r3, r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	021a      	lsls	r2, r3, #8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2201      	movs	r2, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e05a      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	@ (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d01d      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1b      	ldr	r2, [pc, #108]	@ (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	@ (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a15      	ldr	r2, [pc, #84]	@ (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40001800 	.word	0x40001800

08003f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <__NVIC_SetPriority>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	db0a      	blt.n	8003fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	490c      	ldr	r1, [pc, #48]	@ (8003fe4 <__NVIC_SetPriority+0x4c>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	0112      	lsls	r2, r2, #4
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003fc0:	e00a      	b.n	8003fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4908      	ldr	r1, [pc, #32]	@ (8003fe8 <__NVIC_SetPriority+0x50>)
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	761a      	strb	r2, [r3, #24]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <SysTick_Handler+0x1c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ff4:	f001 fd46 	bl	8005a84 <xTaskGetSchedulerState>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d001      	beq.n	8004002 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ffe:	f002 fb3b 	bl	8006678 <xPortSysTickHandler>
  }
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000e010 	.word	0xe000e010

0800400c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004010:	2100      	movs	r1, #0
 8004012:	f06f 0004 	mvn.w	r0, #4
 8004016:	f7ff ffbf 	bl	8003f98 <__NVIC_SetPriority>
#endif
}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004026:	f3ef 8305 	mrs	r3, IPSR
 800402a:	603b      	str	r3, [r7, #0]
  return(result);
 800402c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004032:	f06f 0305 	mvn.w	r3, #5
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	e00c      	b.n	8004054 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800403a:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <osKernelInitialize+0x44>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004042:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <osKernelInitialize+0x44>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004048:	2300      	movs	r3, #0
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	e002      	b.n	8004054 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004054:	687b      	ldr	r3, [r7, #4]
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200005c4 	.word	0x200005c4

08004068 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800406e:	f3ef 8305 	mrs	r3, IPSR
 8004072:	603b      	str	r3, [r7, #0]
  return(result);
 8004074:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <osKernelStart+0x1a>
    stat = osErrorISR;
 800407a:	f06f 0305 	mvn.w	r3, #5
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	e010      	b.n	80040a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <osKernelStart+0x48>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d109      	bne.n	800409e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800408a:	f7ff ffbf 	bl	800400c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <osKernelStart+0x48>)
 8004090:	2202      	movs	r2, #2
 8004092:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004094:	f001 f892 	bl	80051bc <vTaskStartScheduler>
      stat = osOK;
 8004098:	2300      	movs	r3, #0
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e002      	b.n	80040a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040a4:	687b      	ldr	r3, [r7, #4]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200005c4 	.word	0x200005c4

080040b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	@ 0x38
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c4:	f3ef 8305 	mrs	r3, IPSR
 80040c8:	617b      	str	r3, [r7, #20]
  return(result);
 80040ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d17e      	bne.n	80041ce <osThreadNew+0x11a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d07b      	beq.n	80041ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040da:	2318      	movs	r3, #24
 80040dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d045      	beq.n	800417a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <osThreadNew+0x48>
        name = attr->name;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <osThreadNew+0x6e>
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b38      	cmp	r3, #56	@ 0x38
 8004114:	d805      	bhi.n	8004122 <osThreadNew+0x6e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <osThreadNew+0x72>
        return (NULL);
 8004122:	2300      	movs	r3, #0
 8004124:	e054      	b.n	80041d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00e      	beq.n	800415c <osThreadNew+0xa8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2ba7      	cmp	r3, #167	@ 0xa7
 8004144:	d90a      	bls.n	800415c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <osThreadNew+0xa8>
        mem = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e010      	b.n	800417e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10c      	bne.n	800417e <osThreadNew+0xca>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d108      	bne.n	800417e <osThreadNew+0xca>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <osThreadNew+0xca>
          mem = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e001      	b.n	800417e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d110      	bne.n	80041a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800418c:	9202      	str	r2, [sp, #8]
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fe1a 	bl	8004dd4 <xTaskCreateStatic>
 80041a0:	4603      	mov	r3, r0
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	e013      	b.n	80041ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d110      	bne.n	80041ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fe68 	bl	8004e94 <xTaskCreate>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <osThreadNew+0x11a>
            hTask = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041ce:	693b      	ldr	r3, [r7, #16]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e0:	f3ef 8305 	mrs	r3, IPSR
 80041e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <osDelay+0x1c>
    stat = osErrorISR;
 80041ec:	f06f 0305 	mvn.w	r3, #5
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e007      	b.n	8004204 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <osDelay+0x2c>
      vTaskDelay(ticks);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 ffa6 	bl	8005150 <vTaskDelay>
    }
  }

  return (stat);
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a07      	ldr	r2, [pc, #28]	@ (800423c <vApplicationGetIdleTaskMemory+0x2c>)
 8004220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4a06      	ldr	r2, [pc, #24]	@ (8004240 <vApplicationGetIdleTaskMemory+0x30>)
 8004226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2280      	movs	r2, #128	@ 0x80
 800422c:	601a      	str	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200005c8 	.word	0x200005c8
 8004240:	20000670 	.word	0x20000670

08004244 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a07      	ldr	r2, [pc, #28]	@ (8004270 <vApplicationGetTimerTaskMemory+0x2c>)
 8004254:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a06      	ldr	r2, [pc, #24]	@ (8004274 <vApplicationGetTimerTaskMemory+0x30>)
 800425a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000870 	.word	0x20000870
 8004274:	20000918 	.word	0x20000918

08004278 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 0208 	add.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004290:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f103 0208 	add.w	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004330:	d103      	bne.n	800433a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e00c      	b.n	8004354 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3308      	adds	r3, #8
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e002      	b.n	8004348 <vListInsert+0x2e>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	d2f6      	bcs.n	8004342 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6892      	ldr	r2, [r2, #8]
 80043a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6852      	ldr	r2, [r2, #4]
 80043ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d103      	bne.n	80043c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800440c:	f002 f8a4 	bl	8006558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	68f9      	ldr	r1, [r7, #12]
 800441a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	3b01      	subs	r3, #1
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	441a      	add	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	22ff      	movs	r2, #255	@ 0xff
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	@ 0xff
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d114      	bne.n	800448c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01a      	beq.n	80044a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3310      	adds	r3, #16
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f942 	bl	80056f8 <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d012      	beq.n	80044a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <xQueueGenericReset+0xd0>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	e009      	b.n	80044a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3310      	adds	r3, #16
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fef1 	bl	8004278 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff feec 	bl	8004278 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f002 f88c 	bl	80065bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044a4:	2301      	movs	r3, #1
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	@ 0x38
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <xQueueGenericCreateStatic+0x56>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <xQueueGenericCreateStatic+0x5a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericCreateStatic+0x5c>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <xQueueGenericCreateStatic+0x84>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <xQueueGenericCreateStatic+0x88>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <xQueueGenericCreateStatic+0x8a>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61fb      	str	r3, [r7, #28]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800455a:	2350      	movs	r3, #80	@ 0x50
 800455c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b50      	cmp	r3, #80	@ 0x50
 8004562:	d00b      	beq.n	800457c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	61bb      	str	r3, [r7, #24]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800457c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004590:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f805 	bl	80045ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3730      	adds	r7, #48	@ 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e002      	b.n	80045d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045dc:	2101      	movs	r1, #1
 80045de:	69b8      	ldr	r0, [r7, #24]
 80045e0:	f7ff fefe 	bl	80043e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	@ 0x38
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <xQueueGenericSend+0x34>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <xQueueGenericSend+0x42>
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xQueueGenericSend+0x46>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xQueueGenericSend+0x48>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <xQueueGenericSend+0x64>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d103      	bne.n	8004666 <xQueueGenericSend+0x72>
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <xQueueGenericSend+0x76>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <xQueueGenericSend+0x78>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <xQueueGenericSend+0x94>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	623b      	str	r3, [r7, #32]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004688:	f001 f9fc 	bl	8005a84 <xTaskGetSchedulerState>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <xQueueGenericSend+0xa4>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <xQueueGenericSend+0xa8>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <xQueueGenericSend+0xaa>
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <xQueueGenericSend+0xc6>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	61fb      	str	r3, [r7, #28]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ba:	f001 ff4d 	bl	8006558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <xQueueGenericSend+0xdc>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d129      	bne.n	8004724 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046d6:	f000 fa0f 	bl	8004af8 <prvCopyDataToQueue>
 80046da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	3324      	adds	r3, #36	@ 0x24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 f805 	bl	80056f8 <xTaskRemoveFromEventList>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046f4:	4b3f      	ldr	r3, [pc, #252]	@ (80047f4 <xQueueGenericSend+0x200>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	e00a      	b.n	800471c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b39      	ldr	r3, [pc, #228]	@ (80047f4 <xQueueGenericSend+0x200>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800471c:	f001 ff4e 	bl	80065bc <vPortExitCritical>
				return pdPASS;
 8004720:	2301      	movs	r3, #1
 8004722:	e063      	b.n	80047ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800472a:	f001 ff47 	bl	80065bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800472e:	2300      	movs	r3, #0
 8004730:	e05c      	b.n	80047ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4618      	mov	r0, r3
 800473e:	f001 f83f 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004742:	2301      	movs	r3, #1
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004746:	f001 ff39 	bl	80065bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800474a:	f000 fda7 	bl	800529c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474e:	f001 ff03 	bl	8006558 <vPortEnterCritical>
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004758:	b25b      	sxtb	r3, r3
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800475e:	d103      	bne.n	8004768 <xQueueGenericSend+0x174>
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004774:	d103      	bne.n	800477e <xQueueGenericSend+0x18a>
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800477e:	f001 ff1d 	bl	80065bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004782:	1d3a      	adds	r2, r7, #4
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f001 f82e 	bl	80057ec <xTaskCheckForTimeOut>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d124      	bne.n	80047e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004796:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004798:	f000 faa6 	bl	8004ce8 <prvIsQueueFull>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d018      	beq.n	80047d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	3310      	adds	r3, #16
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 ff52 	bl	8005654 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047b2:	f000 fa31 	bl	8004c18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047b6:	f000 fd7f 	bl	80052b8 <xTaskResumeAll>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f af7c 	bne.w	80046ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047c2:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <xQueueGenericSend+0x200>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	e772      	b.n	80046ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047d6:	f000 fa1f 	bl	8004c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047da:	f000 fd6d 	bl	80052b8 <xTaskResumeAll>
 80047de:	e76c      	b.n	80046ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047e2:	f000 fa19 	bl	8004c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e6:	f000 fd67 	bl	80052b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3738      	adds	r7, #56	@ 0x38
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b090      	sub	sp, #64	@ 0x40
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800480a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueGenericSendFromISR+0x3e>
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <xQueueGenericSendFromISR+0x42>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSendFromISR+0x44>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d103      	bne.n	8004866 <xQueueGenericSendFromISR+0x6e>
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <xQueueGenericSendFromISR+0x72>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericSendFromISR+0x74>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004888:	f001 ff46 	bl	8006718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800488c:	f3ef 8211 	mrs	r2, BASEPRI
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61fa      	str	r2, [r7, #28]
 80048a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <xQueueGenericSendFromISR+0xc2>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d12f      	bne.n	800491a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80048d0:	f000 f912 	bl	8004af8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048dc:	d112      	bne.n	8004904 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e8:	3324      	adds	r3, #36	@ 0x24
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 ff04 	bl	80056f8 <xTaskRemoveFromEventList>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00e      	beq.n	8004914 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e007      	b.n	8004914 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004904:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004908:	3301      	adds	r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	b25a      	sxtb	r2, r3
 800490e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004914:	2301      	movs	r3, #1
 8004916:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004918:	e001      	b.n	800491e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800491a:	2300      	movs	r3, #0
 800491c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800491e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004920:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004928:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800492a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800492c:	4618      	mov	r0, r3
 800492e:	3740      	adds	r7, #64	@ 0x40
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	@ 0x30
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <xQueueReceive+0x32>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	623b      	str	r3, [r7, #32]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d103      	bne.n	8004974 <xQueueReceive+0x40>
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <xQueueReceive+0x44>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <xQueueReceive+0x46>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <xQueueReceive+0x62>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	61fb      	str	r3, [r7, #28]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004996:	f001 f875 	bl	8005a84 <xTaskGetSchedulerState>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <xQueueReceive+0x72>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <xQueueReceive+0x76>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueReceive+0x78>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <xQueueReceive+0x94>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61bb      	str	r3, [r7, #24]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049c8:	f001 fdc6 	bl	8006558 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01f      	beq.n	8004a18 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049dc:	f000 f8f6 	bl	8004bcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00f      	beq.n	8004a10 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	3310      	adds	r3, #16
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fe7f 	bl	80056f8 <xTaskRemoveFromEventList>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a00:	4b3c      	ldr	r3, [pc, #240]	@ (8004af4 <xQueueReceive+0x1c0>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a10:	f001 fdd4 	bl	80065bc <vPortExitCritical>
				return pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e069      	b.n	8004aec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a1e:	f001 fdcd 	bl	80065bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e062      	b.n	8004aec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fec5 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a3a:	f001 fdbf 	bl	80065bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a3e:	f000 fc2d 	bl	800529c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a42:	f001 fd89 	bl	8006558 <vPortEnterCritical>
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a4c:	b25b      	sxtb	r3, r3
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a52:	d103      	bne.n	8004a5c <xQueueReceive+0x128>
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a68:	d103      	bne.n	8004a72 <xQueueReceive+0x13e>
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a72:	f001 fda3 	bl	80065bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a76:	1d3a      	adds	r2, r7, #4
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 feb4 	bl	80057ec <xTaskCheckForTimeOut>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d123      	bne.n	8004ad2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a8c:	f000 f916 	bl	8004cbc <prvIsQueueEmpty>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d017      	beq.n	8004ac6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a98:	3324      	adds	r3, #36	@ 0x24
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fdd8 	bl	8005654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aa6:	f000 f8b7 	bl	8004c18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aaa:	f000 fc05 	bl	80052b8 <xTaskResumeAll>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d189      	bne.n	80049c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8004af4 <xQueueReceive+0x1c0>)
 8004ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	e780      	b.n	80049c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac8:	f000 f8a6 	bl	8004c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004acc:	f000 fbf4 	bl	80052b8 <xTaskResumeAll>
 8004ad0:	e77a      	b.n	80049c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad4:	f000 f8a0 	bl	8004c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ad8:	f000 fbee 	bl	80052b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ade:	f000 f8ed 	bl	8004cbc <prvIsQueueEmpty>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f43f af6f 	beq.w	80049c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3730      	adds	r7, #48	@ 0x30
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d14d      	bne.n	8004bba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 ffcc 	bl	8005ac0 <xTaskPriorityDisinherit>
 8004b28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	e043      	b.n	8004bba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d119      	bne.n	8004b6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6858      	ldr	r0, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	461a      	mov	r2, r3
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	f002 f8e6 	bl	8006d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d32b      	bcc.n	8004bba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	e026      	b.n	8004bba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68d8      	ldr	r0, [r3, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	461a      	mov	r2, r3
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	f002 f8cc 	bl	8006d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	425b      	negs	r3, r3
 8004b86:	441a      	add	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d207      	bcs.n	8004ba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	425b      	negs	r3, r3
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d105      	bne.n	8004bba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d303      	bcc.n	8004c00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68d9      	ldr	r1, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6838      	ldr	r0, [r7, #0]
 8004c0c:	f002 f882 	bl	8006d14 <memcpy>
	}
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c20:	f001 fc9a 	bl	8006558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c2c:	e011      	b.n	8004c52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3324      	adds	r3, #36	@ 0x24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fd5c 	bl	80056f8 <xTaskRemoveFromEventList>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c46:	f000 fe35 	bl	80058b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	dce9      	bgt.n	8004c2e <prvUnlockQueue+0x16>
 8004c5a:	e000      	b.n	8004c5e <prvUnlockQueue+0x46>
					break;
 8004c5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	22ff      	movs	r2, #255	@ 0xff
 8004c62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c66:	f001 fca9 	bl	80065bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c6a:	f001 fc75 	bl	8006558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c76:	e011      	b.n	8004c9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3310      	adds	r3, #16
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fd37 	bl	80056f8 <xTaskRemoveFromEventList>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c90:	f000 fe10 	bl	80058b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c94:	7bbb      	ldrb	r3, [r7, #14]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dce9      	bgt.n	8004c78 <prvUnlockQueue+0x60>
 8004ca4:	e000      	b.n	8004ca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	22ff      	movs	r2, #255	@ 0xff
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004cb0:	f001 fc84 	bl	80065bc <vPortExitCritical>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc4:	f001 fc48 	bl	8006558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e001      	b.n	8004cda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cda:	f001 fc6f 	bl	80065bc <vPortExitCritical>

	return xReturn;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf0:	f001 fc32 	bl	8006558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d102      	bne.n	8004d06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e001      	b.n	8004d0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d0a:	f001 fc57 	bl	80065bc <vPortExitCritical>

	return xReturn;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e014      	b.n	8004d52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d28:	4a0f      	ldr	r2, [pc, #60]	@ (8004d68 <vQueueAddToRegistry+0x50>)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d34:	490c      	ldr	r1, [pc, #48]	@ (8004d68 <vQueueAddToRegistry+0x50>)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <vQueueAddToRegistry+0x50>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d4a:	e006      	b.n	8004d5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b07      	cmp	r3, #7
 8004d56:	d9e7      	bls.n	8004d28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000d18 	.word	0x20000d18

08004d6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d7c:	f001 fbec 	bl	8006558 <vPortEnterCritical>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d8c:	d103      	bne.n	8004d96 <vQueueWaitForMessageRestricted+0x2a>
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d9c:	b25b      	sxtb	r3, r3
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da2:	d103      	bne.n	8004dac <vQueueWaitForMessageRestricted+0x40>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dac:	f001 fc06 	bl	80065bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3324      	adds	r3, #36	@ 0x24
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fc6d 	bl	80056a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff ff26 	bl	8004c18 <prvUnlockQueue>
	}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	@ 0x38
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	623b      	str	r3, [r7, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	61fb      	str	r3, [r7, #28]
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e1e:	23a8      	movs	r3, #168	@ 0xa8
 8004e20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2ba8      	cmp	r3, #168	@ 0xa8
 8004e26:	d00b      	beq.n	8004e40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	61bb      	str	r3, [r7, #24]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01e      	beq.n	8004e86 <xTaskCreateStatic+0xb2>
 8004e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01b      	beq.n	8004e86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e60:	2300      	movs	r3, #0
 8004e62:	9303      	str	r3, [sp, #12]
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	9302      	str	r3, [sp, #8]
 8004e68:	f107 0314 	add.w	r3, r7, #20
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f851 	bl	8004f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e80:	f000 f8f6 	bl	8005070 <prvAddNewTaskToReadyList>
 8004e84:	e001      	b.n	8004e8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e8a:	697b      	ldr	r3, [r7, #20]
	}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3728      	adds	r7, #40	@ 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	@ 0x30
 8004e98:	af04      	add	r7, sp, #16
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 fc77 	bl	800679c <pvPortMalloc>
 8004eae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004eb6:	20a8      	movs	r0, #168	@ 0xa8
 8004eb8:	f001 fc70 	bl	800679c <pvPortMalloc>
 8004ebc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eca:	e005      	b.n	8004ed8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ecc:	6978      	ldr	r0, [r7, #20]
 8004ece:	f001 fd33 	bl	8006938 <vPortFree>
 8004ed2:	e001      	b.n	8004ed8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d017      	beq.n	8004f0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	9302      	str	r3, [sp, #8]
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f80f 	bl	8004f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f02:	69f8      	ldr	r0, [r7, #28]
 8004f04:	f000 f8b4 	bl	8005070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e002      	b.n	8004f14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f14:	69bb      	ldr	r3, [r7, #24]
	}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	21a5      	movs	r1, #165	@ 0xa5
 8004f3a:	f001 fe59 	bl	8006bf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f023 0307 	bic.w	r3, r3, #7
 8004f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	617b      	str	r3, [r7, #20]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01f      	beq.n	8004fc0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e012      	b.n	8004fac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	7819      	ldrb	r1, [r3, #0]
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	3334      	adds	r3, #52	@ 0x34
 8004f96:	460a      	mov	r2, r1
 8004f98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d9e9      	bls.n	8004f86 <prvInitialiseNewTask+0x66>
 8004fb2:	e000      	b.n	8004fb6 <prvInitialiseNewTask+0x96>
			{
				break;
 8004fb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fbe:	e003      	b.n	8004fc8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	2b37      	cmp	r3, #55	@ 0x37
 8004fcc:	d901      	bls.n	8004fd2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fce:	2337      	movs	r3, #55	@ 0x37
 8004fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff f965 	bl	80042b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	3318      	adds	r3, #24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff f960 	bl	80042b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ffc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	2200      	movs	r2, #0
 8005012:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	2200      	movs	r2, #0
 800501a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	3354      	adds	r3, #84	@ 0x54
 8005022:	224c      	movs	r2, #76	@ 0x4c
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f001 fde2 	bl	8006bf0 <memset>
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	4a0d      	ldr	r2, [pc, #52]	@ (8005064 <prvInitialiseNewTask+0x144>)
 8005030:	659a      	str	r2, [r3, #88]	@ 0x58
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <prvInitialiseNewTask+0x148>)
 8005036:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	4a0c      	ldr	r2, [pc, #48]	@ (800506c <prvInitialiseNewTask+0x14c>)
 800503c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	f001 f95a 	bl	80062fc <pxPortInitialiseStack>
 8005048:	4602      	mov	r2, r0
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800504e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800505a:	bf00      	nop
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20004fac 	.word	0x20004fac
 8005068:	20005014 	.word	0x20005014
 800506c:	2000507c 	.word	0x2000507c

08005070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005078:	f001 fa6e 	bl	8006558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800507c:	4b2d      	ldr	r3, [pc, #180]	@ (8005134 <prvAddNewTaskToReadyList+0xc4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	4a2c      	ldr	r2, [pc, #176]	@ (8005134 <prvAddNewTaskToReadyList+0xc4>)
 8005084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005086:	4b2c      	ldr	r3, [pc, #176]	@ (8005138 <prvAddNewTaskToReadyList+0xc8>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800508e:	4a2a      	ldr	r2, [pc, #168]	@ (8005138 <prvAddNewTaskToReadyList+0xc8>)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005094:	4b27      	ldr	r3, [pc, #156]	@ (8005134 <prvAddNewTaskToReadyList+0xc4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d110      	bne.n	80050be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800509c:	f000 fc2e 	bl	80058fc <prvInitialiseTaskLists>
 80050a0:	e00d      	b.n	80050be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050a2:	4b26      	ldr	r3, [pc, #152]	@ (800513c <prvAddNewTaskToReadyList+0xcc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050aa:	4b23      	ldr	r3, [pc, #140]	@ (8005138 <prvAddNewTaskToReadyList+0xc8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d802      	bhi.n	80050be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005138 <prvAddNewTaskToReadyList+0xc8>)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050be:	4b20      	ldr	r3, [pc, #128]	@ (8005140 <prvAddNewTaskToReadyList+0xd0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <prvAddNewTaskToReadyList+0xd0>)
 80050c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <prvAddNewTaskToReadyList+0xd0>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <prvAddNewTaskToReadyList+0xd4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d903      	bls.n	80050e4 <prvAddNewTaskToReadyList+0x74>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <prvAddNewTaskToReadyList+0xd4>)
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a15      	ldr	r2, [pc, #84]	@ (8005148 <prvAddNewTaskToReadyList+0xd8>)
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7ff f8e9 	bl	80042d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005100:	f001 fa5c 	bl	80065bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005104:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <prvAddNewTaskToReadyList+0xcc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00e      	beq.n	800512a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800510c:	4b0a      	ldr	r3, [pc, #40]	@ (8005138 <prvAddNewTaskToReadyList+0xc8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	429a      	cmp	r2, r3
 8005118:	d207      	bcs.n	800512a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <prvAddNewTaskToReadyList+0xdc>)
 800511c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	2000122c 	.word	0x2000122c
 8005138:	20000d58 	.word	0x20000d58
 800513c:	20001238 	.word	0x20001238
 8005140:	20001248 	.word	0x20001248
 8005144:	20001234 	.word	0x20001234
 8005148:	20000d5c 	.word	0x20000d5c
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d018      	beq.n	8005194 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <vTaskDelay+0x64>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <vTaskDelay+0x32>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	60bb      	str	r3, [r7, #8]
}
 800517c:	bf00      	nop
 800517e:	bf00      	nop
 8005180:	e7fd      	b.n	800517e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005182:	f000 f88b 	bl	800529c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005186:	2100      	movs	r1, #0
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fd09 	bl	8005ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800518e:	f000 f893 	bl	80052b8 <xTaskResumeAll>
 8005192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <vTaskDelay+0x68>)
 800519c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20001254 	.word	0x20001254
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051ca:	463a      	mov	r2, r7
 80051cc:	1d39      	adds	r1, r7, #4
 80051ce:	f107 0308 	add.w	r3, r7, #8
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff f81c 	bl	8004210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	9202      	str	r2, [sp, #8]
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	460a      	mov	r2, r1
 80051ea:	4924      	ldr	r1, [pc, #144]	@ (800527c <vTaskStartScheduler+0xc0>)
 80051ec:	4824      	ldr	r0, [pc, #144]	@ (8005280 <vTaskStartScheduler+0xc4>)
 80051ee:	f7ff fdf1 	bl	8004dd4 <xTaskCreateStatic>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a23      	ldr	r2, [pc, #140]	@ (8005284 <vTaskStartScheduler+0xc8>)
 80051f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051f8:	4b22      	ldr	r3, [pc, #136]	@ (8005284 <vTaskStartScheduler+0xc8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005200:	2301      	movs	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e001      	b.n	800520a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d102      	bne.n	8005216 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005210:	f000 fd1a 	bl	8005c48 <xTimerCreateTimerTask>
 8005214:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d11b      	bne.n	8005254 <vTaskStartScheduler+0x98>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	613b      	str	r3, [r7, #16]
}
 800522e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005230:	4b15      	ldr	r3, [pc, #84]	@ (8005288 <vTaskStartScheduler+0xcc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3354      	adds	r3, #84	@ 0x54
 8005236:	4a15      	ldr	r2, [pc, #84]	@ (800528c <vTaskStartScheduler+0xd0>)
 8005238:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800523a:	4b15      	ldr	r3, [pc, #84]	@ (8005290 <vTaskStartScheduler+0xd4>)
 800523c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005240:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <vTaskStartScheduler+0xd8>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005248:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <vTaskStartScheduler+0xdc>)
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800524e:	f001 f8df 	bl	8006410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005252:	e00f      	b.n	8005274 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800525a:	d10b      	bne.n	8005274 <vTaskStartScheduler+0xb8>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60fb      	str	r3, [r7, #12]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <vTaskStartScheduler+0xb4>
}
 8005274:	bf00      	nop
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	080075fc 	.word	0x080075fc
 8005280:	080058cd 	.word	0x080058cd
 8005284:	20001250 	.word	0x20001250
 8005288:	20000d58 	.word	0x20000d58
 800528c:	20000010 	.word	0x20000010
 8005290:	2000124c 	.word	0x2000124c
 8005294:	20001238 	.word	0x20001238
 8005298:	20001230 	.word	0x20001230

0800529c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052a0:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <vTaskSuspendAll+0x18>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	4a03      	ldr	r2, [pc, #12]	@ (80052b4 <vTaskSuspendAll+0x18>)
 80052a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	20001254 	.word	0x20001254

080052b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052c6:	4b42      	ldr	r3, [pc, #264]	@ (80053d0 <xTaskResumeAll+0x118>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	603b      	str	r3, [r7, #0]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052e6:	f001 f937 	bl	8006558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ea:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <xTaskResumeAll+0x118>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	4a37      	ldr	r2, [pc, #220]	@ (80053d0 <xTaskResumeAll+0x118>)
 80052f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f4:	4b36      	ldr	r3, [pc, #216]	@ (80053d0 <xTaskResumeAll+0x118>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d162      	bne.n	80053c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052fc:	4b35      	ldr	r3, [pc, #212]	@ (80053d4 <xTaskResumeAll+0x11c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d05e      	beq.n	80053c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005304:	e02f      	b.n	8005366 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005306:	4b34      	ldr	r3, [pc, #208]	@ (80053d8 <xTaskResumeAll+0x120>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3318      	adds	r3, #24
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff f83a 	bl	800438c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3304      	adds	r3, #4
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff f835 	bl	800438c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <xTaskResumeAll+0x124>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d903      	bls.n	8005336 <xTaskResumeAll+0x7e>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	4a2a      	ldr	r2, [pc, #168]	@ (80053dc <xTaskResumeAll+0x124>)
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4a27      	ldr	r2, [pc, #156]	@ (80053e0 <xTaskResumeAll+0x128>)
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7fe ffc0 	bl	80042d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005356:	4b23      	ldr	r3, [pc, #140]	@ (80053e4 <xTaskResumeAll+0x12c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005360:	4b21      	ldr	r3, [pc, #132]	@ (80053e8 <xTaskResumeAll+0x130>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005366:	4b1c      	ldr	r3, [pc, #112]	@ (80053d8 <xTaskResumeAll+0x120>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cb      	bne.n	8005306 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005374:	f000 fb66 	bl	8005a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005378:	4b1c      	ldr	r3, [pc, #112]	@ (80053ec <xTaskResumeAll+0x134>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005384:	f000 f846 	bl	8005414 <xTaskIncrementTick>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800538e:	4b16      	ldr	r3, [pc, #88]	@ (80053e8 <xTaskResumeAll+0x130>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3b01      	subs	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80053a0:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <xTaskResumeAll+0x134>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053a6:	4b10      	ldr	r3, [pc, #64]	@ (80053e8 <xTaskResumeAll+0x130>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <xTaskResumeAll+0x138>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053c2:	f001 f8fb 	bl	80065bc <vPortExitCritical>

	return xAlreadyYielded;
 80053c6:	68bb      	ldr	r3, [r7, #8]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20001254 	.word	0x20001254
 80053d4:	2000122c 	.word	0x2000122c
 80053d8:	200011ec 	.word	0x200011ec
 80053dc:	20001234 	.word	0x20001234
 80053e0:	20000d5c 	.word	0x20000d5c
 80053e4:	20000d58 	.word	0x20000d58
 80053e8:	20001240 	.word	0x20001240
 80053ec:	2000123c 	.word	0x2000123c
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053fa:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <xTaskGetTickCount+0x1c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005400:	687b      	ldr	r3, [r7, #4]
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20001230 	.word	0x20001230

08005414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541e:	4b4f      	ldr	r3, [pc, #316]	@ (800555c <xTaskIncrementTick+0x148>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 8090 	bne.w	8005548 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005428:	4b4d      	ldr	r3, [pc, #308]	@ (8005560 <xTaskIncrementTick+0x14c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005430:	4a4b      	ldr	r2, [pc, #300]	@ (8005560 <xTaskIncrementTick+0x14c>)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d121      	bne.n	8005480 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800543c:	4b49      	ldr	r3, [pc, #292]	@ (8005564 <xTaskIncrementTick+0x150>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	603b      	str	r3, [r7, #0]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <xTaskIncrementTick+0x46>
 800545e:	4b41      	ldr	r3, [pc, #260]	@ (8005564 <xTaskIncrementTick+0x150>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	4b40      	ldr	r3, [pc, #256]	@ (8005568 <xTaskIncrementTick+0x154>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a3e      	ldr	r2, [pc, #248]	@ (8005564 <xTaskIncrementTick+0x150>)
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4a3e      	ldr	r2, [pc, #248]	@ (8005568 <xTaskIncrementTick+0x154>)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b3e      	ldr	r3, [pc, #248]	@ (800556c <xTaskIncrementTick+0x158>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	4a3c      	ldr	r2, [pc, #240]	@ (800556c <xTaskIncrementTick+0x158>)
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	f000 fae2 	bl	8005a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005480:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <xTaskIncrementTick+0x15c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d349      	bcc.n	800551e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800548a:	4b36      	ldr	r3, [pc, #216]	@ (8005564 <xTaskIncrementTick+0x150>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005494:	4b36      	ldr	r3, [pc, #216]	@ (8005570 <xTaskIncrementTick+0x15c>)
 8005496:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800549a:	601a      	str	r2, [r3, #0]
					break;
 800549c:	e03f      	b.n	800551e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549e:	4b31      	ldr	r3, [pc, #196]	@ (8005564 <xTaskIncrementTick+0x150>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d203      	bcs.n	80054be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005570 <xTaskIncrementTick+0x15c>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054bc:	e02f      	b.n	800551e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe ff62 	bl	800438c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3318      	adds	r3, #24
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe ff59 	bl	800438c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054de:	4b25      	ldr	r3, [pc, #148]	@ (8005574 <xTaskIncrementTick+0x160>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d903      	bls.n	80054ee <xTaskIncrementTick+0xda>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	4a22      	ldr	r2, [pc, #136]	@ (8005574 <xTaskIncrementTick+0x160>)
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005578 <xTaskIncrementTick+0x164>)
 80054fc:	441a      	add	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7fe fee4 	bl	80042d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550e:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <xTaskIncrementTick+0x168>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	429a      	cmp	r2, r3
 8005516:	d3b8      	bcc.n	800548a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005518:	2301      	movs	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800551c:	e7b5      	b.n	800548a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800551e:	4b17      	ldr	r3, [pc, #92]	@ (800557c <xTaskIncrementTick+0x168>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005524:	4914      	ldr	r1, [pc, #80]	@ (8005578 <xTaskIncrementTick+0x164>)
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d901      	bls.n	800553a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800553a:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <xTaskIncrementTick+0x16c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005542:	2301      	movs	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e004      	b.n	8005552 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005548:	4b0e      	ldr	r3, [pc, #56]	@ (8005584 <xTaskIncrementTick+0x170>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	4a0d      	ldr	r2, [pc, #52]	@ (8005584 <xTaskIncrementTick+0x170>)
 8005550:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005552:	697b      	ldr	r3, [r7, #20]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20001254 	.word	0x20001254
 8005560:	20001230 	.word	0x20001230
 8005564:	200011e4 	.word	0x200011e4
 8005568:	200011e8 	.word	0x200011e8
 800556c:	20001244 	.word	0x20001244
 8005570:	2000124c 	.word	0x2000124c
 8005574:	20001234 	.word	0x20001234
 8005578:	20000d5c 	.word	0x20000d5c
 800557c:	20000d58 	.word	0x20000d58
 8005580:	20001240 	.word	0x20001240
 8005584:	2000123c 	.word	0x2000123c

08005588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800558e:	4b2b      	ldr	r3, [pc, #172]	@ (800563c <vTaskSwitchContext+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005596:	4b2a      	ldr	r3, [pc, #168]	@ (8005640 <vTaskSwitchContext+0xb8>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800559c:	e047      	b.n	800562e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800559e:	4b28      	ldr	r3, [pc, #160]	@ (8005640 <vTaskSwitchContext+0xb8>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a4:	4b27      	ldr	r3, [pc, #156]	@ (8005644 <vTaskSwitchContext+0xbc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e011      	b.n	80055d0 <vTaskSwitchContext+0x48>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <vTaskSwitchContext+0x42>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	607b      	str	r3, [r7, #4]
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	e7fd      	b.n	80055c6 <vTaskSwitchContext+0x3e>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	491d      	ldr	r1, [pc, #116]	@ (8005648 <vTaskSwitchContext+0xc0>)
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0e3      	beq.n	80055ac <vTaskSwitchContext+0x24>
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4a16      	ldr	r2, [pc, #88]	@ (8005648 <vTaskSwitchContext+0xc0>)
 80055f0:	4413      	add	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3308      	adds	r3, #8
 8005606:	429a      	cmp	r2, r3
 8005608:	d104      	bne.n	8005614 <vTaskSwitchContext+0x8c>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4a0c      	ldr	r2, [pc, #48]	@ (800564c <vTaskSwitchContext+0xc4>)
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <vTaskSwitchContext+0xbc>)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005624:	4b09      	ldr	r3, [pc, #36]	@ (800564c <vTaskSwitchContext+0xc4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3354      	adds	r3, #84	@ 0x54
 800562a:	4a09      	ldr	r2, [pc, #36]	@ (8005650 <vTaskSwitchContext+0xc8>)
 800562c:	6013      	str	r3, [r2, #0]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20001254 	.word	0x20001254
 8005640:	20001240 	.word	0x20001240
 8005644:	20001234 	.word	0x20001234
 8005648:	20000d5c 	.word	0x20000d5c
 800564c:	20000d58 	.word	0x20000d58
 8005650:	20000010 	.word	0x20000010

08005654 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60fb      	str	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <vTaskPlaceOnEventList+0x48>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3318      	adds	r3, #24
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fe fe48 	bl	800431a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800568a:	2101      	movs	r1, #1
 800568c:	6838      	ldr	r0, [r7, #0]
 800568e:	f000 fa87 	bl	8005ba0 <prvAddCurrentTaskToDelayedList>
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000d58 	.word	0x20000d58

080056a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	617b      	str	r3, [r7, #20]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ca:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3318      	adds	r3, #24
 80056d0:	4619      	mov	r1, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7fe fdfd 	bl	80042d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	68b8      	ldr	r0, [r7, #8]
 80056e8:	f000 fa5a 	bl	8005ba0 <prvAddCurrentTaskToDelayedList>
	}
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000d58 	.word	0x20000d58

080056f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fe2e 	bl	800438c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <xTaskRemoveFromEventList+0xb0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11d      	bne.n	8005774 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fe25 	bl	800438c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005746:	4b19      	ldr	r3, [pc, #100]	@ (80057ac <xTaskRemoveFromEventList+0xb4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d903      	bls.n	8005756 <xTaskRemoveFromEventList+0x5e>
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	4a16      	ldr	r2, [pc, #88]	@ (80057ac <xTaskRemoveFromEventList+0xb4>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <xTaskRemoveFromEventList+0xb8>)
 8005764:	441a      	add	r2, r3
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fe fdb0 	bl	80042d2 <vListInsertEnd>
 8005772:	e005      	b.n	8005780 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3318      	adds	r3, #24
 8005778:	4619      	mov	r1, r3
 800577a:	480e      	ldr	r0, [pc, #56]	@ (80057b4 <xTaskRemoveFromEventList+0xbc>)
 800577c:	f7fe fda9 	bl	80042d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005784:	4b0c      	ldr	r3, [pc, #48]	@ (80057b8 <xTaskRemoveFromEventList+0xc0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	429a      	cmp	r2, r3
 800578c:	d905      	bls.n	800579a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <xTaskRemoveFromEventList+0xc4>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e001      	b.n	800579e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20001254 	.word	0x20001254
 80057ac:	20001234 	.word	0x20001234
 80057b0:	20000d5c 	.word	0x20000d5c
 80057b4:	200011ec 	.word	0x200011ec
 80057b8:	20000d58 	.word	0x20000d58
 80057bc:	20001240 	.word	0x20001240

080057c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <vTaskInternalSetTimeOutState+0x24>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <vTaskInternalSetTimeOutState+0x28>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20001244 	.word	0x20001244
 80057e8:	20001230 	.word	0x20001230

080057ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10b      	bne.n	8005814 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	613b      	str	r3, [r7, #16]
}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60fb      	str	r3, [r7, #12]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005832:	f000 fe91 	bl	8006558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005836:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <xTaskCheckForTimeOut+0xc0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800584e:	d102      	bne.n	8005856 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e023      	b.n	800589e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b15      	ldr	r3, [pc, #84]	@ (80058b0 <xTaskCheckForTimeOut+0xc4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d007      	beq.n	8005872 <xTaskCheckForTimeOut+0x86>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	e015      	b.n	800589e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d20b      	bcs.n	8005894 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1ad2      	subs	r2, r2, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ff99 	bl	80057c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	e004      	b.n	800589e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800589e:	f000 fe8d 	bl	80065bc <vPortExitCritical>

	return xReturn;
 80058a2:	69fb      	ldr	r3, [r7, #28]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20001230 	.word	0x20001230
 80058b0:	20001244 	.word	0x20001244

080058b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058b8:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <vTaskMissedYield+0x14>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20001240 	.word	0x20001240

080058cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058d4:	f000 f852 	bl	800597c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058d8:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <prvIdleTask+0x28>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d9f9      	bls.n	80058d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058e0:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <prvIdleTask+0x2c>)
 80058e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058f0:	e7f0      	b.n	80058d4 <prvIdleTask+0x8>
 80058f2:	bf00      	nop
 80058f4:	20000d5c 	.word	0x20000d5c
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	e00c      	b.n	8005922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4a12      	ldr	r2, [pc, #72]	@ (800595c <prvInitialiseTaskLists+0x60>)
 8005914:	4413      	add	r3, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fcae 	bl	8004278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3301      	adds	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b37      	cmp	r3, #55	@ 0x37
 8005926:	d9ef      	bls.n	8005908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005928:	480d      	ldr	r0, [pc, #52]	@ (8005960 <prvInitialiseTaskLists+0x64>)
 800592a:	f7fe fca5 	bl	8004278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800592e:	480d      	ldr	r0, [pc, #52]	@ (8005964 <prvInitialiseTaskLists+0x68>)
 8005930:	f7fe fca2 	bl	8004278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005934:	480c      	ldr	r0, [pc, #48]	@ (8005968 <prvInitialiseTaskLists+0x6c>)
 8005936:	f7fe fc9f 	bl	8004278 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800593a:	480c      	ldr	r0, [pc, #48]	@ (800596c <prvInitialiseTaskLists+0x70>)
 800593c:	f7fe fc9c 	bl	8004278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005940:	480b      	ldr	r0, [pc, #44]	@ (8005970 <prvInitialiseTaskLists+0x74>)
 8005942:	f7fe fc99 	bl	8004278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <prvInitialiseTaskLists+0x78>)
 8005948:	4a05      	ldr	r2, [pc, #20]	@ (8005960 <prvInitialiseTaskLists+0x64>)
 800594a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800594c:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <prvInitialiseTaskLists+0x7c>)
 800594e:	4a05      	ldr	r2, [pc, #20]	@ (8005964 <prvInitialiseTaskLists+0x68>)
 8005950:	601a      	str	r2, [r3, #0]
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000d5c 	.word	0x20000d5c
 8005960:	200011bc 	.word	0x200011bc
 8005964:	200011d0 	.word	0x200011d0
 8005968:	200011ec 	.word	0x200011ec
 800596c:	20001200 	.word	0x20001200
 8005970:	20001218 	.word	0x20001218
 8005974:	200011e4 	.word	0x200011e4
 8005978:	200011e8 	.word	0x200011e8

0800597c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005982:	e019      	b.n	80059b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005984:	f000 fde8 	bl	8006558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005988:	4b10      	ldr	r3, [pc, #64]	@ (80059cc <prvCheckTasksWaitingTermination+0x50>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe fcf9 	bl	800438c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <prvCheckTasksWaitingTermination+0x54>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3b01      	subs	r3, #1
 80059a0:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <prvCheckTasksWaitingTermination+0x54>)
 80059a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059a4:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <prvCheckTasksWaitingTermination+0x58>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	4a0a      	ldr	r2, [pc, #40]	@ (80059d4 <prvCheckTasksWaitingTermination+0x58>)
 80059ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ae:	f000 fe05 	bl	80065bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f810 	bl	80059d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059b8:	4b06      	ldr	r3, [pc, #24]	@ (80059d4 <prvCheckTasksWaitingTermination+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e1      	bne.n	8005984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20001200 	.word	0x20001200
 80059d0:	2000122c 	.word	0x2000122c
 80059d4:	20001214 	.word	0x20001214

080059d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3354      	adds	r3, #84	@ 0x54
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 f937 	bl	8006c58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d108      	bne.n	8005a06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 ff9d 	bl	8006938 <vPortFree>
				vPortFree( pxTCB );
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 ff9a 	bl	8006938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a04:	e019      	b.n	8005a3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d103      	bne.n	8005a18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 ff91 	bl	8006938 <vPortFree>
	}
 8005a16:	e010      	b.n	8005a3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d00b      	beq.n	8005a3a <prvDeleteTCB+0x62>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60fb      	str	r3, [r7, #12]
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	e7fd      	b.n	8005a36 <prvDeleteTCB+0x5e>
	}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <prvResetNextTaskUnblockTime+0x38>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <prvResetNextTaskUnblockTime+0x3c>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a5c:	e008      	b.n	8005a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5e:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <prvResetNextTaskUnblockTime+0x38>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a04      	ldr	r2, [pc, #16]	@ (8005a80 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	200011e4 	.word	0x200011e4
 8005a80:	2000124c 	.word	0x2000124c

08005a84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <xTaskGetSchedulerState+0x34>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a92:	2301      	movs	r3, #1
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e008      	b.n	8005aaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a98:	4b08      	ldr	r3, [pc, #32]	@ (8005abc <xTaskGetSchedulerState+0x38>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	e001      	b.n	8005aaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005aaa:	687b      	ldr	r3, [r7, #4]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20001238 	.word	0x20001238
 8005abc:	20001254 	.word	0x20001254

08005ac0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d058      	beq.n	8005b88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b94 <xTaskPriorityDisinherit+0xd4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d00b      	beq.n	8005af8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60bb      	str	r3, [r7, #8]
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	e7fd      	b.n	8005b14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1c:	1e5a      	subs	r2, r3, #1
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d02c      	beq.n	8005b88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d128      	bne.n	8005b88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fc26 	bl	800438c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	4b0f      	ldr	r3, [pc, #60]	@ (8005b98 <xTaskPriorityDisinherit+0xd8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d903      	bls.n	8005b68 <xTaskPriorityDisinherit+0xa8>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4a0c      	ldr	r2, [pc, #48]	@ (8005b98 <xTaskPriorityDisinherit+0xd8>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a09      	ldr	r2, [pc, #36]	@ (8005b9c <xTaskPriorityDisinherit+0xdc>)
 8005b76:	441a      	add	r2, r3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe fba7 	bl	80042d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b88:	697b      	ldr	r3, [r7, #20]
	}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000d58 	.word	0x20000d58
 8005b98:	20001234 	.word	0x20001234
 8005b9c:	20000d5c 	.word	0x20000d5c

08005ba0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005baa:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0x90>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bb0:	4b20      	ldr	r3, [pc, #128]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe fbe8 	bl	800438c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bc2:	d10a      	bne.n	8005bda <prvAddCurrentTaskToDelayedList+0x3a>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bca:	4b1a      	ldr	r3, [pc, #104]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4819      	ldr	r0, [pc, #100]	@ (8005c38 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bd4:	f7fe fb7d 	bl	80042d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bd8:	e026      	b.n	8005c28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4413      	add	r3, r2
 8005be0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005be2:	4b14      	ldr	r3, [pc, #80]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d209      	bcs.n	8005c06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf2:	4b12      	ldr	r3, [pc, #72]	@ (8005c3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f7fe fb8b 	bl	800431a <vListInsert>
}
 8005c04:	e010      	b.n	8005c28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c06:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f7fe fb81 	bl	800431a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c18:	4b0a      	ldr	r3, [pc, #40]	@ (8005c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d202      	bcs.n	8005c28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c22:	4a08      	ldr	r2, [pc, #32]	@ (8005c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20001230 	.word	0x20001230
 8005c34:	20000d58 	.word	0x20000d58
 8005c38:	20001218 	.word	0x20001218
 8005c3c:	200011e8 	.word	0x200011e8
 8005c40:	200011e4 	.word	0x200011e4
 8005c44:	2000124c 	.word	0x2000124c

08005c48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	@ 0x28
 8005c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c52:	f000 fb13 	bl	800627c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c56:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <xTimerCreateTimerTask+0x84>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d021      	beq.n	8005ca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c66:	1d3a      	adds	r2, r7, #4
 8005c68:	f107 0108 	add.w	r1, r7, #8
 8005c6c:	f107 030c 	add.w	r3, r7, #12
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fae7 	bl	8004244 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	9202      	str	r2, [sp, #8]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	2302      	movs	r3, #2
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	460a      	mov	r2, r1
 8005c88:	4911      	ldr	r1, [pc, #68]	@ (8005cd0 <xTimerCreateTimerTask+0x88>)
 8005c8a:	4812      	ldr	r0, [pc, #72]	@ (8005cd4 <xTimerCreateTimerTask+0x8c>)
 8005c8c:	f7ff f8a2 	bl	8004dd4 <xTaskCreateStatic>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4a11      	ldr	r2, [pc, #68]	@ (8005cd8 <xTimerCreateTimerTask+0x90>)
 8005c94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c96:	4b10      	ldr	r3, [pc, #64]	@ (8005cd8 <xTimerCreateTimerTask+0x90>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10b      	bne.n	8005cc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cc0:	697b      	ldr	r3, [r7, #20]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20001288 	.word	0x20001288
 8005cd0:	08007604 	.word	0x08007604
 8005cd4:	08005e15 	.word	0x08005e15
 8005cd8:	2000128c 	.word	0x2000128c

08005cdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	@ 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <xTimerGenericCommand+0x30>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	623b      	str	r3, [r7, #32]
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d0c:	4b19      	ldr	r3, [pc, #100]	@ (8005d74 <xTimerGenericCommand+0x98>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d02a      	beq.n	8005d6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	dc18      	bgt.n	8005d58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d26:	f7ff fead 	bl	8005a84 <xTaskGetSchedulerState>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d109      	bne.n	8005d44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d30:	4b10      	ldr	r3, [pc, #64]	@ (8005d74 <xTimerGenericCommand+0x98>)
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	f107 0110 	add.w	r1, r7, #16
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d3c:	f7fe fc5a 	bl	80045f4 <xQueueGenericSend>
 8005d40:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d42:	e012      	b.n	8005d6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d44:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <xTimerGenericCommand+0x98>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	f107 0110 	add.w	r1, r7, #16
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f7fe fc50 	bl	80045f4 <xQueueGenericSend>
 8005d54:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d56:	e008      	b.n	8005d6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d58:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <xTimerGenericCommand+0x98>)
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	f107 0110 	add.w	r1, r7, #16
 8005d60:	2300      	movs	r3, #0
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	f7fe fd48 	bl	80047f8 <xQueueGenericSendFromISR>
 8005d68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3728      	adds	r7, #40	@ 0x28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20001288 	.word	0x20001288

08005d78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d82:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <prvProcessExpiredTimer+0x98>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe fafb 	bl	800438c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d023      	beq.n	8005dec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	18d1      	adds	r1, r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	6978      	ldr	r0, [r7, #20]
 8005db2:	f000 f8d5 	bl	8005f60 <prvInsertTimerInActiveList>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d020      	beq.n	8005dfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f7ff ff88 	bl	8005cdc <xTimerGenericCommand>
 8005dcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d114      	bne.n	8005dfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	6978      	ldr	r0, [r7, #20]
 8005e04:	4798      	blx	r3
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20001280 	.word	0x20001280

08005e14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e1c:	f107 0308 	add.w	r3, r7, #8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f859 	bl	8005ed8 <prvGetNextExpireTime>
 8005e26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f805 	bl	8005e3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e32:	f000 f8d7 	bl	8005fe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e36:	bf00      	nop
 8005e38:	e7f0      	b.n	8005e1c <prvTimerTask+0x8>
	...

08005e3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e46:	f7ff fa29 	bl	800529c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f866 	bl	8005f20 <prvSampleTimeNow>
 8005e54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d130      	bne.n	8005ebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <prvProcessTimerOrBlockTask+0x3c>
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d806      	bhi.n	8005e78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e6a:	f7ff fa25 	bl	80052b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff ff81 	bl	8005d78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e76:	e024      	b.n	8005ec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e7e:	4b13      	ldr	r3, [pc, #76]	@ (8005ecc <prvProcessTimerOrBlockTask+0x90>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <prvProcessTimerOrBlockTask+0x50>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <prvProcessTimerOrBlockTask+0x52>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed0 <prvProcessTimerOrBlockTask+0x94>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f7fe ff65 	bl	8004d6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ea2:	f7ff fa09 	bl	80052b8 <xTaskResumeAll>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005eac:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <prvProcessTimerOrBlockTask+0x98>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	f3bf 8f6f 	isb	sy
}
 8005ebc:	e001      	b.n	8005ec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ebe:	f7ff f9fb 	bl	80052b8 <xTaskResumeAll>
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20001284 	.word	0x20001284
 8005ed0:	20001288 	.word	0x20001288
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <prvGetNextExpireTime+0x44>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <prvGetNextExpireTime+0x16>
 8005eea:	2201      	movs	r2, #1
 8005eec:	e000      	b.n	8005ef0 <prvGetNextExpireTime+0x18>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <prvGetNextExpireTime+0x44>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e001      	b.n	8005f0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20001280 	.word	0x20001280

08005f20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f28:	f7ff fa64 	bl	80053f4 <xTaskGetTickCount>
 8005f2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <prvSampleTimeNow+0x3c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d205      	bcs.n	8005f44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f38:	f000 f93a 	bl	80061b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	e002      	b.n	8005f4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f4a:	4a04      	ldr	r2, [pc, #16]	@ (8005f5c <prvSampleTimeNow+0x3c>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20001290 	.word	0x20001290

08005f60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d812      	bhi.n	8005fac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d302      	bcc.n	8005f9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e01b      	b.n	8005fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f9a:	4b10      	ldr	r3, [pc, #64]	@ (8005fdc <prvInsertTimerInActiveList+0x7c>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fe f9b8 	bl	800431a <vListInsert>
 8005faa:	e012      	b.n	8005fd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d206      	bcs.n	8005fc2 <prvInsertTimerInActiveList+0x62>
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e007      	b.n	8005fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fc2:	4b07      	ldr	r3, [pc, #28]	@ (8005fe0 <prvInsertTimerInActiveList+0x80>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7fe f9a4 	bl	800431a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fd2:	697b      	ldr	r3, [r7, #20]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20001284 	.word	0x20001284
 8005fe0:	20001280 	.word	0x20001280

08005fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	@ 0x38
 8005fe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fea:	e0ce      	b.n	800618a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da19      	bge.n	8006026 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	61fb      	str	r3, [r7, #28]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800601c:	6850      	ldr	r0, [r2, #4]
 800601e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006020:	6892      	ldr	r2, [r2, #8]
 8006022:	4611      	mov	r1, r2
 8006024:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f2c0 80ae 	blt.w	800618a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe f9a4 	bl	800438c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006044:	463b      	mov	r3, r7
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff ff6a 	bl	8005f20 <prvSampleTimeNow>
 800604c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b09      	cmp	r3, #9
 8006052:	f200 8097 	bhi.w	8006184 <prvProcessReceivedCommands+0x1a0>
 8006056:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <prvProcessReceivedCommands+0x78>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006085 	.word	0x08006085
 8006060:	08006085 	.word	0x08006085
 8006064:	08006085 	.word	0x08006085
 8006068:	080060fb 	.word	0x080060fb
 800606c:	0800610f 	.word	0x0800610f
 8006070:	0800615b 	.word	0x0800615b
 8006074:	08006085 	.word	0x08006085
 8006078:	08006085 	.word	0x08006085
 800607c:	080060fb 	.word	0x080060fb
 8006080:	0800610f 	.word	0x0800610f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	b2da      	uxtb	r2, r3
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	18d1      	adds	r1, r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a4:	f7ff ff5c 	bl	8005f60 <prvInsertTimerInActiveList>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d06c      	beq.n	8006188 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d061      	beq.n	8006188 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	441a      	add	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	2300      	movs	r3, #0
 80060d2:	2100      	movs	r1, #0
 80060d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d6:	f7ff fe01 	bl	8005cdc <xTimerGenericCommand>
 80060da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d152      	bne.n	8006188 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80060e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	61bb      	str	r3, [r7, #24]
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	e7fd      	b.n	80060f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	b2da      	uxtb	r2, r3
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800610c:	e03d      	b.n	800618a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006124:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	617b      	str	r3, [r7, #20]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	18d1      	adds	r1, r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006154:	f7ff ff04 	bl	8005f60 <prvInsertTimerInActiveList>
					break;
 8006158:	e017      	b.n	800618a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800616a:	f000 fbe5 	bl	8006938 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800616e:	e00c      	b.n	800618a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	b2da      	uxtb	r2, r3
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006182:	e002      	b.n	800618a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006184:	bf00      	nop
 8006186:	e000      	b.n	800618a <prvProcessReceivedCommands+0x1a6>
					break;
 8006188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800618a:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <prvProcessReceivedCommands+0x1c8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	1d39      	adds	r1, r7, #4
 8006190:	2200      	movs	r2, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fbce 	bl	8004934 <xQueueReceive>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	f47f af26 	bne.w	8005fec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	3730      	adds	r7, #48	@ 0x30
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20001288 	.word	0x20001288

080061b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061b6:	e049      	b.n	800624c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006274 <prvSwitchTimerLists+0xc4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006274 <prvSwitchTimerLists+0xc4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe f8db 	bl	800438c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d02f      	beq.n	800624c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d90e      	bls.n	800621c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800620a:	4b1a      	ldr	r3, [pc, #104]	@ (8006274 <prvSwitchTimerLists+0xc4>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f7fe f880 	bl	800431a <vListInsert>
 800621a:	e017      	b.n	800624c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2300      	movs	r3, #0
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	2100      	movs	r1, #0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fd58 	bl	8005cdc <xTimerGenericCommand>
 800622c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	603b      	str	r3, [r7, #0]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800624c:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <prvSwitchTimerLists+0xc4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1b0      	bne.n	80061b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006256:	4b07      	ldr	r3, [pc, #28]	@ (8006274 <prvSwitchTimerLists+0xc4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800625c:	4b06      	ldr	r3, [pc, #24]	@ (8006278 <prvSwitchTimerLists+0xc8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <prvSwitchTimerLists+0xc4>)
 8006262:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006264:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <prvSwitchTimerLists+0xc8>)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	6013      	str	r3, [r2, #0]
}
 800626a:	bf00      	nop
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20001280 	.word	0x20001280
 8006278:	20001284 	.word	0x20001284

0800627c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006282:	f000 f969 	bl	8006558 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006286:	4b15      	ldr	r3, [pc, #84]	@ (80062dc <prvCheckForValidListAndQueue+0x60>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d120      	bne.n	80062d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800628e:	4814      	ldr	r0, [pc, #80]	@ (80062e0 <prvCheckForValidListAndQueue+0x64>)
 8006290:	f7fd fff2 	bl	8004278 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006294:	4813      	ldr	r0, [pc, #76]	@ (80062e4 <prvCheckForValidListAndQueue+0x68>)
 8006296:	f7fd ffef 	bl	8004278 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <prvCheckForValidListAndQueue+0x6c>)
 800629c:	4a10      	ldr	r2, [pc, #64]	@ (80062e0 <prvCheckForValidListAndQueue+0x64>)
 800629e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062a0:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <prvCheckForValidListAndQueue+0x70>)
 80062a2:	4a10      	ldr	r2, [pc, #64]	@ (80062e4 <prvCheckForValidListAndQueue+0x68>)
 80062a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062a6:	2300      	movs	r3, #0
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	4b11      	ldr	r3, [pc, #68]	@ (80062f0 <prvCheckForValidListAndQueue+0x74>)
 80062ac:	4a11      	ldr	r2, [pc, #68]	@ (80062f4 <prvCheckForValidListAndQueue+0x78>)
 80062ae:	2110      	movs	r1, #16
 80062b0:	200a      	movs	r0, #10
 80062b2:	f7fe f8ff 	bl	80044b4 <xQueueGenericCreateStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <prvCheckForValidListAndQueue+0x60>)
 80062ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <prvCheckForValidListAndQueue+0x60>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062c4:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <prvCheckForValidListAndQueue+0x60>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	490b      	ldr	r1, [pc, #44]	@ (80062f8 <prvCheckForValidListAndQueue+0x7c>)
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fd24 	bl	8004d18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062d0:	f000 f974 	bl	80065bc <vPortExitCritical>
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20001288 	.word	0x20001288
 80062e0:	20001258 	.word	0x20001258
 80062e4:	2000126c 	.word	0x2000126c
 80062e8:	20001280 	.word	0x20001280
 80062ec:	20001284 	.word	0x20001284
 80062f0:	20001334 	.word	0x20001334
 80062f4:	20001294 	.word	0x20001294
 80062f8:	0800760c 	.word	0x0800760c

080062fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3b04      	subs	r3, #4
 800630c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3b04      	subs	r3, #4
 800631a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3b04      	subs	r3, #4
 800632a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800632c:	4a0c      	ldr	r2, [pc, #48]	@ (8006360 <pxPortInitialiseStack+0x64>)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3b14      	subs	r3, #20
 8006336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3b04      	subs	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f06f 0202 	mvn.w	r2, #2
 800634a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3b20      	subs	r3, #32
 8006350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006352:	68fb      	ldr	r3, [r7, #12]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	08006365 	.word	0x08006365

08006364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800636e:	4b13      	ldr	r3, [pc, #76]	@ (80063bc <prvTaskExitError+0x58>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006376:	d00b      	beq.n	8006390 <prvTaskExitError+0x2c>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <prvTaskExitError+0x28>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60bb      	str	r3, [r7, #8]
}
 80063a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063a4:	bf00      	nop
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0fc      	beq.n	80063a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	2000000c 	.word	0x2000000c

080063c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063c0:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <pxCurrentTCBConst2>)
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	f380 8809 	msr	PSP, r0
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8811 	msr	BASEPRI, r0
 80063da:	4770      	bx	lr
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst2>:
 80063e0:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063e8:	4808      	ldr	r0, [pc, #32]	@ (800640c <prvPortStartFirstTask+0x24>)
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f380 8808 	msr	MSP, r0
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f380 8814 	msr	CONTROL, r0
 80063fa:	b662      	cpsie	i
 80063fc:	b661      	cpsie	f
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	df00      	svc	0
 8006408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800640a:	bf00      	nop
 800640c:	e000ed08 	.word	0xe000ed08

08006410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <xPortStartScheduler+0x124>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a47      	ldr	r2, [pc, #284]	@ (8006538 <xPortStartScheduler+0x128>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10b      	bne.n	8006438 <xPortStartScheduler+0x28>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006438:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <xPortStartScheduler+0x124>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a3f      	ldr	r2, [pc, #252]	@ (800653c <xPortStartScheduler+0x12c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10b      	bne.n	800645a <xPortStartScheduler+0x4a>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	613b      	str	r3, [r7, #16]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800645a:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <xPortStartScheduler+0x130>)
 800645c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	22ff      	movs	r2, #255	@ 0xff
 800646a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <xPortStartScheduler+0x134>)
 8006480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006482:	4b31      	ldr	r3, [pc, #196]	@ (8006548 <xPortStartScheduler+0x138>)
 8006484:	2207      	movs	r2, #7
 8006486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006488:	e009      	b.n	800649e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800648a:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <xPortStartScheduler+0x138>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3b01      	subs	r3, #1
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <xPortStartScheduler+0x138>)
 8006492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a6:	2b80      	cmp	r3, #128	@ 0x80
 80064a8:	d0ef      	beq.n	800648a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064aa:	4b27      	ldr	r3, [pc, #156]	@ (8006548 <xPortStartScheduler+0x138>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1c3 0307 	rsb	r3, r3, #7
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d00b      	beq.n	80064ce <xPortStartScheduler+0xbe>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60bb      	str	r3, [r7, #8]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006548 <xPortStartScheduler+0x138>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <xPortStartScheduler+0x138>)
 80064d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006548 <xPortStartScheduler+0x138>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064e0:	4a19      	ldr	r2, [pc, #100]	@ (8006548 <xPortStartScheduler+0x138>)
 80064e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064ec:	4b17      	ldr	r3, [pc, #92]	@ (800654c <xPortStartScheduler+0x13c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a16      	ldr	r2, [pc, #88]	@ (800654c <xPortStartScheduler+0x13c>)
 80064f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064f8:	4b14      	ldr	r3, [pc, #80]	@ (800654c <xPortStartScheduler+0x13c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a13      	ldr	r2, [pc, #76]	@ (800654c <xPortStartScheduler+0x13c>)
 80064fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006504:	f000 f8da 	bl	80066bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006508:	4b11      	ldr	r3, [pc, #68]	@ (8006550 <xPortStartScheduler+0x140>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800650e:	f000 f8f9 	bl	8006704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <xPortStartScheduler+0x144>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a0f      	ldr	r2, [pc, #60]	@ (8006554 <xPortStartScheduler+0x144>)
 8006518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800651c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800651e:	f7ff ff63 	bl	80063e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006522:	f7ff f831 	bl	8005588 <vTaskSwitchContext>
	prvTaskExitError();
 8006526:	f7ff ff1d 	bl	8006364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	e000ed00 	.word	0xe000ed00
 8006538:	410fc271 	.word	0x410fc271
 800653c:	410fc270 	.word	0x410fc270
 8006540:	e000e400 	.word	0xe000e400
 8006544:	20001384 	.word	0x20001384
 8006548:	20001388 	.word	0x20001388
 800654c:	e000ed20 	.word	0xe000ed20
 8006550:	2000000c 	.word	0x2000000c
 8006554:	e000ef34 	.word	0xe000ef34

08006558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <vPortEnterCritical+0x5c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	4a0e      	ldr	r2, [pc, #56]	@ (80065b4 <vPortEnterCritical+0x5c>)
 800657a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800657c:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <vPortEnterCritical+0x5c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d110      	bne.n	80065a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006584:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <vPortEnterCritical+0x60>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	603b      	str	r3, [r7, #0]
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <vPortEnterCritical+0x4a>
	}
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	2000000c 	.word	0x2000000c
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <vPortExitCritical+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <vPortExitCritical+0x26>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065e2:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <vPortExitCritical+0x50>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	4a08      	ldr	r2, [pc, #32]	@ (800660c <vPortExitCritical+0x50>)
 80065ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065ec:	4b07      	ldr	r3, [pc, #28]	@ (800660c <vPortExitCritical+0x50>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <vPortExitCritical+0x44>
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000000c 	.word	0x2000000c

08006610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006610:	f3ef 8009 	mrs	r0, PSP
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4b15      	ldr	r3, [pc, #84]	@ (8006670 <pxCurrentTCBConst>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	f01e 0f10 	tst.w	lr, #16
 8006620:	bf08      	it	eq
 8006622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006634:	f380 8811 	msr	BASEPRI, r0
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f7fe ffa2 	bl	8005588 <vTaskSwitchContext>
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f380 8811 	msr	BASEPRI, r0
 800664c:	bc09      	pop	{r0, r3}
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006656:	f01e 0f10 	tst.w	lr, #16
 800665a:	bf08      	it	eq
 800665c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006660:	f380 8809 	msr	PSP, r0
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst>:
 8006670:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006692:	f7fe febf 	bl	8005414 <xTaskIncrementTick>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <xPortSysTickHandler+0x40>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f383 8811 	msr	BASEPRI, r3
}
 80066ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066c6:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <vPortSetupTimerInterrupt+0x38>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	@ (80066f8 <vPortSetupTimerInterrupt+0x3c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	@ (80066fc <vPortSetupTimerInterrupt+0x40>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <vPortSetupTimerInterrupt+0x44>)
 80066da:	3b01      	subs	r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066de:	4b04      	ldr	r3, [pc, #16]	@ (80066f0 <vPortSetupTimerInterrupt+0x34>)
 80066e0:	2207      	movs	r2, #7
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000e010 	.word	0xe000e010
 80066f4:	e000e018 	.word	0xe000e018
 80066f8:	20000000 	.word	0x20000000
 80066fc:	10624dd3 	.word	0x10624dd3
 8006700:	e000e014 	.word	0xe000e014

08006704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006714 <vPortEnableVFP+0x10>
 8006708:	6801      	ldr	r1, [r0, #0]
 800670a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800670e:	6001      	str	r1, [r0, #0]
 8006710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006712:	bf00      	nop
 8006714:	e000ed88 	.word	0xe000ed88

08006718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800671e:	f3ef 8305 	mrs	r3, IPSR
 8006722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b0f      	cmp	r3, #15
 8006728:	d915      	bls.n	8006756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800672a:	4a18      	ldr	r2, [pc, #96]	@ (800678c <vPortValidateInterruptPriority+0x74>)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006734:	4b16      	ldr	r3, [pc, #88]	@ (8006790 <vPortValidateInterruptPriority+0x78>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	7afa      	ldrb	r2, [r7, #11]
 800673a:	429a      	cmp	r2, r3
 800673c:	d20b      	bcs.n	8006756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006756:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <vPortValidateInterruptPriority+0x7c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800675e:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <vPortValidateInterruptPriority+0x80>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d90b      	bls.n	800677e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	603b      	str	r3, [r7, #0]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <vPortValidateInterruptPriority+0x62>
	}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	e000e3f0 	.word	0xe000e3f0
 8006790:	20001384 	.word	0x20001384
 8006794:	e000ed0c 	.word	0xe000ed0c
 8006798:	20001388 	.word	0x20001388

0800679c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	@ 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067a8:	f7fe fd78 	bl	800529c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006920 <pvPortMalloc+0x184>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067b4:	f000 f924 	bl	8006a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006924 <pvPortMalloc+0x188>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 8095 	bne.w	80068f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01e      	beq.n	800680a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80067cc:	2208      	movs	r2, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d015      	beq.n	800680a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <pvPortMalloc+0x6e>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	617b      	str	r3, [r7, #20]
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	e7fd      	b.n	8006806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d06f      	beq.n	80068f0 <pvPortMalloc+0x154>
 8006810:	4b45      	ldr	r3, [pc, #276]	@ (8006928 <pvPortMalloc+0x18c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d86a      	bhi.n	80068f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800681a:	4b44      	ldr	r3, [pc, #272]	@ (800692c <pvPortMalloc+0x190>)
 800681c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800681e:	4b43      	ldr	r3, [pc, #268]	@ (800692c <pvPortMalloc+0x190>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006824:	e004      	b.n	8006830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d903      	bls.n	8006842 <pvPortMalloc+0xa6>
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f1      	bne.n	8006826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006842:	4b37      	ldr	r3, [pc, #220]	@ (8006920 <pvPortMalloc+0x184>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006848:	429a      	cmp	r2, r3
 800684a:	d051      	beq.n	80068f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2208      	movs	r2, #8
 8006852:	4413      	add	r3, r2
 8006854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	2308      	movs	r3, #8
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	429a      	cmp	r2, r3
 800686c:	d920      	bls.n	80068b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800686e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <pvPortMalloc+0xfc>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068aa:	69b8      	ldr	r0, [r7, #24]
 80068ac:	f000 f90a 	bl	8006ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <pvPortMalloc+0x18c>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <pvPortMalloc+0x18c>)
 80068bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068be:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <pvPortMalloc+0x18c>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006930 <pvPortMalloc+0x194>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d203      	bcs.n	80068d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ca:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <pvPortMalloc+0x18c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a18      	ldr	r2, [pc, #96]	@ (8006930 <pvPortMalloc+0x194>)
 80068d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b13      	ldr	r3, [pc, #76]	@ (8006924 <pvPortMalloc+0x188>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	431a      	orrs	r2, r3
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068e6:	4b13      	ldr	r3, [pc, #76]	@ (8006934 <pvPortMalloc+0x198>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	4a11      	ldr	r2, [pc, #68]	@ (8006934 <pvPortMalloc+0x198>)
 80068ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068f0:	f7fe fce2 	bl	80052b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <pvPortMalloc+0x17a>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <pvPortMalloc+0x176>
	return pvReturn;
 8006916:	69fb      	ldr	r3, [r7, #28]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3728      	adds	r7, #40	@ 0x28
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20004f94 	.word	0x20004f94
 8006924:	20004fa8 	.word	0x20004fa8
 8006928:	20004f98 	.word	0x20004f98
 800692c:	20004f8c 	.word	0x20004f8c
 8006930:	20004f9c 	.word	0x20004f9c
 8006934:	20004fa0 	.word	0x20004fa0

08006938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d04f      	beq.n	80069ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800694a:	2308      	movs	r3, #8
 800694c:	425b      	negs	r3, r3
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	4b25      	ldr	r3, [pc, #148]	@ (80069f4 <vPortFree+0xbc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4013      	ands	r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <vPortFree+0x46>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60fb      	str	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <vPortFree+0x66>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60bb      	str	r3, [r7, #8]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <vPortFree+0xbc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01e      	beq.n	80069ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11a      	bne.n	80069ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	4b0e      	ldr	r3, [pc, #56]	@ (80069f4 <vPortFree+0xbc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	43db      	mvns	r3, r3
 80069be:	401a      	ands	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069c4:	f7fe fc6a 	bl	800529c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	4b0a      	ldr	r3, [pc, #40]	@ (80069f8 <vPortFree+0xc0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	4a09      	ldr	r2, [pc, #36]	@ (80069f8 <vPortFree+0xc0>)
 80069d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069d6:	6938      	ldr	r0, [r7, #16]
 80069d8:	f000 f874 	bl	8006ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069dc:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <vPortFree+0xc4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a06      	ldr	r2, [pc, #24]	@ (80069fc <vPortFree+0xc4>)
 80069e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069e6:	f7fe fc67 	bl	80052b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069ea:	bf00      	nop
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20004fa8 	.word	0x20004fa8
 80069f8:	20004f98 	.word	0x20004f98
 80069fc:	20004fa4 	.word	0x20004fa4

08006a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a0c:	4b27      	ldr	r3, [pc, #156]	@ (8006aac <prvHeapInit+0xac>)
 8006a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006aac <prvHeapInit+0xac>)
 8006a30:	4413      	add	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a38:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab0 <prvHeapInit+0xb0>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab0 <prvHeapInit+0xb0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a62:	4b14      	ldr	r3, [pc, #80]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a80:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <prvHeapInit+0xb4>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <prvHeapInit+0xb8>)
 8006a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a09      	ldr	r2, [pc, #36]	@ (8006abc <prvHeapInit+0xbc>)
 8006a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a98:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <prvHeapInit+0xc0>)
 8006a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a9e:	601a      	str	r2, [r3, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	2000138c 	.word	0x2000138c
 8006ab0:	20004f8c 	.word	0x20004f8c
 8006ab4:	20004f94 	.word	0x20004f94
 8006ab8:	20004f9c 	.word	0x20004f9c
 8006abc:	20004f98 	.word	0x20004f98
 8006ac0:	20004fa8 	.word	0x20004fa8

08006ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006acc:	4b28      	ldr	r3, [pc, #160]	@ (8006b70 <prvInsertBlockIntoFreeList+0xac>)
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e002      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x14>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d8f7      	bhi.n	8006ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4413      	add	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d108      	bne.n	8006b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	441a      	add	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d118      	bne.n	8006b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b15      	ldr	r3, [pc, #84]	@ (8006b74 <prvInsertBlockIntoFreeList+0xb0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d00d      	beq.n	8006b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	441a      	add	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e008      	b.n	8006b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <prvInsertBlockIntoFreeList+0xb0>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e003      	b.n	8006b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d002      	beq.n	8006b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20004f8c 	.word	0x20004f8c
 8006b74:	20004f94 	.word	0x20004f94

08006b78 <_vsniprintf_r>:
 8006b78:	b530      	push	{r4, r5, lr}
 8006b7a:	4614      	mov	r4, r2
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	b09b      	sub	sp, #108	@ 0x6c
 8006b80:	4605      	mov	r5, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	da05      	bge.n	8006b92 <_vsniprintf_r+0x1a>
 8006b86:	238b      	movs	r3, #139	@ 0x8b
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b8e:	b01b      	add	sp, #108	@ 0x6c
 8006b90:	bd30      	pop	{r4, r5, pc}
 8006b92:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006b96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ba0:	bf14      	ite	ne
 8006ba2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006ba6:	4623      	moveq	r3, r4
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	9305      	str	r3, [sp, #20]
 8006bac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bb0:	9100      	str	r1, [sp, #0]
 8006bb2:	9104      	str	r1, [sp, #16]
 8006bb4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006bb8:	4669      	mov	r1, sp
 8006bba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006bbc:	f000 f95e 	bl	8006e7c <_svfiprintf_r>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	bfbc      	itt	lt
 8006bc4:	238b      	movlt	r3, #139	@ 0x8b
 8006bc6:	602b      	strlt	r3, [r5, #0]
 8006bc8:	2c00      	cmp	r4, #0
 8006bca:	d0e0      	beq.n	8006b8e <_vsniprintf_r+0x16>
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e7dc      	b.n	8006b8e <_vsniprintf_r+0x16>

08006bd4 <vsniprintf>:
 8006bd4:	b507      	push	{r0, r1, r2, lr}
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	460a      	mov	r2, r1
 8006bdc:	4601      	mov	r1, r0
 8006bde:	4803      	ldr	r0, [pc, #12]	@ (8006bec <vsniprintf+0x18>)
 8006be0:	6800      	ldr	r0, [r0, #0]
 8006be2:	f7ff ffc9 	bl	8006b78 <_vsniprintf_r>
 8006be6:	b003      	add	sp, #12
 8006be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bec:	20000010 	.word	0x20000010

08006bf0 <memset>:
 8006bf0:	4402      	add	r2, r0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <__errno>:
 8006c00:	4b01      	ldr	r3, [pc, #4]	@ (8006c08 <__errno+0x8>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	20000010 	.word	0x20000010

08006c0c <__libc_init_array>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006c44 <__libc_init_array+0x38>)
 8006c10:	4c0d      	ldr	r4, [pc, #52]	@ (8006c48 <__libc_init_array+0x3c>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	2600      	movs	r6, #0
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	d109      	bne.n	8006c30 <__libc_init_array+0x24>
 8006c1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006c4c <__libc_init_array+0x40>)
 8006c1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006c50 <__libc_init_array+0x44>)
 8006c20:	f000 fcc2 	bl	80075a8 <_init>
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	2600      	movs	r6, #0
 8006c2a:	42a6      	cmp	r6, r4
 8006c2c:	d105      	bne.n	8006c3a <__libc_init_array+0x2e>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c34:	4798      	blx	r3
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7ee      	b.n	8006c18 <__libc_init_array+0xc>
 8006c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3e:	4798      	blx	r3
 8006c40:	3601      	adds	r6, #1
 8006c42:	e7f2      	b.n	8006c2a <__libc_init_array+0x1e>
 8006c44:	080079d0 	.word	0x080079d0
 8006c48:	080079d0 	.word	0x080079d0
 8006c4c:	080079d0 	.word	0x080079d0
 8006c50:	080079d4 	.word	0x080079d4

08006c54 <__retarget_lock_acquire_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <__retarget_lock_release_recursive>:
 8006c56:	4770      	bx	lr

08006c58 <_reclaim_reent>:
 8006c58:	4b2d      	ldr	r3, [pc, #180]	@ (8006d10 <_reclaim_reent+0xb8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4283      	cmp	r3, r0
 8006c5e:	b570      	push	{r4, r5, r6, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	d053      	beq.n	8006d0c <_reclaim_reent+0xb4>
 8006c64:	69c3      	ldr	r3, [r0, #28]
 8006c66:	b31b      	cbz	r3, 8006cb0 <_reclaim_reent+0x58>
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	b163      	cbz	r3, 8006c86 <_reclaim_reent+0x2e>
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	69e3      	ldr	r3, [r4, #28]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	5959      	ldr	r1, [r3, r5]
 8006c74:	b9b1      	cbnz	r1, 8006ca4 <_reclaim_reent+0x4c>
 8006c76:	3504      	adds	r5, #4
 8006c78:	2d80      	cmp	r5, #128	@ 0x80
 8006c7a:	d1f8      	bne.n	8006c6e <_reclaim_reent+0x16>
 8006c7c:	69e3      	ldr	r3, [r4, #28]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	68d9      	ldr	r1, [r3, #12]
 8006c82:	f000 f855 	bl	8006d30 <_free_r>
 8006c86:	69e3      	ldr	r3, [r4, #28]
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	b111      	cbz	r1, 8006c92 <_reclaim_reent+0x3a>
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 f84f 	bl	8006d30 <_free_r>
 8006c92:	69e3      	ldr	r3, [r4, #28]
 8006c94:	689d      	ldr	r5, [r3, #8]
 8006c96:	b15d      	cbz	r5, 8006cb0 <_reclaim_reent+0x58>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	682d      	ldr	r5, [r5, #0]
 8006c9e:	f000 f847 	bl	8006d30 <_free_r>
 8006ca2:	e7f8      	b.n	8006c96 <_reclaim_reent+0x3e>
 8006ca4:	680e      	ldr	r6, [r1, #0]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 f842 	bl	8006d30 <_free_r>
 8006cac:	4631      	mov	r1, r6
 8006cae:	e7e1      	b.n	8006c74 <_reclaim_reent+0x1c>
 8006cb0:	6961      	ldr	r1, [r4, #20]
 8006cb2:	b111      	cbz	r1, 8006cba <_reclaim_reent+0x62>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 f83b 	bl	8006d30 <_free_r>
 8006cba:	69e1      	ldr	r1, [r4, #28]
 8006cbc:	b111      	cbz	r1, 8006cc4 <_reclaim_reent+0x6c>
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 f836 	bl	8006d30 <_free_r>
 8006cc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cc6:	b111      	cbz	r1, 8006cce <_reclaim_reent+0x76>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 f831 	bl	8006d30 <_free_r>
 8006cce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cd0:	b111      	cbz	r1, 8006cd8 <_reclaim_reent+0x80>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f82c 	bl	8006d30 <_free_r>
 8006cd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cda:	b111      	cbz	r1, 8006ce2 <_reclaim_reent+0x8a>
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 f827 	bl	8006d30 <_free_r>
 8006ce2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ce4:	b111      	cbz	r1, 8006cec <_reclaim_reent+0x94>
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f822 	bl	8006d30 <_free_r>
 8006cec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006cee:	b111      	cbz	r1, 8006cf6 <_reclaim_reent+0x9e>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 f81d 	bl	8006d30 <_free_r>
 8006cf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006cf8:	b111      	cbz	r1, 8006d00 <_reclaim_reent+0xa8>
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 f818 	bl	8006d30 <_free_r>
 8006d00:	6a23      	ldr	r3, [r4, #32]
 8006d02:	b11b      	cbz	r3, 8006d0c <_reclaim_reent+0xb4>
 8006d04:	4620      	mov	r0, r4
 8006d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d0a:	4718      	bx	r3
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000010 	.word	0x20000010

08006d14 <memcpy>:
 8006d14:	440a      	add	r2, r1
 8006d16:	4291      	cmp	r1, r2
 8006d18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d1c:	d100      	bne.n	8006d20 <memcpy+0xc>
 8006d1e:	4770      	bx	lr
 8006d20:	b510      	push	{r4, lr}
 8006d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2a:	4291      	cmp	r1, r2
 8006d2c:	d1f9      	bne.n	8006d22 <memcpy+0xe>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <_free_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4605      	mov	r5, r0
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d041      	beq.n	8006dbc <_free_r+0x8c>
 8006d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3c:	1f0c      	subs	r4, r1, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bfb8      	it	lt
 8006d42:	18e4      	addlt	r4, r4, r3
 8006d44:	f000 fbc4 	bl	80074d0 <__malloc_lock>
 8006d48:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc0 <_free_r+0x90>)
 8006d4a:	6813      	ldr	r3, [r2, #0]
 8006d4c:	b933      	cbnz	r3, 8006d5c <_free_r+0x2c>
 8006d4e:	6063      	str	r3, [r4, #4]
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	4628      	mov	r0, r5
 8006d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d58:	f000 bbc0 	b.w	80074dc <__malloc_unlock>
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	d908      	bls.n	8006d72 <_free_r+0x42>
 8006d60:	6820      	ldr	r0, [r4, #0]
 8006d62:	1821      	adds	r1, r4, r0
 8006d64:	428b      	cmp	r3, r1
 8006d66:	bf01      	itttt	eq
 8006d68:	6819      	ldreq	r1, [r3, #0]
 8006d6a:	685b      	ldreq	r3, [r3, #4]
 8006d6c:	1809      	addeq	r1, r1, r0
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	e7ed      	b.n	8006d4e <_free_r+0x1e>
 8006d72:	461a      	mov	r2, r3
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	b10b      	cbz	r3, 8006d7c <_free_r+0x4c>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d9fa      	bls.n	8006d72 <_free_r+0x42>
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	1850      	adds	r0, r2, r1
 8006d80:	42a0      	cmp	r0, r4
 8006d82:	d10b      	bne.n	8006d9c <_free_r+0x6c>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	4401      	add	r1, r0
 8006d88:	1850      	adds	r0, r2, r1
 8006d8a:	4283      	cmp	r3, r0
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	d1e0      	bne.n	8006d52 <_free_r+0x22>
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	6053      	str	r3, [r2, #4]
 8006d96:	4408      	add	r0, r1
 8006d98:	6010      	str	r0, [r2, #0]
 8006d9a:	e7da      	b.n	8006d52 <_free_r+0x22>
 8006d9c:	d902      	bls.n	8006da4 <_free_r+0x74>
 8006d9e:	230c      	movs	r3, #12
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	e7d6      	b.n	8006d52 <_free_r+0x22>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	1821      	adds	r1, r4, r0
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf04      	itt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	6063      	str	r3, [r4, #4]
 8006db2:	bf04      	itt	eq
 8006db4:	1809      	addeq	r1, r1, r0
 8006db6:	6021      	streq	r1, [r4, #0]
 8006db8:	6054      	str	r4, [r2, #4]
 8006dba:	e7ca      	b.n	8006d52 <_free_r+0x22>
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
 8006dbe:	bf00      	nop
 8006dc0:	200050f0 	.word	0x200050f0

08006dc4 <__ssputs_r>:
 8006dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	688e      	ldr	r6, [r1, #8]
 8006dca:	461f      	mov	r7, r3
 8006dcc:	42be      	cmp	r6, r7
 8006dce:	680b      	ldr	r3, [r1, #0]
 8006dd0:	4682      	mov	sl, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	4690      	mov	r8, r2
 8006dd6:	d82d      	bhi.n	8006e34 <__ssputs_r+0x70>
 8006dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006de0:	d026      	beq.n	8006e30 <__ssputs_r+0x6c>
 8006de2:	6965      	ldr	r5, [r4, #20]
 8006de4:	6909      	ldr	r1, [r1, #16]
 8006de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dea:	eba3 0901 	sub.w	r9, r3, r1
 8006dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006df2:	1c7b      	adds	r3, r7, #1
 8006df4:	444b      	add	r3, r9
 8006df6:	106d      	asrs	r5, r5, #1
 8006df8:	429d      	cmp	r5, r3
 8006dfa:	bf38      	it	cc
 8006dfc:	461d      	movcc	r5, r3
 8006dfe:	0553      	lsls	r3, r2, #21
 8006e00:	d527      	bpl.n	8006e52 <__ssputs_r+0x8e>
 8006e02:	4629      	mov	r1, r5
 8006e04:	f000 f958 	bl	80070b8 <_malloc_r>
 8006e08:	4606      	mov	r6, r0
 8006e0a:	b360      	cbz	r0, 8006e66 <__ssputs_r+0xa2>
 8006e0c:	6921      	ldr	r1, [r4, #16]
 8006e0e:	464a      	mov	r2, r9
 8006e10:	f7ff ff80 	bl	8006d14 <memcpy>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	6126      	str	r6, [r4, #16]
 8006e22:	6165      	str	r5, [r4, #20]
 8006e24:	444e      	add	r6, r9
 8006e26:	eba5 0509 	sub.w	r5, r5, r9
 8006e2a:	6026      	str	r6, [r4, #0]
 8006e2c:	60a5      	str	r5, [r4, #8]
 8006e2e:	463e      	mov	r6, r7
 8006e30:	42be      	cmp	r6, r7
 8006e32:	d900      	bls.n	8006e36 <__ssputs_r+0x72>
 8006e34:	463e      	mov	r6, r7
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	f000 fb82 	bl	8007544 <memmove>
 8006e40:	68a3      	ldr	r3, [r4, #8]
 8006e42:	1b9b      	subs	r3, r3, r6
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4433      	add	r3, r6
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e52:	462a      	mov	r2, r5
 8006e54:	f000 fb48 	bl	80074e8 <_realloc_r>
 8006e58:	4606      	mov	r6, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d1e0      	bne.n	8006e20 <__ssputs_r+0x5c>
 8006e5e:	6921      	ldr	r1, [r4, #16]
 8006e60:	4650      	mov	r0, sl
 8006e62:	f7ff ff65 	bl	8006d30 <_free_r>
 8006e66:	230c      	movs	r3, #12
 8006e68:	f8ca 3000 	str.w	r3, [sl]
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e78:	e7e9      	b.n	8006e4e <__ssputs_r+0x8a>
	...

08006e7c <_svfiprintf_r>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	4698      	mov	r8, r3
 8006e82:	898b      	ldrh	r3, [r1, #12]
 8006e84:	061b      	lsls	r3, r3, #24
 8006e86:	b09d      	sub	sp, #116	@ 0x74
 8006e88:	4607      	mov	r7, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	d510      	bpl.n	8006eb2 <_svfiprintf_r+0x36>
 8006e90:	690b      	ldr	r3, [r1, #16]
 8006e92:	b973      	cbnz	r3, 8006eb2 <_svfiprintf_r+0x36>
 8006e94:	2140      	movs	r1, #64	@ 0x40
 8006e96:	f000 f90f 	bl	80070b8 <_malloc_r>
 8006e9a:	6028      	str	r0, [r5, #0]
 8006e9c:	6128      	str	r0, [r5, #16]
 8006e9e:	b930      	cbnz	r0, 8006eae <_svfiprintf_r+0x32>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ea8:	b01d      	add	sp, #116	@ 0x74
 8006eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eae:	2340      	movs	r3, #64	@ 0x40
 8006eb0:	616b      	str	r3, [r5, #20]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eb6:	2320      	movs	r3, #32
 8006eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec0:	2330      	movs	r3, #48	@ 0x30
 8006ec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007060 <_svfiprintf_r+0x1e4>
 8006ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eca:	f04f 0901 	mov.w	r9, #1
 8006ece:	4623      	mov	r3, r4
 8006ed0:	469a      	mov	sl, r3
 8006ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ed6:	b10a      	cbz	r2, 8006edc <_svfiprintf_r+0x60>
 8006ed8:	2a25      	cmp	r2, #37	@ 0x25
 8006eda:	d1f9      	bne.n	8006ed0 <_svfiprintf_r+0x54>
 8006edc:	ebba 0b04 	subs.w	fp, sl, r4
 8006ee0:	d00b      	beq.n	8006efa <_svfiprintf_r+0x7e>
 8006ee2:	465b      	mov	r3, fp
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f7ff ff6b 	bl	8006dc4 <__ssputs_r>
 8006eee:	3001      	adds	r0, #1
 8006ef0:	f000 80a7 	beq.w	8007042 <_svfiprintf_r+0x1c6>
 8006ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef6:	445a      	add	r2, fp
 8006ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006efa:	f89a 3000 	ldrb.w	r3, [sl]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 809f 	beq.w	8007042 <_svfiprintf_r+0x1c6>
 8006f04:	2300      	movs	r3, #0
 8006f06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f0e:	f10a 0a01 	add.w	sl, sl, #1
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	9307      	str	r3, [sp, #28]
 8006f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f1c:	4654      	mov	r4, sl
 8006f1e:	2205      	movs	r2, #5
 8006f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f24:	484e      	ldr	r0, [pc, #312]	@ (8007060 <_svfiprintf_r+0x1e4>)
 8006f26:	f7f9 f973 	bl	8000210 <memchr>
 8006f2a:	9a04      	ldr	r2, [sp, #16]
 8006f2c:	b9d8      	cbnz	r0, 8006f66 <_svfiprintf_r+0xea>
 8006f2e:	06d0      	lsls	r0, r2, #27
 8006f30:	bf44      	itt	mi
 8006f32:	2320      	movmi	r3, #32
 8006f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f38:	0711      	lsls	r1, r2, #28
 8006f3a:	bf44      	itt	mi
 8006f3c:	232b      	movmi	r3, #43	@ 0x2b
 8006f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f42:	f89a 3000 	ldrb.w	r3, [sl]
 8006f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f48:	d015      	beq.n	8006f76 <_svfiprintf_r+0xfa>
 8006f4a:	9a07      	ldr	r2, [sp, #28]
 8006f4c:	4654      	mov	r4, sl
 8006f4e:	2000      	movs	r0, #0
 8006f50:	f04f 0c0a 	mov.w	ip, #10
 8006f54:	4621      	mov	r1, r4
 8006f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f5a:	3b30      	subs	r3, #48	@ 0x30
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	d94b      	bls.n	8006ff8 <_svfiprintf_r+0x17c>
 8006f60:	b1b0      	cbz	r0, 8006f90 <_svfiprintf_r+0x114>
 8006f62:	9207      	str	r2, [sp, #28]
 8006f64:	e014      	b.n	8006f90 <_svfiprintf_r+0x114>
 8006f66:	eba0 0308 	sub.w	r3, r0, r8
 8006f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	46a2      	mov	sl, r4
 8006f74:	e7d2      	b.n	8006f1c <_svfiprintf_r+0xa0>
 8006f76:	9b03      	ldr	r3, [sp, #12]
 8006f78:	1d19      	adds	r1, r3, #4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	9103      	str	r1, [sp, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfbb      	ittet	lt
 8006f82:	425b      	neglt	r3, r3
 8006f84:	f042 0202 	orrlt.w	r2, r2, #2
 8006f88:	9307      	strge	r3, [sp, #28]
 8006f8a:	9307      	strlt	r3, [sp, #28]
 8006f8c:	bfb8      	it	lt
 8006f8e:	9204      	strlt	r2, [sp, #16]
 8006f90:	7823      	ldrb	r3, [r4, #0]
 8006f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f94:	d10a      	bne.n	8006fac <_svfiprintf_r+0x130>
 8006f96:	7863      	ldrb	r3, [r4, #1]
 8006f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f9a:	d132      	bne.n	8007002 <_svfiprintf_r+0x186>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	1d1a      	adds	r2, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	9203      	str	r2, [sp, #12]
 8006fa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fa8:	3402      	adds	r4, #2
 8006faa:	9305      	str	r3, [sp, #20]
 8006fac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007070 <_svfiprintf_r+0x1f4>
 8006fb0:	7821      	ldrb	r1, [r4, #0]
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	f7f9 f92b 	bl	8000210 <memchr>
 8006fba:	b138      	cbz	r0, 8006fcc <_svfiprintf_r+0x150>
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	eba0 000a 	sub.w	r0, r0, sl
 8006fc2:	2240      	movs	r2, #64	@ 0x40
 8006fc4:	4082      	lsls	r2, r0
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	3401      	adds	r4, #1
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd0:	4824      	ldr	r0, [pc, #144]	@ (8007064 <_svfiprintf_r+0x1e8>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	f7f9 f91a 	bl	8000210 <memchr>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d036      	beq.n	800704e <_svfiprintf_r+0x1d2>
 8006fe0:	4b21      	ldr	r3, [pc, #132]	@ (8007068 <_svfiprintf_r+0x1ec>)
 8006fe2:	bb1b      	cbnz	r3, 800702c <_svfiprintf_r+0x1b0>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	3307      	adds	r3, #7
 8006fe8:	f023 0307 	bic.w	r3, r3, #7
 8006fec:	3308      	adds	r3, #8
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff2:	4433      	add	r3, r6
 8006ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff6:	e76a      	b.n	8006ece <_svfiprintf_r+0x52>
 8006ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	2001      	movs	r0, #1
 8007000:	e7a8      	b.n	8006f54 <_svfiprintf_r+0xd8>
 8007002:	2300      	movs	r3, #0
 8007004:	3401      	adds	r4, #1
 8007006:	9305      	str	r3, [sp, #20]
 8007008:	4619      	mov	r1, r3
 800700a:	f04f 0c0a 	mov.w	ip, #10
 800700e:	4620      	mov	r0, r4
 8007010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007014:	3a30      	subs	r2, #48	@ 0x30
 8007016:	2a09      	cmp	r2, #9
 8007018:	d903      	bls.n	8007022 <_svfiprintf_r+0x1a6>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0c6      	beq.n	8006fac <_svfiprintf_r+0x130>
 800701e:	9105      	str	r1, [sp, #20]
 8007020:	e7c4      	b.n	8006fac <_svfiprintf_r+0x130>
 8007022:	fb0c 2101 	mla	r1, ip, r1, r2
 8007026:	4604      	mov	r4, r0
 8007028:	2301      	movs	r3, #1
 800702a:	e7f0      	b.n	800700e <_svfiprintf_r+0x192>
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	462a      	mov	r2, r5
 8007032:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <_svfiprintf_r+0x1f0>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4638      	mov	r0, r7
 8007038:	f3af 8000 	nop.w
 800703c:	1c42      	adds	r2, r0, #1
 800703e:	4606      	mov	r6, r0
 8007040:	d1d6      	bne.n	8006ff0 <_svfiprintf_r+0x174>
 8007042:	89ab      	ldrh	r3, [r5, #12]
 8007044:	065b      	lsls	r3, r3, #25
 8007046:	f53f af2d 	bmi.w	8006ea4 <_svfiprintf_r+0x28>
 800704a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800704c:	e72c      	b.n	8006ea8 <_svfiprintf_r+0x2c>
 800704e:	ab03      	add	r3, sp, #12
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	462a      	mov	r2, r5
 8007054:	4b05      	ldr	r3, [pc, #20]	@ (800706c <_svfiprintf_r+0x1f0>)
 8007056:	a904      	add	r1, sp, #16
 8007058:	4638      	mov	r0, r7
 800705a:	f000 f91b 	bl	8007294 <_printf_i>
 800705e:	e7ed      	b.n	800703c <_svfiprintf_r+0x1c0>
 8007060:	08007994 	.word	0x08007994
 8007064:	0800799e 	.word	0x0800799e
 8007068:	00000000 	.word	0x00000000
 800706c:	08006dc5 	.word	0x08006dc5
 8007070:	0800799a 	.word	0x0800799a

08007074 <sbrk_aligned>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4e0f      	ldr	r6, [pc, #60]	@ (80070b4 <sbrk_aligned+0x40>)
 8007078:	460c      	mov	r4, r1
 800707a:	6831      	ldr	r1, [r6, #0]
 800707c:	4605      	mov	r5, r0
 800707e:	b911      	cbnz	r1, 8007086 <sbrk_aligned+0x12>
 8007080:	f000 fa7a 	bl	8007578 <_sbrk_r>
 8007084:	6030      	str	r0, [r6, #0]
 8007086:	4621      	mov	r1, r4
 8007088:	4628      	mov	r0, r5
 800708a:	f000 fa75 	bl	8007578 <_sbrk_r>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d103      	bne.n	800709a <sbrk_aligned+0x26>
 8007092:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007096:	4620      	mov	r0, r4
 8007098:	bd70      	pop	{r4, r5, r6, pc}
 800709a:	1cc4      	adds	r4, r0, #3
 800709c:	f024 0403 	bic.w	r4, r4, #3
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d0f8      	beq.n	8007096 <sbrk_aligned+0x22>
 80070a4:	1a21      	subs	r1, r4, r0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fa66 	bl	8007578 <_sbrk_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d1f2      	bne.n	8007096 <sbrk_aligned+0x22>
 80070b0:	e7ef      	b.n	8007092 <sbrk_aligned+0x1e>
 80070b2:	bf00      	nop
 80070b4:	200050ec 	.word	0x200050ec

080070b8 <_malloc_r>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	1ccd      	adds	r5, r1, #3
 80070be:	f025 0503 	bic.w	r5, r5, #3
 80070c2:	3508      	adds	r5, #8
 80070c4:	2d0c      	cmp	r5, #12
 80070c6:	bf38      	it	cc
 80070c8:	250c      	movcc	r5, #12
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	4606      	mov	r6, r0
 80070ce:	db01      	blt.n	80070d4 <_malloc_r+0x1c>
 80070d0:	42a9      	cmp	r1, r5
 80070d2:	d904      	bls.n	80070de <_malloc_r+0x26>
 80070d4:	230c      	movs	r3, #12
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	2000      	movs	r0, #0
 80070da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071b4 <_malloc_r+0xfc>
 80070e2:	f000 f9f5 	bl	80074d0 <__malloc_lock>
 80070e6:	f8d8 3000 	ldr.w	r3, [r8]
 80070ea:	461c      	mov	r4, r3
 80070ec:	bb44      	cbnz	r4, 8007140 <_malloc_r+0x88>
 80070ee:	4629      	mov	r1, r5
 80070f0:	4630      	mov	r0, r6
 80070f2:	f7ff ffbf 	bl	8007074 <sbrk_aligned>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	4604      	mov	r4, r0
 80070fa:	d158      	bne.n	80071ae <_malloc_r+0xf6>
 80070fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007100:	4627      	mov	r7, r4
 8007102:	2f00      	cmp	r7, #0
 8007104:	d143      	bne.n	800718e <_malloc_r+0xd6>
 8007106:	2c00      	cmp	r4, #0
 8007108:	d04b      	beq.n	80071a2 <_malloc_r+0xea>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	4639      	mov	r1, r7
 800710e:	4630      	mov	r0, r6
 8007110:	eb04 0903 	add.w	r9, r4, r3
 8007114:	f000 fa30 	bl	8007578 <_sbrk_r>
 8007118:	4581      	cmp	r9, r0
 800711a:	d142      	bne.n	80071a2 <_malloc_r+0xea>
 800711c:	6821      	ldr	r1, [r4, #0]
 800711e:	1a6d      	subs	r5, r5, r1
 8007120:	4629      	mov	r1, r5
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ffa6 	bl	8007074 <sbrk_aligned>
 8007128:	3001      	adds	r0, #1
 800712a:	d03a      	beq.n	80071a2 <_malloc_r+0xea>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	442b      	add	r3, r5
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	f8d8 3000 	ldr.w	r3, [r8]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	bb62      	cbnz	r2, 8007194 <_malloc_r+0xdc>
 800713a:	f8c8 7000 	str.w	r7, [r8]
 800713e:	e00f      	b.n	8007160 <_malloc_r+0xa8>
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	1b52      	subs	r2, r2, r5
 8007144:	d420      	bmi.n	8007188 <_malloc_r+0xd0>
 8007146:	2a0b      	cmp	r2, #11
 8007148:	d917      	bls.n	800717a <_malloc_r+0xc2>
 800714a:	1961      	adds	r1, r4, r5
 800714c:	42a3      	cmp	r3, r4
 800714e:	6025      	str	r5, [r4, #0]
 8007150:	bf18      	it	ne
 8007152:	6059      	strne	r1, [r3, #4]
 8007154:	6863      	ldr	r3, [r4, #4]
 8007156:	bf08      	it	eq
 8007158:	f8c8 1000 	streq.w	r1, [r8]
 800715c:	5162      	str	r2, [r4, r5]
 800715e:	604b      	str	r3, [r1, #4]
 8007160:	4630      	mov	r0, r6
 8007162:	f000 f9bb 	bl	80074dc <__malloc_unlock>
 8007166:	f104 000b 	add.w	r0, r4, #11
 800716a:	1d23      	adds	r3, r4, #4
 800716c:	f020 0007 	bic.w	r0, r0, #7
 8007170:	1ac2      	subs	r2, r0, r3
 8007172:	bf1c      	itt	ne
 8007174:	1a1b      	subne	r3, r3, r0
 8007176:	50a3      	strne	r3, [r4, r2]
 8007178:	e7af      	b.n	80070da <_malloc_r+0x22>
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	42a3      	cmp	r3, r4
 800717e:	bf0c      	ite	eq
 8007180:	f8c8 2000 	streq.w	r2, [r8]
 8007184:	605a      	strne	r2, [r3, #4]
 8007186:	e7eb      	b.n	8007160 <_malloc_r+0xa8>
 8007188:	4623      	mov	r3, r4
 800718a:	6864      	ldr	r4, [r4, #4]
 800718c:	e7ae      	b.n	80070ec <_malloc_r+0x34>
 800718e:	463c      	mov	r4, r7
 8007190:	687f      	ldr	r7, [r7, #4]
 8007192:	e7b6      	b.n	8007102 <_malloc_r+0x4a>
 8007194:	461a      	mov	r2, r3
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	42a3      	cmp	r3, r4
 800719a:	d1fb      	bne.n	8007194 <_malloc_r+0xdc>
 800719c:	2300      	movs	r3, #0
 800719e:	6053      	str	r3, [r2, #4]
 80071a0:	e7de      	b.n	8007160 <_malloc_r+0xa8>
 80071a2:	230c      	movs	r3, #12
 80071a4:	6033      	str	r3, [r6, #0]
 80071a6:	4630      	mov	r0, r6
 80071a8:	f000 f998 	bl	80074dc <__malloc_unlock>
 80071ac:	e794      	b.n	80070d8 <_malloc_r+0x20>
 80071ae:	6005      	str	r5, [r0, #0]
 80071b0:	e7d6      	b.n	8007160 <_malloc_r+0xa8>
 80071b2:	bf00      	nop
 80071b4:	200050f0 	.word	0x200050f0

080071b8 <_printf_common>:
 80071b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	4616      	mov	r6, r2
 80071be:	4698      	mov	r8, r3
 80071c0:	688a      	ldr	r2, [r1, #8]
 80071c2:	690b      	ldr	r3, [r1, #16]
 80071c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bfb8      	it	lt
 80071cc:	4613      	movlt	r3, r2
 80071ce:	6033      	str	r3, [r6, #0]
 80071d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071d4:	4607      	mov	r7, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	b10a      	cbz	r2, 80071de <_printf_common+0x26>
 80071da:	3301      	adds	r3, #1
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	0699      	lsls	r1, r3, #26
 80071e2:	bf42      	ittt	mi
 80071e4:	6833      	ldrmi	r3, [r6, #0]
 80071e6:	3302      	addmi	r3, #2
 80071e8:	6033      	strmi	r3, [r6, #0]
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	f015 0506 	ands.w	r5, r5, #6
 80071f0:	d106      	bne.n	8007200 <_printf_common+0x48>
 80071f2:	f104 0a19 	add.w	sl, r4, #25
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	6832      	ldr	r2, [r6, #0]
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dc26      	bgt.n	800724e <_printf_common+0x96>
 8007200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	3b00      	subs	r3, #0
 8007208:	bf18      	it	ne
 800720a:	2301      	movne	r3, #1
 800720c:	0692      	lsls	r2, r2, #26
 800720e:	d42b      	bmi.n	8007268 <_printf_common+0xb0>
 8007210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007214:	4641      	mov	r1, r8
 8007216:	4638      	mov	r0, r7
 8007218:	47c8      	blx	r9
 800721a:	3001      	adds	r0, #1
 800721c:	d01e      	beq.n	800725c <_printf_common+0xa4>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	6922      	ldr	r2, [r4, #16]
 8007222:	f003 0306 	and.w	r3, r3, #6
 8007226:	2b04      	cmp	r3, #4
 8007228:	bf02      	ittt	eq
 800722a:	68e5      	ldreq	r5, [r4, #12]
 800722c:	6833      	ldreq	r3, [r6, #0]
 800722e:	1aed      	subeq	r5, r5, r3
 8007230:	68a3      	ldr	r3, [r4, #8]
 8007232:	bf0c      	ite	eq
 8007234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007238:	2500      	movne	r5, #0
 800723a:	4293      	cmp	r3, r2
 800723c:	bfc4      	itt	gt
 800723e:	1a9b      	subgt	r3, r3, r2
 8007240:	18ed      	addgt	r5, r5, r3
 8007242:	2600      	movs	r6, #0
 8007244:	341a      	adds	r4, #26
 8007246:	42b5      	cmp	r5, r6
 8007248:	d11a      	bne.n	8007280 <_printf_common+0xc8>
 800724a:	2000      	movs	r0, #0
 800724c:	e008      	b.n	8007260 <_printf_common+0xa8>
 800724e:	2301      	movs	r3, #1
 8007250:	4652      	mov	r2, sl
 8007252:	4641      	mov	r1, r8
 8007254:	4638      	mov	r0, r7
 8007256:	47c8      	blx	r9
 8007258:	3001      	adds	r0, #1
 800725a:	d103      	bne.n	8007264 <_printf_common+0xac>
 800725c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007264:	3501      	adds	r5, #1
 8007266:	e7c6      	b.n	80071f6 <_printf_common+0x3e>
 8007268:	18e1      	adds	r1, r4, r3
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	2030      	movs	r0, #48	@ 0x30
 800726e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007272:	4422      	add	r2, r4
 8007274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800727c:	3302      	adds	r3, #2
 800727e:	e7c7      	b.n	8007210 <_printf_common+0x58>
 8007280:	2301      	movs	r3, #1
 8007282:	4622      	mov	r2, r4
 8007284:	4641      	mov	r1, r8
 8007286:	4638      	mov	r0, r7
 8007288:	47c8      	blx	r9
 800728a:	3001      	adds	r0, #1
 800728c:	d0e6      	beq.n	800725c <_printf_common+0xa4>
 800728e:	3601      	adds	r6, #1
 8007290:	e7d9      	b.n	8007246 <_printf_common+0x8e>
	...

08007294 <_printf_i>:
 8007294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	7e0f      	ldrb	r7, [r1, #24]
 800729a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800729c:	2f78      	cmp	r7, #120	@ 0x78
 800729e:	4691      	mov	r9, r2
 80072a0:	4680      	mov	r8, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	469a      	mov	sl, r3
 80072a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072aa:	d807      	bhi.n	80072bc <_printf_i+0x28>
 80072ac:	2f62      	cmp	r7, #98	@ 0x62
 80072ae:	d80a      	bhi.n	80072c6 <_printf_i+0x32>
 80072b0:	2f00      	cmp	r7, #0
 80072b2:	f000 80d1 	beq.w	8007458 <_printf_i+0x1c4>
 80072b6:	2f58      	cmp	r7, #88	@ 0x58
 80072b8:	f000 80b8 	beq.w	800742c <_printf_i+0x198>
 80072bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072c4:	e03a      	b.n	800733c <_printf_i+0xa8>
 80072c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072ca:	2b15      	cmp	r3, #21
 80072cc:	d8f6      	bhi.n	80072bc <_printf_i+0x28>
 80072ce:	a101      	add	r1, pc, #4	@ (adr r1, 80072d4 <_printf_i+0x40>)
 80072d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	08007341 	.word	0x08007341
 80072dc:	080072bd 	.word	0x080072bd
 80072e0:	080072bd 	.word	0x080072bd
 80072e4:	080072bd 	.word	0x080072bd
 80072e8:	080072bd 	.word	0x080072bd
 80072ec:	08007341 	.word	0x08007341
 80072f0:	080072bd 	.word	0x080072bd
 80072f4:	080072bd 	.word	0x080072bd
 80072f8:	080072bd 	.word	0x080072bd
 80072fc:	080072bd 	.word	0x080072bd
 8007300:	0800743f 	.word	0x0800743f
 8007304:	0800736b 	.word	0x0800736b
 8007308:	080073f9 	.word	0x080073f9
 800730c:	080072bd 	.word	0x080072bd
 8007310:	080072bd 	.word	0x080072bd
 8007314:	08007461 	.word	0x08007461
 8007318:	080072bd 	.word	0x080072bd
 800731c:	0800736b 	.word	0x0800736b
 8007320:	080072bd 	.word	0x080072bd
 8007324:	080072bd 	.word	0x080072bd
 8007328:	08007401 	.word	0x08007401
 800732c:	6833      	ldr	r3, [r6, #0]
 800732e:	1d1a      	adds	r2, r3, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6032      	str	r2, [r6, #0]
 8007334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800733c:	2301      	movs	r3, #1
 800733e:	e09c      	b.n	800747a <_printf_i+0x1e6>
 8007340:	6833      	ldr	r3, [r6, #0]
 8007342:	6820      	ldr	r0, [r4, #0]
 8007344:	1d19      	adds	r1, r3, #4
 8007346:	6031      	str	r1, [r6, #0]
 8007348:	0606      	lsls	r6, r0, #24
 800734a:	d501      	bpl.n	8007350 <_printf_i+0xbc>
 800734c:	681d      	ldr	r5, [r3, #0]
 800734e:	e003      	b.n	8007358 <_printf_i+0xc4>
 8007350:	0645      	lsls	r5, r0, #25
 8007352:	d5fb      	bpl.n	800734c <_printf_i+0xb8>
 8007354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007358:	2d00      	cmp	r5, #0
 800735a:	da03      	bge.n	8007364 <_printf_i+0xd0>
 800735c:	232d      	movs	r3, #45	@ 0x2d
 800735e:	426d      	negs	r5, r5
 8007360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007364:	4858      	ldr	r0, [pc, #352]	@ (80074c8 <_printf_i+0x234>)
 8007366:	230a      	movs	r3, #10
 8007368:	e011      	b.n	800738e <_printf_i+0xfa>
 800736a:	6821      	ldr	r1, [r4, #0]
 800736c:	6833      	ldr	r3, [r6, #0]
 800736e:	0608      	lsls	r0, r1, #24
 8007370:	f853 5b04 	ldr.w	r5, [r3], #4
 8007374:	d402      	bmi.n	800737c <_printf_i+0xe8>
 8007376:	0649      	lsls	r1, r1, #25
 8007378:	bf48      	it	mi
 800737a:	b2ad      	uxthmi	r5, r5
 800737c:	2f6f      	cmp	r7, #111	@ 0x6f
 800737e:	4852      	ldr	r0, [pc, #328]	@ (80074c8 <_printf_i+0x234>)
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	bf14      	ite	ne
 8007384:	230a      	movne	r3, #10
 8007386:	2308      	moveq	r3, #8
 8007388:	2100      	movs	r1, #0
 800738a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800738e:	6866      	ldr	r6, [r4, #4]
 8007390:	60a6      	str	r6, [r4, #8]
 8007392:	2e00      	cmp	r6, #0
 8007394:	db05      	blt.n	80073a2 <_printf_i+0x10e>
 8007396:	6821      	ldr	r1, [r4, #0]
 8007398:	432e      	orrs	r6, r5
 800739a:	f021 0104 	bic.w	r1, r1, #4
 800739e:	6021      	str	r1, [r4, #0]
 80073a0:	d04b      	beq.n	800743a <_printf_i+0x1a6>
 80073a2:	4616      	mov	r6, r2
 80073a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80073a8:	fb03 5711 	mls	r7, r3, r1, r5
 80073ac:	5dc7      	ldrb	r7, [r0, r7]
 80073ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073b2:	462f      	mov	r7, r5
 80073b4:	42bb      	cmp	r3, r7
 80073b6:	460d      	mov	r5, r1
 80073b8:	d9f4      	bls.n	80073a4 <_printf_i+0x110>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d10b      	bne.n	80073d6 <_printf_i+0x142>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	07df      	lsls	r7, r3, #31
 80073c2:	d508      	bpl.n	80073d6 <_printf_i+0x142>
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	6861      	ldr	r1, [r4, #4]
 80073c8:	4299      	cmp	r1, r3
 80073ca:	bfde      	ittt	le
 80073cc:	2330      	movle	r3, #48	@ 0x30
 80073ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073d6:	1b92      	subs	r2, r2, r6
 80073d8:	6122      	str	r2, [r4, #16]
 80073da:	f8cd a000 	str.w	sl, [sp]
 80073de:	464b      	mov	r3, r9
 80073e0:	aa03      	add	r2, sp, #12
 80073e2:	4621      	mov	r1, r4
 80073e4:	4640      	mov	r0, r8
 80073e6:	f7ff fee7 	bl	80071b8 <_printf_common>
 80073ea:	3001      	adds	r0, #1
 80073ec:	d14a      	bne.n	8007484 <_printf_i+0x1f0>
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073f2:	b004      	add	sp, #16
 80073f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	f043 0320 	orr.w	r3, r3, #32
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	4832      	ldr	r0, [pc, #200]	@ (80074cc <_printf_i+0x238>)
 8007402:	2778      	movs	r7, #120	@ 0x78
 8007404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	061f      	lsls	r7, r3, #24
 800740e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007412:	d402      	bmi.n	800741a <_printf_i+0x186>
 8007414:	065f      	lsls	r7, r3, #25
 8007416:	bf48      	it	mi
 8007418:	b2ad      	uxthmi	r5, r5
 800741a:	6031      	str	r1, [r6, #0]
 800741c:	07d9      	lsls	r1, r3, #31
 800741e:	bf44      	itt	mi
 8007420:	f043 0320 	orrmi.w	r3, r3, #32
 8007424:	6023      	strmi	r3, [r4, #0]
 8007426:	b11d      	cbz	r5, 8007430 <_printf_i+0x19c>
 8007428:	2310      	movs	r3, #16
 800742a:	e7ad      	b.n	8007388 <_printf_i+0xf4>
 800742c:	4826      	ldr	r0, [pc, #152]	@ (80074c8 <_printf_i+0x234>)
 800742e:	e7e9      	b.n	8007404 <_printf_i+0x170>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	f023 0320 	bic.w	r3, r3, #32
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	e7f6      	b.n	8007428 <_printf_i+0x194>
 800743a:	4616      	mov	r6, r2
 800743c:	e7bd      	b.n	80073ba <_printf_i+0x126>
 800743e:	6833      	ldr	r3, [r6, #0]
 8007440:	6825      	ldr	r5, [r4, #0]
 8007442:	6961      	ldr	r1, [r4, #20]
 8007444:	1d18      	adds	r0, r3, #4
 8007446:	6030      	str	r0, [r6, #0]
 8007448:	062e      	lsls	r6, r5, #24
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	d501      	bpl.n	8007452 <_printf_i+0x1be>
 800744e:	6019      	str	r1, [r3, #0]
 8007450:	e002      	b.n	8007458 <_printf_i+0x1c4>
 8007452:	0668      	lsls	r0, r5, #25
 8007454:	d5fb      	bpl.n	800744e <_printf_i+0x1ba>
 8007456:	8019      	strh	r1, [r3, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	4616      	mov	r6, r2
 800745e:	e7bc      	b.n	80073da <_printf_i+0x146>
 8007460:	6833      	ldr	r3, [r6, #0]
 8007462:	1d1a      	adds	r2, r3, #4
 8007464:	6032      	str	r2, [r6, #0]
 8007466:	681e      	ldr	r6, [r3, #0]
 8007468:	6862      	ldr	r2, [r4, #4]
 800746a:	2100      	movs	r1, #0
 800746c:	4630      	mov	r0, r6
 800746e:	f7f8 fecf 	bl	8000210 <memchr>
 8007472:	b108      	cbz	r0, 8007478 <_printf_i+0x1e4>
 8007474:	1b80      	subs	r0, r0, r6
 8007476:	6060      	str	r0, [r4, #4]
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	2300      	movs	r3, #0
 800747e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007482:	e7aa      	b.n	80073da <_printf_i+0x146>
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	4632      	mov	r2, r6
 8007488:	4649      	mov	r1, r9
 800748a:	4640      	mov	r0, r8
 800748c:	47d0      	blx	sl
 800748e:	3001      	adds	r0, #1
 8007490:	d0ad      	beq.n	80073ee <_printf_i+0x15a>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	079b      	lsls	r3, r3, #30
 8007496:	d413      	bmi.n	80074c0 <_printf_i+0x22c>
 8007498:	68e0      	ldr	r0, [r4, #12]
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	4298      	cmp	r0, r3
 800749e:	bfb8      	it	lt
 80074a0:	4618      	movlt	r0, r3
 80074a2:	e7a6      	b.n	80073f2 <_printf_i+0x15e>
 80074a4:	2301      	movs	r3, #1
 80074a6:	4632      	mov	r2, r6
 80074a8:	4649      	mov	r1, r9
 80074aa:	4640      	mov	r0, r8
 80074ac:	47d0      	blx	sl
 80074ae:	3001      	adds	r0, #1
 80074b0:	d09d      	beq.n	80073ee <_printf_i+0x15a>
 80074b2:	3501      	adds	r5, #1
 80074b4:	68e3      	ldr	r3, [r4, #12]
 80074b6:	9903      	ldr	r1, [sp, #12]
 80074b8:	1a5b      	subs	r3, r3, r1
 80074ba:	42ab      	cmp	r3, r5
 80074bc:	dcf2      	bgt.n	80074a4 <_printf_i+0x210>
 80074be:	e7eb      	b.n	8007498 <_printf_i+0x204>
 80074c0:	2500      	movs	r5, #0
 80074c2:	f104 0619 	add.w	r6, r4, #25
 80074c6:	e7f5      	b.n	80074b4 <_printf_i+0x220>
 80074c8:	080079a5 	.word	0x080079a5
 80074cc:	080079b6 	.word	0x080079b6

080074d0 <__malloc_lock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	@ (80074d8 <__malloc_lock+0x8>)
 80074d2:	f7ff bbbf 	b.w	8006c54 <__retarget_lock_acquire_recursive>
 80074d6:	bf00      	nop
 80074d8:	200050e4 	.word	0x200050e4

080074dc <__malloc_unlock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	@ (80074e4 <__malloc_unlock+0x8>)
 80074de:	f7ff bbba 	b.w	8006c56 <__retarget_lock_release_recursive>
 80074e2:	bf00      	nop
 80074e4:	200050e4 	.word	0x200050e4

080074e8 <_realloc_r>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	4607      	mov	r7, r0
 80074ee:	4614      	mov	r4, r2
 80074f0:	460d      	mov	r5, r1
 80074f2:	b921      	cbnz	r1, 80074fe <_realloc_r+0x16>
 80074f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f8:	4611      	mov	r1, r2
 80074fa:	f7ff bddd 	b.w	80070b8 <_malloc_r>
 80074fe:	b92a      	cbnz	r2, 800750c <_realloc_r+0x24>
 8007500:	f7ff fc16 	bl	8006d30 <_free_r>
 8007504:	4625      	mov	r5, r4
 8007506:	4628      	mov	r0, r5
 8007508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750c:	f000 f844 	bl	8007598 <_malloc_usable_size_r>
 8007510:	4284      	cmp	r4, r0
 8007512:	4606      	mov	r6, r0
 8007514:	d802      	bhi.n	800751c <_realloc_r+0x34>
 8007516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800751a:	d8f4      	bhi.n	8007506 <_realloc_r+0x1e>
 800751c:	4621      	mov	r1, r4
 800751e:	4638      	mov	r0, r7
 8007520:	f7ff fdca 	bl	80070b8 <_malloc_r>
 8007524:	4680      	mov	r8, r0
 8007526:	b908      	cbnz	r0, 800752c <_realloc_r+0x44>
 8007528:	4645      	mov	r5, r8
 800752a:	e7ec      	b.n	8007506 <_realloc_r+0x1e>
 800752c:	42b4      	cmp	r4, r6
 800752e:	4622      	mov	r2, r4
 8007530:	4629      	mov	r1, r5
 8007532:	bf28      	it	cs
 8007534:	4632      	movcs	r2, r6
 8007536:	f7ff fbed 	bl	8006d14 <memcpy>
 800753a:	4629      	mov	r1, r5
 800753c:	4638      	mov	r0, r7
 800753e:	f7ff fbf7 	bl	8006d30 <_free_r>
 8007542:	e7f1      	b.n	8007528 <_realloc_r+0x40>

08007544 <memmove>:
 8007544:	4288      	cmp	r0, r1
 8007546:	b510      	push	{r4, lr}
 8007548:	eb01 0402 	add.w	r4, r1, r2
 800754c:	d902      	bls.n	8007554 <memmove+0x10>
 800754e:	4284      	cmp	r4, r0
 8007550:	4623      	mov	r3, r4
 8007552:	d807      	bhi.n	8007564 <memmove+0x20>
 8007554:	1e43      	subs	r3, r0, #1
 8007556:	42a1      	cmp	r1, r4
 8007558:	d008      	beq.n	800756c <memmove+0x28>
 800755a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007562:	e7f8      	b.n	8007556 <memmove+0x12>
 8007564:	4402      	add	r2, r0
 8007566:	4601      	mov	r1, r0
 8007568:	428a      	cmp	r2, r1
 800756a:	d100      	bne.n	800756e <memmove+0x2a>
 800756c:	bd10      	pop	{r4, pc}
 800756e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007576:	e7f7      	b.n	8007568 <memmove+0x24>

08007578 <_sbrk_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d06      	ldr	r5, [pc, #24]	@ (8007594 <_sbrk_r+0x1c>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 feb2 	bl	80012ec <_sbrk>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_sbrk_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_sbrk_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	200050e8 	.word	0x200050e8

08007598 <_malloc_usable_size_r>:
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f18      	subs	r0, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfbc      	itt	lt
 80075a2:	580b      	ldrlt	r3, [r1, r0]
 80075a4:	18c0      	addlt	r0, r0, r3
 80075a6:	4770      	bx	lr

080075a8 <_init>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	bf00      	nop
 80075ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ae:	bc08      	pop	{r3}
 80075b0:	469e      	mov	lr, r3
 80075b2:	4770      	bx	lr

080075b4 <_fini>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr
